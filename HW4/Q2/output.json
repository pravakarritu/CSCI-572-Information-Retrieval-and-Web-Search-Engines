[
  {
    "title": "Studio search config",
    "url": "https://www.sanity.io/docs/studio-search-config",
    "html": "Skip to content\nJoin live – Get insights, tips, + Q&A from Sanity developers on our latest releases \nProduct\nPLATFORM\nSanity Studio\n\nFlexible editing environment\n\nAPIs\n\nConnect to anything\n\nContent Lake\n\nReal-time database\n\nTry product demo \nFEATURES\nReal-time collaboration\n\nFearlessly work with content\n\nPrecise content querying\n\nTreat content as data with GROQ\n\nLocalization\n\nCoherent messaging across territories\n\nSolutions\nUSE CASES\nE-commerce\n\nRicher shopping experiences\n\nMarketing sites\n\nControl your story\n\nProducts & services\n\nInnovate and automate\n\nMobile apps\n\nContent backend for every OS\n\nView all \nINTEGRATIONS\nShopify\nMux\nVercel\nNetlify\nAlgolia\nCloudinary\nBigCommerce\nCommerce Layer\nSmartling\nTransifex\nView all \nDevelopers\nLEARN\nDocumentation\nStudio API Reference\nAPI reference\nGuides\nGROQ cheat sheet\nSanity UI\nGet started \nBUILD AND SHARE\nTemplates\nTools and plugins\nSchemas and snippets\nProject showcase\nShare your work\nBrowse Exchange \nFRAMEWORKS\nReact\nVue\nNext.js\nNuxt.js\nSvelte\nRemix\nGatsby\nAstro\nAngular\nEleventy\nView all \nResources\nDISCOVER\nBlog\nResource library\nGlossary\nAgency partners\nBecome a partner\nTechnical support\nTalk to sales \nCASE STUDIES\nPuma\n\nSource of truth for global markets\n\nAether\n\nUnique digital shopping experience\n\nMorning Brew\n\nOmnichannel media distribution\n\nInVision\n\nDelivering exceptional customer experiences\n\nView all \nPOPULAR GUIDES\nHeadless CMS\nStructured content\nContent modeling\nHeadless SEO\nStatic websites\nView all \nEnterprise\nPricing\nLog in\nContact sales\nGet started\nSearch\nOverview\nGetting started\nSanity Studio\nSetup and deployment\nConfiguration\nBlock Content\nNEWVisual Editing\nAI Assist\nNEWComments\nCustomization\nComponent API\nStudio Components\nForm Components\nHow form paths work\nDiff Components\nAsset Sources\nTheming and branding\nIcons\nFavicons\nSearch\nSanity UI\nFocus and UI state in custom inputs\nFrom input components to real-time safe patches\nWorkflows\nTools\nPlugins\nCommand Line Interface\nMigrating from v2\nContent Lake\nBuild with Sanity\nAccess control\nReference\nStudio v2 docs\nEXPERIMENTAL FEATURE\nStudio search config\n\nOmnisearch allows content search, can hide specific documents, and allows custom field weighting.\n\nThe global studio search panel (omnisearch) lets you search your content lake for any document that matches your term, or narrow down by filtering your query by schema types.\n\nHide documents from omnisearch\n\nThere may be instances where you don’t want specific documents from appearing in omnisearch.\n\nTo hide search results for a particular document type and remove it as a selectable filter:\n\n{\n  type: 'document',\n  name: 'author',\n  fields: [\n    {name: 'name', type: 'string'},\n    // ...\n  ],\n\t// Hide all results for authors (and the author document type filter) in omnisearch\n\t__experimental_omnisearch_visibility: false,\n  // ...\n}\nSome example use cases:\nYou have workflow-related documents that you don’t wish to expose editors to.\nYou want to hide documents that are less frequently used by editors.\nYou’re an author of a Sanity plugin that registers its own document schema and would prefer it doesn't appear in user's studios.\nProtip\n\nThis only affects visibility within the global studio search (‘omnisearch’). Visibility in both reference and cross dataset reference input fields is unaffected.\n\nDefine custom weighting on fields\n\nYou can define specific weights on fields/paths for document types.\n\nGotcha\n\nFields and paths filtered via __experimental_search also apply to search within document list search. However, path weighting currently applies to global search.\n\nSince the API is not stable yet, and likely subject to change, it's configurable on the __experimental_search property for schema document types. Here's an example:\n\n{\n  type: 'document',\n  name: 'author',\n  fields: [\n    {name: 'name', type: 'string'},\n    // ...\n  ],\n  __experimental_search: [\n    {weight: 1.2, path: 'name'}\n  ]\n  // ...\n}\nA few things to note:\nThe weight is a global multiplier across all document types, so if name on type customer has a weight of 2, and name on type author has a weight of 4, documents of type author will be ranked higher than documents of type customer, even if their name fields equally matches what the user searched for.\nIf no search config is specified on a document type, it gets derived from the preview config (which again is derived by default through schema introspection).\nOnly fields and paths included in __experimental_search will be used when determining search weighting. It acts as a search field allowlist and can be used as a way to ignore specific fields from search.\nWe have also united the reference search with the global search, so that they both follow the same ranking/weighting rules.\n\nUPDATED ON OCTOBER 19, 2023\n\nWas this article helpful?\nNot at all\nSomewhat\nAbsolutely!\nI want to suggest an improvement to this article.\nPAGE CONTENT\nHide documents from omnisearch\nDefine custom weighting on fields\nA few things to note:\nProduct\nSanity Studio\nAPIs\nContent Lake\nSecurity & Compliance\nCompare Sanity \nResources\nDocumentation\nBlog\nResource library\nCase Studies\nGuides \nTemplates \nPartners \nExplainers \nCMS \nCompany\nContact Sales\nEnterprise\nCareers\nTerms of Service\nPrivacy Policy\nAccessibility Statement\nStay connected\nGitHub\nSlack\nTwitter\nYouTube\nStack Overflow\nBlog RSS\nNewsletter\n©Sanity 2023\nCookie preferences"
  },
  {
    "title": "Sanity UI",
    "url": "https://www.sanity.io/docs/sanity-ui",
    "html": "Skip to content\nJoin live – Get insights, tips, + Q&A from Sanity developers on our latest releases \nProduct\nPLATFORM\nSanity Studio\n\nFlexible editing environment\n\nAPIs\n\nConnect to anything\n\nContent Lake\n\nReal-time database\n\nTry product demo \nFEATURES\nReal-time collaboration\n\nFearlessly work with content\n\nPrecise content querying\n\nTreat content as data with GROQ\n\nLocalization\n\nCoherent messaging across territories\n\nSolutions\nUSE CASES\nE-commerce\n\nRicher shopping experiences\n\nMarketing sites\n\nControl your story\n\nProducts & services\n\nInnovate and automate\n\nMobile apps\n\nContent backend for every OS\n\nView all \nINTEGRATIONS\nShopify\nMux\nVercel\nNetlify\nAlgolia\nCloudinary\nBigCommerce\nCommerce Layer\nSmartling\nTransifex\nView all \nDevelopers\nLEARN\nDocumentation\nStudio API Reference\nAPI reference\nGuides\nGROQ cheat sheet\nSanity UI\nGet started \nBUILD AND SHARE\nTemplates\nTools and plugins\nSchemas and snippets\nProject showcase\nShare your work\nBrowse Exchange \nFRAMEWORKS\nReact\nVue\nNext.js\nNuxt.js\nSvelte\nRemix\nGatsby\nAstro\nAngular\nEleventy\nView all \nResources\nDISCOVER\nBlog\nResource library\nGlossary\nAgency partners\nBecome a partner\nTechnical support\nTalk to sales \nCASE STUDIES\nPuma\n\nSource of truth for global markets\n\nAether\n\nUnique digital shopping experience\n\nMorning Brew\n\nOmnichannel media distribution\n\nInVision\n\nDelivering exceptional customer experiences\n\nView all \nPOPULAR GUIDES\nHeadless CMS\nStructured content\nContent modeling\nHeadless SEO\nStatic websites\nView all \nEnterprise\nPricing\nLog in\nContact sales\nGet started\nSearch\nOverview\nGetting started\nSanity Studio\nSetup and deployment\nConfiguration\nBlock Content\nNEWVisual Editing\nAI Assist\nNEWComments\nCustomization\nComponent API\nStudio Components\nForm Components\nHow form paths work\nDiff Components\nAsset Sources\nTheming and branding\nIcons\nFavicons\nSearch\nSanity UI\nFocus and UI state in custom inputs\nFrom input components to real-time safe patches\nWorkflows\nTools\nPlugins\nCommand Line Interface\nMigrating from v2\nContent Lake\nBuild with Sanity\nAccess control\nReference\nStudio v2 docs\nSanity UI\n\nKeep your custom studio elements consistent with built-in UI components.\n\nWhen you're creating new tools and custom inputs, it's important for your editor experience to make sure your customizations match the overall design of the studio. To create this consistency, you can use the Sanity UI component library to create custom experiences without creating custom designs or adding custom CSS.\n\nUsage of Sanity UI\n\nThe Sanity UI package comes bundled for most studio usage, but if you're creating a plugin or tool, you'll want to install the package via NPM.\n\nnpm install @sanity/ui\n\nFrom there, you can import the various components into your custom inputs, tools, or widgets. For example, if you wish to apply a tooltip to a string input, you can create a custom input that uses the Stack, Box, and TextInput design primitives to create one with all the design elements of your studio built right in.\n\n// /components/MyCustomStringInput.jsx\nimport React, {useCallback} from 'react'\nimport {Stack, Text, TextInput} from '@sanity/ui'\nimport {set, unset} from 'sanity'\n\nexport const MyCustomStringInput = (props) => {\n  const {elementProps, onChange, value = ''} = props\n\n  const handleChange = useCallback((event) => {\n    const nextValue = event.currentTarget.value\n    onChange(nextValue ? set(nextValue) : unset())\n\t}, [onChange])\n\n  return (\n    <Stack space={2}>\n      <TextInput\n        {...elementProps}\n        onChange={handleChange}\n        value={value}\n      />\n      <Text>Characters: {value.length}</Text>\n    </Stack>\n  )\n}\n\nSee this guide on creating custom inputs and tools with Sanity UI.\n\nFull documentation and playground\n\nSanity UI comes with a full set of UI primitives that can be mixed, matched, and composed into many different design patterns. The full list of components can be found in the official Sanity UI documentation. To get a better feel for creating design patterns, you can also experiment with all the components in this interactive component playground.\n\nUPDATED ON DECEMBER 7, 2022\n\nWas this article helpful?\nNot at all\nSomewhat\nAbsolutely!\nI want to suggest an improvement to this article.\nPAGE CONTENT\nUsage of Sanity UI\nFull documentation and playground\nProduct\nSanity Studio\nAPIs\nContent Lake\nSecurity & Compliance\nCompare Sanity \nResources\nDocumentation\nBlog\nResource library\nCase Studies\nGuides \nTemplates \nPartners \nExplainers \nCMS \nCompany\nContact Sales\nEnterprise\nCareers\nTerms of Service\nPrivacy Policy\nAccessibility Statement\nStay connected\nGitHub\nSlack\nTwitter\nYouTube\nStack Overflow\nBlog RSS\nNewsletter\n©Sanity 2023\nCookie preferences"
  },
  {
    "title": "Icons",
    "url": "https://www.sanity.io/docs/icons-for-data-types",
    "html": "Skip to content\nJoin live – Get insights, tips, + Q&A from Sanity developers on our latest releases \nProduct\nPLATFORM\nSanity Studio\n\nFlexible editing environment\n\nAPIs\n\nConnect to anything\n\nContent Lake\n\nReal-time database\n\nTry product demo \nFEATURES\nReal-time collaboration\n\nFearlessly work with content\n\nPrecise content querying\n\nTreat content as data with GROQ\n\nLocalization\n\nCoherent messaging across territories\n\nSolutions\nUSE CASES\nE-commerce\n\nRicher shopping experiences\n\nMarketing sites\n\nControl your story\n\nProducts & services\n\nInnovate and automate\n\nMobile apps\n\nContent backend for every OS\n\nView all \nINTEGRATIONS\nShopify\nMux\nVercel\nNetlify\nAlgolia\nCloudinary\nBigCommerce\nCommerce Layer\nSmartling\nTransifex\nView all \nDevelopers\nLEARN\nDocumentation\nStudio API Reference\nAPI reference\nGuides\nGROQ cheat sheet\nSanity UI\nGet started \nBUILD AND SHARE\nTemplates\nTools and plugins\nSchemas and snippets\nProject showcase\nShare your work\nBrowse Exchange \nFRAMEWORKS\nReact\nVue\nNext.js\nNuxt.js\nSvelte\nRemix\nGatsby\nAstro\nAngular\nEleventy\nView all \nResources\nDISCOVER\nBlog\nResource library\nGlossary\nAgency partners\nBecome a partner\nTechnical support\nTalk to sales \nCASE STUDIES\nPuma\n\nSource of truth for global markets\n\nAether\n\nUnique digital shopping experience\n\nMorning Brew\n\nOmnichannel media distribution\n\nInVision\n\nDelivering exceptional customer experiences\n\nView all \nPOPULAR GUIDES\nHeadless CMS\nStructured content\nContent modeling\nHeadless SEO\nStatic websites\nView all \nEnterprise\nPricing\nLog in\nContact sales\nGet started\nSearch\nOverview\nGetting started\nSanity Studio\nSetup and deployment\nConfiguration\nBlock Content\nNEWVisual Editing\nAI Assist\nNEWComments\nCustomization\nComponent API\nStudio Components\nForm Components\nHow form paths work\nDiff Components\nAsset Sources\nTheming and branding\nIcons\nFavicons\nSearch\nSanity UI\nFocus and UI state in custom inputs\nFrom input components to real-time safe patches\nWorkflows\nTools\nPlugins\nCommand Line Interface\nMigrating from v2\nContent Lake\nBuild with Sanity\nAccess control\nReference\nStudio v2 docs\nIcons\n\nUse icons for types to display in the creation dialogue and when you're missing an media preview.\n\nIcons\n\nUse icons for types to display in the creation dialogue and when you're missing a media preview.\n\nHelpful icons can improve the editorial experience, and can be applied in several contexts throughout the studio interface, such as in structures created in Structure Builder, and as tool icons in the Portable Text Editor.\n\nEach document type can also be assigned an icon to illustrate its purpose. We recommend using an SVG file, but it can be any react component you like.\n\nIf you want to have your icons reflect the default style found throughout the Studio, you might opt to install the @sanity/icons-package. Another popular package is react-icons which includes a plethora of open source SVG icons from collections like Font Awesome, Material Design, Typicons, and Github Octicons. You can browse the icons available in @sanity/icons here. For react-icons, go here.\n\nExample\n\nInstall the icon package using your favorite package manager, and use them in your schemas! Just remember that any schema file with icons in them should have a .jsx or .tsx extension.\n\nExample\n\nAfter including react-icons in your package.json with yarn add react-icons you can add it to your schema:\n\nimport { PlayIcon } from '@sanity/icons'\n\n\nexport default {\n  name: 'movie',\n  type: 'document',\n  icon: PlayIcon,\n  fields: [\n    {\n      title: 'Title',\n      name: 'title',\n      type: 'string'\n    },\n    {\n      title: 'Release Date',\n      name: 'releaseDate',\n      type: 'date'\n    }\n  ],\n  preview: {\n    select: {\n      title: 'title',\n      subtitle: 'releaseDate'\n    }\n  }\n}\n\nHere we've added unique icons for each of our document types Movie, Person, Screening.\n\nUPDATED ON MARCH 13, 2023\n\nWas this article helpful?\nNot at all\nSomewhat\nAbsolutely!\nI want to suggest an improvement to this article.\nProduct\nSanity Studio\nAPIs\nContent Lake\nSecurity & Compliance\nCompare Sanity \nResources\nDocumentation\nBlog\nResource library\nCase Studies\nGuides \nTemplates \nPartners \nExplainers \nCMS \nCompany\nContact Sales\nEnterprise\nCareers\nTerms of Service\nPrivacy Policy\nAccessibility Statement\nStay connected\nGitHub\nSlack\nTwitter\nYouTube\nStack Overflow\nBlog RSS\nNewsletter\n©Sanity 2023\nCookie preferences"
  },
  {
    "title": "Favicons / website icon",
    "url": "https://www.sanity.io/docs/favicons",
    "html": "Skip to content\nJoin live – Get insights, tips, + Q&A from Sanity developers on our latest releases \nProduct\nPLATFORM\nSanity Studio\n\nFlexible editing environment\n\nAPIs\n\nConnect to anything\n\nContent Lake\n\nReal-time database\n\nTry product demo \nFEATURES\nReal-time collaboration\n\nFearlessly work with content\n\nPrecise content querying\n\nTreat content as data with GROQ\n\nLocalization\n\nCoherent messaging across territories\n\nSolutions\nUSE CASES\nE-commerce\n\nRicher shopping experiences\n\nMarketing sites\n\nControl your story\n\nProducts & services\n\nInnovate and automate\n\nMobile apps\n\nContent backend for every OS\n\nView all \nINTEGRATIONS\nShopify\nMux\nVercel\nNetlify\nAlgolia\nCloudinary\nBigCommerce\nCommerce Layer\nSmartling\nTransifex\nView all \nDevelopers\nLEARN\nDocumentation\nStudio API Reference\nAPI reference\nGuides\nGROQ cheat sheet\nSanity UI\nGet started \nBUILD AND SHARE\nTemplates\nTools and plugins\nSchemas and snippets\nProject showcase\nShare your work\nBrowse Exchange \nFRAMEWORKS\nReact\nVue\nNext.js\nNuxt.js\nSvelte\nRemix\nGatsby\nAstro\nAngular\nEleventy\nView all \nResources\nDISCOVER\nBlog\nResource library\nGlossary\nAgency partners\nBecome a partner\nTechnical support\nTalk to sales \nCASE STUDIES\nPuma\n\nSource of truth for global markets\n\nAether\n\nUnique digital shopping experience\n\nMorning Brew\n\nOmnichannel media distribution\n\nInVision\n\nDelivering exceptional customer experiences\n\nView all \nPOPULAR GUIDES\nHeadless CMS\nStructured content\nContent modeling\nHeadless SEO\nStatic websites\nView all \nEnterprise\nPricing\nLog in\nContact sales\nGet started\nSearch\nOverview\nGetting started\nSanity Studio\nSetup and deployment\nConfiguration\nBlock Content\nNEWVisual Editing\nAI Assist\nNEWComments\nCustomization\nComponent API\nStudio Components\nForm Components\nHow form paths work\nDiff Components\nAsset Sources\nTheming and branding\nIcons\nFavicons\nSearch\nSanity UI\nFocus and UI state in custom inputs\nFrom input components to real-time safe patches\nWorkflows\nTools\nPlugins\nCommand Line Interface\nMigrating from v2\nContent Lake\nBuild with Sanity\nAccess control\nReference\nStudio v2 docs\nChangelog\nFavicons\n\nA \"favicon\" appears in places such as browser tabs, URL field and browser bookmarks. Learn how to replace the default Sanity icon with your own.\n\nFavicons/\"website icon\"\n\nA favicon is a small icon that appears in the browser's tab or bookmarks. By default, any Sanity studio will use the Sanity logo as its favicon.\n\nUsing a favicon that aligns with a company or projects logo or brand colors can help enhance the visual identity of a studio, differentiate it from other open tabs, as well as create a consistent and cohesive look and feel.\n\nIndividual files\n\nTo use a custom favicon that works across all platforms (desktop browsers, mobile browsers and bookmarks and similar), five different files are used:\n\nfavicon.svg - a square vector file in SVG format. This format scales well to many different sizes, and can also support different layouts/colors for light/dark mode.\nfavicon.ico - a small, square file in ICO format. This serves as the fallback icon for older browsers and environments that do not support resolving the preferred icon from HTML.\nfavicon-512.png - a 512x512px image file in PNG format. This is used as the icon defined in a Web Manifest file, and is generally used when bookmarking the studio on mobile devices.\nfavicon-192.png - a 192x192px image file in PNG format. Holds the same purpose as the 512px variant, but may be used when smaller icons are needed.\napple-touch-icon.png - a 180x180px image in PNG format. This is used when bookmarking the studio on iOS devices.\n\nAll these files should be placed in the static folder within the studio folder. Once they are in place, the studio should automatically use the new icons - though browsers may keep the old icons in their cache for a while.\n\nGenerating the files\n\nThe files can either be created by hand, or you can use a tool such as create-favicon to generate them all based on a source SVG file:\n\n# From the studio root folder:\nnpm create favicon <path-or-url-to.svg> static\nTroubleshooting\n\nIf your custom favicons are not showing up:\n\nEnsure that all files listed above are present in the static folder, and has the same casing. A common case is that the SVG icon (favicon.svg) is missing, in which case it will fall back to the default Sanity favicon.\nWhen running sanity build, inspect the contents of the dist/static folder and see which icons are actually there.\nYour browser might be caching the favicons. Try a hard refresh by pressing Command+Shift+R on Mac, or Ctrl+F5 on Windows/Linux. You can also try the \"Disable cache\" feature in the network tab of your browser development tools.\n\nUPDATED ON APRIL 26, 2023\n\nWas this article helpful?\nNot at all\nSomewhat\nAbsolutely!\nI want to suggest an improvement to this article.\nPAGE CONTENT\nIndividual files\nGenerating the files\nTroubleshooting\nProduct\nSanity Studio\nAPIs\nContent Lake\nSecurity & Compliance\nCompare Sanity \nResources\nDocumentation\nBlog\nResource library\nCase Studies\nGuides \nTemplates \nPartners \nExplainers \nCMS \nCompany\nContact Sales\nEnterprise\nCareers\nTerms of Service\nPrivacy Policy\nAccessibility Statement\nStay connected\nGitHub\nSlack\nTwitter\nYouTube\nStack Overflow\nBlog RSS\nNewsletter\n©Sanity 2023\nCookie preferences"
  },
  {
    "title": "Theming",
    "url": "https://www.sanity.io/docs/theming",
    "html": "Skip to content\nJoin live – Get insights, tips, + Q&A from Sanity developers on our latest releases \nProduct\nPLATFORM\nSanity Studio\n\nFlexible editing environment\n\nAPIs\n\nConnect to anything\n\nContent Lake\n\nReal-time database\n\nTry product demo \nFEATURES\nReal-time collaboration\n\nFearlessly work with content\n\nPrecise content querying\n\nTreat content as data with GROQ\n\nLocalization\n\nCoherent messaging across territories\n\nSolutions\nUSE CASES\nE-commerce\n\nRicher shopping experiences\n\nMarketing sites\n\nControl your story\n\nProducts & services\n\nInnovate and automate\n\nMobile apps\n\nContent backend for every OS\n\nView all \nINTEGRATIONS\nShopify\nMux\nVercel\nNetlify\nAlgolia\nCloudinary\nBigCommerce\nCommerce Layer\nSmartling\nTransifex\nView all \nDevelopers\nLEARN\nDocumentation\nStudio API Reference\nAPI reference\nGuides\nGROQ cheat sheet\nSanity UI\nGet started \nBUILD AND SHARE\nTemplates\nTools and plugins\nSchemas and snippets\nProject showcase\nShare your work\nBrowse Exchange \nFRAMEWORKS\nReact\nVue\nNext.js\nNuxt.js\nSvelte\nRemix\nGatsby\nAstro\nAngular\nEleventy\nView all \nResources\nDISCOVER\nBlog\nResource library\nGlossary\nAgency partners\nBecome a partner\nTechnical support\nTalk to sales \nCASE STUDIES\nPuma\n\nSource of truth for global markets\n\nAether\n\nUnique digital shopping experience\n\nMorning Brew\n\nOmnichannel media distribution\n\nInVision\n\nDelivering exceptional customer experiences\n\nView all \nPOPULAR GUIDES\nHeadless CMS\nStructured content\nContent modeling\nHeadless SEO\nStatic websites\nView all \nEnterprise\nPricing\nLog in\nContact sales\nGet started\nSearch\nOverview\nGetting started\nSanity Studio\nSetup and deployment\nConfiguration\nBlock Content\nNEWVisual Editing\nAI Assist\nNEWComments\nCustomization\nComponent API\nStudio Components\nForm Components\nHow form paths work\nDiff Components\nAsset Sources\nTheming and branding\nIcons\nFavicons\nSearch\nSanity UI\nFocus and UI state in custom inputs\nFrom input components to real-time safe patches\nWorkflows\nTools\nPlugins\nCommand Line Interface\nMigrating from v2\nContent Lake\nBuild with Sanity\nAccess control\nReference\nStudio v2 docs\nTheming\n\nLearn how to customize the styling and branding of your studio\n\nTheming in Sanity Studio\nWork in progress\n\nA new and robust API for theming and styling Sanity Studio is coming soon! The set of solutions and methods in this article will be expanded upon and improved shortly.\n\nUsing buildLegacyTheme\n\nThe top-level theme config property allows you to customize the color palette of the studio. You can create your own themes using the buildLegacyTheme helper function exported from the sanity package.\n\nimport {buildLegacyTheme, defineConfig} from 'sanity'\n\nconst props = {\n  '--my-white': '#fff',\n  '--my-black': '#1a1a1a',\n  '--my-blue': '#4285f4',\n  '--my-red': '#db4437',\n  '--my-yellow': '#f4b400',\n  '--my-green': '#0f9d58',\n}\n\nexport const myTheme = buildLegacyTheme({\n  /* Base theme colors */\n  '--black': props['--my-black'],\n  '--white': props['--my-white'],\n\n  '--gray': '#666',\n  '--gray-base': '#666',\n\n  '--component-bg': props['--my-white'],\n  '--component-text-color': props['--my-black'],\n\n  /* Brand */\n  '--brand-primary': props['--my-blue'],\n\n  // Default button\n  '--default-button-color': '#666',\n  '--default-button-primary-color': props['--my-blue'],\n  '--default-button-success-color': props['--my-green'],\n  '--default-button-warning-color': props['--my-yellow'],\n  '--default-button-danger-color': props['--my-red'],\n\n  /* State */\n  '--state-info-color': props['--my-blue'],\n  '--state-success-color': props['--my-green'],\n  '--state-warning-color': props['--my-yellow'],\n  '--state-danger-color': props['--my-red'],\n\n  /* Navbar */\n  '--main-navigation-color': props['--my-black'],\n  '--main-navigation-color--inverted': props['--my-white'],\n\n  '--focus-color': props['--my-blue'],\n})\n\nexport default defineConfig({\n  // rest of config...,\n\n  theme: myTheme,\n})\n\nUsing the Themer app\n\nA potentially quicker and easier way to go about creating themes for your studio is to use Themer. This web app was created in-house at Sanity and will let you visually create a custom palette that you can then export for your own use.\n\nThe Themer app makes generating themes for the studio easy!\n\nUPDATED ON DECEMBER 7, 2022\n\nWas this article helpful?\nNot at all\nSomewhat\nAbsolutely!\nI want to suggest an improvement to this article.\nPAGE CONTENT\nUsing buildLegacyTheme\nUsing the Themer app\nProduct\nSanity Studio\nAPIs\nContent Lake\nSecurity & Compliance\nCompare Sanity \nResources\nDocumentation\nBlog\nResource library\nCase Studies\nGuides \nTemplates \nPartners \nExplainers \nCMS \nCompany\nContact Sales\nEnterprise\nCareers\nTerms of Service\nPrivacy Policy\nAccessibility Statement\nStay connected\nGitHub\nSlack\nTwitter\nYouTube\nStack Overflow\nBlog RSS\nNewsletter\n©Sanity 2023\nCookie preferences"
  },
  {
    "title": "How form paths work",
    "url": "https://www.sanity.io/docs/how-form-paths-work",
    "html": "Skip to content\nJoin live – Get insights, tips, + Q&A from Sanity developers on our latest releases \nProduct\nPLATFORM\nSanity Studio\n\nFlexible editing environment\n\nAPIs\n\nConnect to anything\n\nContent Lake\n\nReal-time database\n\nTry product demo \nFEATURES\nReal-time collaboration\n\nFearlessly work with content\n\nPrecise content querying\n\nTreat content as data with GROQ\n\nLocalization\n\nCoherent messaging across territories\n\nSolutions\nUSE CASES\nE-commerce\n\nRicher shopping experiences\n\nMarketing sites\n\nControl your story\n\nProducts & services\n\nInnovate and automate\n\nMobile apps\n\nContent backend for every OS\n\nView all \nINTEGRATIONS\nShopify\nMux\nVercel\nNetlify\nAlgolia\nCloudinary\nBigCommerce\nCommerce Layer\nSmartling\nTransifex\nView all \nDevelopers\nLEARN\nDocumentation\nStudio API Reference\nAPI reference\nGuides\nGROQ cheat sheet\nSanity UI\nGet started \nBUILD AND SHARE\nTemplates\nTools and plugins\nSchemas and snippets\nProject showcase\nShare your work\nBrowse Exchange \nFRAMEWORKS\nReact\nVue\nNext.js\nNuxt.js\nSvelte\nRemix\nGatsby\nAstro\nAngular\nEleventy\nView all \nResources\nDISCOVER\nBlog\nResource library\nGlossary\nAgency partners\nBecome a partner\nTechnical support\nTalk to sales \nCASE STUDIES\nPuma\n\nSource of truth for global markets\n\nAether\n\nUnique digital shopping experience\n\nMorning Brew\n\nOmnichannel media distribution\n\nInVision\n\nDelivering exceptional customer experiences\n\nView all \nPOPULAR GUIDES\nHeadless CMS\nStructured content\nContent modeling\nHeadless SEO\nStatic websites\nView all \nEnterprise\nPricing\nLog in\nContact sales\nGet started\nSearch\nOverview\nGetting started\nSanity Studio\nSetup and deployment\nConfiguration\nBlock Content\nNEWVisual Editing\nAI Assist\nNEWComments\nCustomization\nComponent API\nStudio Components\nForm Components\nHow form paths work\nDiff Components\nAsset Sources\nTheming and branding\nIcons\nFavicons\nSearch\nSanity UI\nFocus and UI state in custom inputs\nFrom input components to real-time safe patches\nWorkflows\nTools\nPlugins\nCommand Line Interface\nMigrating from v2\nContent Lake\nBuild with Sanity\nAccess control\nReference\nStudio v2 docs\nHow form paths work\n\nLearn more about form paths, their structure, and their role as unique references to specific values in Sanity documents.\n\nA form path provides a unique and stable address for a value in a Sanity document. This is an important piece of the puzzle that makes Sanity a real-time platform where several people can work on editing the same document simultaneously.\n\nWhat are form paths?\n\nConsider a scenario where two people work on the same document. When one of the two users edits the document, the modification is technically represented as a patch—a description of the change.\n\nThe patch may look something like this:\n\nset [\"firstName\"] to \"Bjørge\"\n\nThe patch goes places:\n\nIt’s sent to the Sanity API.\nIt’s applied to the document in the database.\nIt’s redistributed to any other user editing the same document.\n\nIn this example, the [\"firstName\"] array is a path that always and uniquely points to the firstName field. The contents of this field may change, but its location within the document doesn’t.\n\nThe pets array in the following example behaves differently:\n\n{\"pets\": [{\"name\": \"Buddy\"}, {\"name\": \"Daisy\"}]}\n\nTo point to Daisy in the array, use the following form path: [\"pets\", 1, \"name\"] What’s the problem here? Let’s find out.\n\nConsider two editors—Alice and Bob—updating the pet list at the same time: Alice moves Daisy to the top of the list, while Bob renames Buddy to Buds.\n\nThe patches that the studio generates for these two edits are similar to the following pseudocode:\n\nBob: set [\"pets\", 0, \"name\"] to \"Buds\"\nAlice: move [\"pets\", 1, 0]\n\nIf these two patches are received in the order above, everything is fine: Buddy becomes Buds, and Daisy moves to the top of the list.\nHowever, networks make it hard to set the order of actions reliably. For example, latency may cause Bob’s change to be received and processed after Alice’s:\n\nAlice: move [\"pets\", 1, 0]\nBob: set [\"pets\", 0, \"name\"] to \"Buds\"\n\nIf the Sanity data store receives Alice's patch first, Buddy and Daisy swap places, and Daisy is located at array index 0. When Bob’s patch is processed, Daisy is renamed to Buds, which isn’t what Bob meant to do! And poor Daisy now has to learn again what humans call her! Luckily, there’s a solution.\n\nUnique key IDs\n\nTo prevent this problem, array objects in Sanity must have a unique _key value.\n\nThis unique key is generated upon object creation. The key uniquely identifies the object it refers to, and it’s immutable throughout the lifetime of the object.\n\nThis is the pet array with the key IDs:\n\n{\n  \"pets\": [\n    {_key: \"m99vcit2pho\", \"name\": \"Buddy\"},\n    {_key: \"v1uf44s5hu8\", \"name\": \"Daisy\"}\n  ]\n}\n\nInstead of referencing the object by its index number—which may point to a different object if the order in the array changes—you can specify its unique key ID in the form path.\nHere’s how you can use _key to point to Buddy’s name in a form path: [\"pets\", {_key: \"m99vcit2pho\"}, \"name\"]\n\nThe order of the actions no longer matters. If you rerun the previous wrong-order scenario, everything is ok:\n\nAlice: move [\"pets\", 1, 0]\nBob: set [\"pets\", {_key: \"m99vcit2pho\"}, \"name\"] to \"Buds\"\n\nWhen Bob’s patch is received, Buddy has already been moved on the list. However, the datastore now identifies the pet name to update by its _key. Daisy is safe!\n\nYou probably noticed that Alice’s move patch still refers to the object by its array index.\nCurrently, this is a bit of a gray area: when an editor moves an item to the top of the array, what is their goal? Do they want to move the item to the top, or do they want to move it just one level up from their current position in the array?\n\nClick to view a larger image\n\nAlthough this area is a bit ambiguous, changing the order of the array members doesn’t modify the wrong object, and Daisy is safe!\n\nUsing form paths in Sanity Studio\n\nWhen customizing Sanity Studio, you may sometimes run into situations where you’d like to point to a specific piece of content in a document. This is when form paths are helpful. For example:\n\nReading the value of a node inside the active document being edited.\nDeep linking to a specific form node.\nOpening a dialog to edit an array item—for more information about this topic, see the article about disclosure elements.\n\nTo support working efficiently with paths, we offer a set of utility functions in the @sanity/util package at the @sanity/util/paths export.\n\nKnown limitations\n\nThis approach has limitations with arrays of primitive values and multidimensional arrays:\n\nIt’s not possible to assign a key to a primitive value. Therefore, arrays of primitive values rely on the array index to locate a specific member. Since index references point to the position of an object in the array, not to the object itself, they’re also more likely to produce unexpected effects when multiple users modify the same array at the same time.\nIt’s not possible to assign a key to multidimensional arrays, or arrays of arrays. Instead of creating multidimensional arrays, we recommend defining the data as an array of objects, where a field holds the inner array.\n\nExample:\n\"multiDimensional\": [\n  {_key: \"3u285aqn8uo\" inner: [1, 2, 3]},\n  {_key: \"0c3afift948\" inner: [4, 9, 3]},\n]\nFurther reading\nLearn more about managing focus in UI components and real-time safe patches.\nFocus and UI state in custom inputs\nFrom input components to real-time safe patches\n\nUPDATED ON SEPTEMBER 25, 2023\n\nWas this article helpful?\nNot at all\nSomewhat\nAbsolutely!\nI want to suggest an improvement to this article.\nPAGE CONTENT\nWhat are form paths?\nUnique key IDs\nUsing form paths in Sanity Studio\nKnown limitations\nFurther reading\nProduct\nSanity Studio\nAPIs\nContent Lake\nSecurity & Compliance\nCompare Sanity \nResources\nDocumentation\nBlog\nResource library\nCase Studies\nGuides \nTemplates \nPartners \nExplainers \nCMS \nCompany\nContact Sales\nEnterprise\nCareers\nTerms of Service\nPrivacy Policy\nAccessibility Statement\nStay connected\nGitHub\nSlack\nTwitter\nYouTube\nStack Overflow\nBlog RSS\nNewsletter\n©Sanity 2023\nCookie preferences"
  },
  {
    "title": "Introduction to Custom Diff Components",
    "url": "https://www.sanity.io/docs/custom-diff-components",
    "html": "Skip to content\nJoin live – Get insights, tips, + Q&A from Sanity developers on our latest releases \nProduct\nPLATFORM\nSanity Studio\n\nFlexible editing environment\n\nAPIs\n\nConnect to anything\n\nContent Lake\n\nReal-time database\n\nTry product demo \nFEATURES\nReal-time collaboration\n\nFearlessly work with content\n\nPrecise content querying\n\nTreat content as data with GROQ\n\nLocalization\n\nCoherent messaging across territories\n\nSolutions\nUSE CASES\nE-commerce\n\nRicher shopping experiences\n\nMarketing sites\n\nControl your story\n\nProducts & services\n\nInnovate and automate\n\nMobile apps\n\nContent backend for every OS\n\nView all \nINTEGRATIONS\nShopify\nMux\nVercel\nNetlify\nAlgolia\nCloudinary\nBigCommerce\nCommerce Layer\nSmartling\nTransifex\nView all \nDevelopers\nLEARN\nDocumentation\nStudio API Reference\nAPI reference\nGuides\nGROQ cheat sheet\nSanity UI\nGet started \nBUILD AND SHARE\nTemplates\nTools and plugins\nSchemas and snippets\nProject showcase\nShare your work\nBrowse Exchange \nFRAMEWORKS\nReact\nVue\nNext.js\nNuxt.js\nSvelte\nRemix\nGatsby\nAstro\nAngular\nEleventy\nView all \nResources\nDISCOVER\nBlog\nResource library\nGlossary\nAgency partners\nBecome a partner\nTechnical support\nTalk to sales \nCASE STUDIES\nPuma\n\nSource of truth for global markets\n\nAether\n\nUnique digital shopping experience\n\nMorning Brew\n\nOmnichannel media distribution\n\nInVision\n\nDelivering exceptional customer experiences\n\nView all \nPOPULAR GUIDES\nHeadless CMS\nStructured content\nContent modeling\nHeadless SEO\nStatic websites\nView all \nEnterprise\nPricing\nLog in\nContact sales\nGet started\nSearch\nOverview\nGetting started\nSanity Studio\nSetup and deployment\nConfiguration\nBlock Content\nNEWVisual Editing\nAI Assist\nNEWComments\nCustomization\nComponent API\nStudio Components\nForm Components\nHow form paths work\nDiff Components\nAsset Sources\nTheming and branding\nIcons\nFavicons\nSearch\nSanity UI\nFocus and UI state in custom inputs\nFrom input components to real-time safe patches\nWorkflows\nTools\nPlugins\nCommand Line Interface\nMigrating from v2\nContent Lake\nBuild with Sanity\nAccess control\nReference\nStudio v2 docs\nIntroduction to Custom Diff Components\n\nCustomizing how changes between two versions of a data structure are displayed within the Sanity Studio.\n\nWith Sanity Studio, you can see, in real time, any changes happening within a given field. You can see these changes down to the smallest detail.\n\nOut of the box, this will render the difference in all basic types - strings, numbers, booleans, arrays and similar. If you have your own custom inputs, the changes will be visible, but will only show the changes between two sets of data.\n\nOften, the difference between two values might not be enough to showcase exactly what happened inside a custom input. A color field changing between two hexadecimal values might not be human readable. A visualization of the two colors would be helpful to humans. A geopoint is an object containing latitude and longitude numbers. Showing the difference between those two numeric numbers won't mean much, but showing two map pins representing those locations can mean a lot.\n\nThe Studio API allows you to write your own custom React components that can visualize these changes in ways that make sense to your editors.\n\nAnatomy of a Diff Component\n\nThe components responsible for showing the change of a value are called \"diff components\". These React components receive a structured diff object allowing you to inspect the change values deeply. This object contains data on not only the change itself, but also who made the change and when it was made.\n\nWhen you compare values over time, different parts of a value may have different authors. For instance, one person may have uploaded an image, while a second person provided the caption, and a third changed a crop. In order to provide this information in a fine-grained manner, the diffs contain annotations.\n\nAnnotations can be used to render the name and avatar of the users who did the changes, and also contain the exact timestamp of the change, should you want very fine-grained control.\n\nActions\n\nThere are four basic actions that might happen to a value:\n\naction: \"changed\" - The value changed (from value X to value Y)\naction: \"added\" - The value was added (field or array item appeared)\naction: \"removed\" - The value was removed (field or array item disappeared)\naction: \"unchanged\" - The value was unchanged (item was moved within an array)\n\nThese actions can be inspected on the diff object provided to the custom diff component. All of these actions should be accounted for in a diff component.\n\nAdding a custom diff component to a field\n\nYou can add a custom diff component to any field using the diff property of the field's components object. To learn more about field components in general, visit the field component docs.\n\nimport {CustomStringDiff} from '../src/components/field'\n\nexport default {\n  name: 'product',\n  title: 'Product',\n  type: 'document',\n  fields: [\n    {\n      name: 'title',\n      title: 'Title',\n      type: 'string',\n      components: {\n        diff: CustomStringDiff,\n      }\n    },\n    // ... Additional fields\n  ]\n}\n\nIn this example, we assume that our CustomStringDiff component is exported from a file located at ../src/components/field/index.jsx relative to our schema file. A minimalist implementation is shown below.\n\n../src/components/field/index.jsx\nimport {DiffFromTo} from 'sanity'\n\nexport function CustomStringDiff({diff, schemaType}) {\n  return (\n    <DiffFromTo\n      diff={diff}\n      schemaType={schemaType}\n      previewComponent={StringDiffPreview}\n      layout=\"grid\"\n    />\n  )\n}\n\nfunction StringDiffPreview({ value }) {\n  return <div style={{borderLeft: '5px solid', padding: '3px', display: 'flex'}}>{value}</div>\n}\nCreating a basic diff component\n\nThe core sanity package includes a few helper components and methods to help you build custom diffs. The most basic among these is the <DiffFromTo /> component. This creates a view that shows an initial state of a field and the new state with an arrow in the middle. You can customize how the those blocks are rendered with a previewComponent.\n\nThe following example creates a custom preview for the component to format a country code for a phone number. If a field goes from blank to populated, it will show the addition. If a field goes from populated to empty, it will show a strike-through on the value. If there's a change to the value, it will show a before and after rendered with the preview component.\n\nimport {DiffFromTo} from 'sanity'\n\nexport function PhoneNumberFieldDiff({diff, schemaType}) {\n  return (\n    <DiffFromTo\n      diff={diff}\n      schemaType={schemaType}\n      previewComponent={PhoneNumberPreviewComponent}\n    />\n  )\n}\n\nfunction PhoneNumberPreviewComponent({value}) {\n  const prefix = value.countryCode ? `(${value.countryCode}) ` : ''\n  const formatted = `${prefix}${value.number}`\n  return <span>{formatted}</span>\n}\n\nCreating the states of a diff component\n\nIn this example, a different layout is used to render each state of the diff.\n\nGotcha\n\nIt might seem strange at first to provide an unchanged state for our custom diff. This is to provide for states when the value itself hasn't changed, but data around the value have, such as when an item has been moved in an array.\n\nimport {DiffCard} from 'sanity'\n\nexport function NumberFieldDiff({diff}) {\n  const {fromValue, toValue, action} = diff\n\n  // In certain cases the diff component will be used to render the value, even\n  // if there are no changes to the actual _value_. For instance, when an item\n  // has been moved within the array, but the actual value did not change.\n  if (action === 'unchanged') {\n    return <div>{fromValue}</div>\n  }\n\n  // If we have both a \"from\" and \"to\" value, the value changed\n  // \"from\" and \"to\" can also be read as \"previous\" and \"next\"\n  if (typeof fromValue === 'number' && typeof toValue === 'number') {\n    return (\n      <DiffCard diff={diff}>\n        {fromValue} → {toValue}\n      </DiffCard>\n    )\n  }\n\n  // If we only have a \"previous\" value, the value has been unset\n  if (typeof fromValue === 'number') {\n    return (\n      <DiffCard diff={diff}>\n        <del>{fromValue}</del>\n      </DiffCard>\n    )\n  }\n\n  // The only remaining option is that the value was added\n  return (\n    <DiffCard diff={diff}>\n      <ins>{toValue}</ins>\n    </DiffCard>\n  )\n}\nHelper components\n\nThe sanity package includes a range of helpful components and methods for building custom diff views. Let's take a closer look at a few of them.\n\n<DiffFromTo />\n\nMany diff components will follow a pattern where they have a \"preview\" component that renders the value, and presents a \"from → to\" layout, setting the background to the \"user color\" for the change and adding a tooltip when hovering the diff that shows the author information.\n\nYou can use this pattern to graphically showcase the change. This can help the editor to quickly understand at a glance the change that happened.\n\nimport {DiffFromTo} from 'sanity'\n\nexport const TelephoneFieldDiff = ({diff, schemaType}) => (\n  <DiffFromTo\n    diff={diff}\n    schemaType={schemaType}\n    previewComponent={TelephonePreview}\n    layout=\"inline\" // \"grid\" is also an option\n  />\n)\n\nfunction TelephonePreview({value}) {\n  const formattedNumber = value.toString().replace(/\\d{3}(?=.)/g, '$& ')\n  return <>{formattedNumber}</>\n}\n\n<ChangeList />\n\nThe pattern mentioned in the section on <DiffFromTo /> pairs nicely with the <ChangeList /> helper. Often when displaying a graphical diff using <DiffFromTo />, you may also wish to show the individual fields that were changed to create the overall change. The <ChangeList /> component takes a diff, schemaType, and an array of fields to render individual fields to show.\n\nIn this example, we generate a barcode from two fields on an object field type. We use the same visual component used in the custom input, but also use <ChangeList /> to show the individual field changes for barcode and format.\n\nimport {DiffFromTo, getDiffAtPath, ChangeList} from 'sanity'\nimport Barcode from 'react-barcode' \n\nexport function BarCodeDiff({diff, schemaType}) {\n  return (\n    <div>\n      <DiffFromTo\n        diff={diff}\n        schemaType={schemaType}\n        previewComponent={BarCodeDiffPreviewComponent}\n        layout=\"grid\"\n      />\n      <ChangeList diff={diff} schemaType={schemaType} fields={['barcode', 'format']} />\n    </div>\n  )\n}\n\nfunction BarCodeDiffPreviewComponent({value}) {\n  return (\n    <div style={{display: 'flex', padding: '5px', justifyContent: 'center', alignItems: 'center'}}>\n      <Barcode textAlign=\"center\" value={value.barcode} format={value.format || ''} width={1} />\n    </div>\n  )\n}\n\n<FromTo />\n\nWhen creating a completely custom diff component, you can use the <FromTo /> component to specify components to be used for the \"From\" and \"To\" states of the component. If you opt for this component, you will need to recreate many of the affordances given, such as tooltips, user background colors, and more.\n\nimport React from 'react'\nimport {FromTo} from '@sanity/field/diff'\n\nexport const SomeDiff = () => (\n  <FromTo\n    from={<div>Old value</div>}\n    to={<div>New value</div>}\n    layout=\"inline\" // \"grid\" is also an option\n  />\n)\n<DiffCard />\n\nRenders a container element styled with the appropriate user color, based on the passed diff or annotation.\n\nimport {DiffCard} from 'sanity'\n\nexport const SomeDiff = ({diff}) => (\n  <DiffCard as=\"pre\" diff={diff}>\n    <code>{JSON.stringify(diff.toValue, null, 2)}</code>\n  </DiffCard>\n)\n<DiffTooltip />\n\nWraps the passed children with a tooltip when hovered, showing information about the actual change - which authors were involved, and when. This component differs slightly in that it can take multiple annotations instead of just a single one, combining the information in a single tooltip. Example:\n\nimport {DiffTooltip} from 'sanity'\n\nexport function MovieReviewDiff({diff}) {\n  const {action, fromValue, toValue} = diff\n  if (action === 'unchanged') {\n    return (\n      <div>\n        <StarMeter value={fromValue} diff={diff} />\n      </div>\n    )\n  }\n  return (\n    <div>\n      {fromValue && <StarMeter value={fromValue} diff={diff} />}\n      {fromValue && toValue && '→'}\n      {toValue && <StarMeter value={toValue} diff={diff} />}\n    </div>\n  )\n}\n\nfunction StarMeter({value, diff}) {\n  const {numStars, comment} = value\n  return (\n    <div>\n      {numStars && (\n        <DiffTooltip diff={diff}>\n          <div>{'★'.repeat(numStars)}</div>\n        </DiffTooltip>\n      )}\n      {comment && (\n        <DiffTooltip diff={diff}>\n          <div>{comment}</div>\n        </DiffTooltip>\n      )}\n    </div>\n  )\n}\nHelper Hooks\nuseDiffAnnotationColor(diff, path)\n\nTakes a diff and an optional path as arguments and returns the corresponding user color for it. A user color is an object with the keys background, text and border, each having a hex color as the value.\n\nimport {useDiffAnnotationColor} from 'sanity'\n\nexport function MovieReviewDiff({diff}) {\n  const {background, text} = useDiffAnnotationColor(diff, 'numStars')\n  return <div style={{background, color: text}}>Do some fancy logic here</div>\n}\nuseAnnotationColor(annotation)\n\nLike useDiffAnnotationColor, but takes an annotation directly instead of a diff.\n\nimport {useAnnotationColor} from 'sanity'\n\nexport function PhoneNumberDiff({diff}) {\n  // Note: `diff.annotation` might not be what you want for many diff types!\n  // See \"diff annotations\" section for more information\n  const {background, text} = useAnnotationColor(diff.annotation)\n  return <div style={{background, color: text}}>Do some fancy logic here</div>\n}\nShape of the data on a diff object\n\nThe diff received in diff components vary depending on the data type represented. All diffs share a common set of properties.\n\naction - either added, removed, changed or unchanged.\ntype - the value type, eg string, number etc\nfromValue and toValue - holding the previous and next value\nisChanged - a boolean indicating whether or not the actual content changed\n\nUnless the action is unchanged, the diff will also have an annotation property which is often needed to show information about the author of the change, as well as a timestamp and other similar metadata. Make sure you read the section on \"diff annotations\"!\n\nStrings\n\nString diffs have an additional segments property, which is an array containing parts of the string which have been added, removed or did not change. This is useful when comparing larger chunks of text, as instead of simply saying the paragraph was \"replaced\", we can say that a single word was changed. It also allows individual segments of the text to be attributed to different authors.\n\nThe <DiffString /> component can help render a visualization of these changes - or you can iterate over the segments and render them yourself should you want to.\n\nArrays\n\nAn array rarely has any changes done to \"itself\", apart from perhaps being set from an undefined state to an empty array. What you are usually interested in is the values it holds, and the locations of those items.\n\nDetermining if something was added, removed, or moved within the array is done on a best effort basis, and the algorithm attempts to explain the change with as few \"operations\" as possible.\n\nWhy is it a best guess? From a technical perspective, if an item was at index 0 and now appears at index 1, it has \"moved\". If that \"move\" was the result of an item being prepended to the array, the more \"natural\" way of thinking about it is that it did not move.\n\nArray diffs contain an items property, which itself is an array of changes to the items within the array. Each item has the following properties:\n\nhasMoved - a boolean indicating whether or not the array item moved, based on the algorithm's best guess.\nfromIndex and toIndex - containing the previous and next location of the item within the array. As noted above, fromIndex and toIndex can differ without the hasMoved property being true, because an add/remove operation could have shifted the indexes.\ndiff - represents the actual item diff\n\nNote that the annotation on the array diff is very coarse. When illustrating changes to data inside an Array item, it's best to do that with a diff component for the item with the item's annotations and not for the Array.\n\nObjects\n\nLike arrays, objects rarely have a value of their own, apart from being set from an undefined state to an empty object. To access the individual fields of an object, the fields property is itself an object where the key is the name of the field and the value is the diff for that field. Certain underscore-prefixed fields are ignored when calculating the diff (_id, _type, _createdAt, _updatedAt, _rev).\n\nDiff annotations\n\nDiff annotations hold fine-grained information on the change, and are present on individual \"leaves\" of the diff structure. It contains an author property (user ID of the person doing the change) and a timestamp for when the change occurred.\n\nAt first glance, this may seem like an unnecessary abstraction, but given the granular structure of annotations, we can create a deeper understanding for our editors.\n\n{\n  \"asset\": {\n    \"_ref\": \"image-someHash-1024x768-png\"\n  },\n  \"crop\": {\n    \"bottom\": 100,\n    \"top\": 100,\n    \"left\": 20,\n    \"right\": 20\n  },\n  \"caption\": \"Kokos is a miniature schnauzer\"\n}\n\nWhen comparing two versions of this image data structure, several things can have changed, for instance:\n\nThe asset reference can have changed\nThe numbers in crop can have appeared\nThe caption may have been edited or created\n\nUsing the annotation on the image field itself would give you very coarse information, as if a single author performed the entire set of changes. Instead, we want to look at the annotations on the individual fields, and for the string fields even inspect individual segments of the string.\n\nThe getAnnotationAtPath function allows for easy retrieval of these annotations at depth.\n\nNote that in certain cases it might make sense to not be as fine-grained. Theoretically, two users could have edited the crop object above - for instance, one user could have increased the width and a different user only modifying the height, thus touching bottom/top and left/right, respectively. Showing individual authors for each side of a rectangle might be hard to visualize.\n\nUsage with TypeScript\n\nWriting diff components with TypeScript is fully supported. The diff tools in the sanity package includes not only the helper functions, hooks and React components you may want to use, but also a range of type definitions.\n\nWhen defining a diff component, you can type it as a DiffComponent, and specify which type of diff you expect for the component. For instance, a diff for a geopoint object type might look like this:\n\n\nimport {ObjectDiff, DiffComponent} from 'sanity'\n\ninterface Geopoint {\n  lat: number\n  lng: number\n  alt?: number\n}\n\nexport const GeopointDiff: DiffComponent<ObjectDiff<Geopoint>> =\n  function GeopointDiff(props) {\n    const {diff, schemaType} = props\n    \n    console.log(diff.fromValue) // Geopoint | null | undefined\n    console.log(diff.toValue) // Geopoint | null | undefined\n    \n    return <div>{/* your diff logic here */}</div>\n  }\n\n\nUPDATED ON MAY 24, 2023\n\nWas this article helpful?\nNot at all\nSomewhat\nAbsolutely!\nI want to suggest an improvement to this article.\nPAGE CONTENT\nAnatomy of a Diff Component\nActions\nAdding a custom diff component to a field\nCreating a basic diff component\nCreating the states of a diff component\nHelper components\n<DiffFromTo />\n<ChangeList />\n<FromTo />\n<DiffCard />\n<DiffTooltip />\nHelper Hooks\nuseDiffAnnotationColor(diff, path)\nuseAnnotationColor(annotation)\nShape of the data on a diff object\nStrings\nArrays\nObjects\nDiff annotations\nUsage with TypeScript\nProduct\nSanity Studio\nAPIs\nContent Lake\nSecurity & Compliance\nCompare Sanity \nResources\nDocumentation\nBlog\nResource library\nCase Studies\nGuides \nTemplates \nPartners \nExplainers \nCMS \nCompany\nContact Sales\nEnterprise\nCareers\nTerms of Service\nPrivacy Policy\nAccessibility Statement\nStay connected\nGitHub\nSlack\nTwitter\nYouTube\nStack Overflow\nBlog RSS\nNewsletter\n©Sanity 2023\nCookie preferences"
  },
  {
    "title": "Custom asset sources",
    "url": "https://www.sanity.io/docs/custom-asset-sources",
    "html": "Skip to content\nJoin live – Get insights, tips, + Q&A from Sanity developers on our latest releases \nProduct\nPLATFORM\nSanity Studio\n\nFlexible editing environment\n\nAPIs\n\nConnect to anything\n\nContent Lake\n\nReal-time database\n\nTry product demo \nFEATURES\nReal-time collaboration\n\nFearlessly work with content\n\nPrecise content querying\n\nTreat content as data with GROQ\n\nLocalization\n\nCoherent messaging across territories\n\nSolutions\nUSE CASES\nE-commerce\n\nRicher shopping experiences\n\nMarketing sites\n\nControl your story\n\nProducts & services\n\nInnovate and automate\n\nMobile apps\n\nContent backend for every OS\n\nView all \nINTEGRATIONS\nShopify\nMux\nVercel\nNetlify\nAlgolia\nCloudinary\nBigCommerce\nCommerce Layer\nSmartling\nTransifex\nView all \nDevelopers\nLEARN\nDocumentation\nStudio API Reference\nAPI reference\nGuides\nGROQ cheat sheet\nSanity UI\nGet started \nBUILD AND SHARE\nTemplates\nTools and plugins\nSchemas and snippets\nProject showcase\nShare your work\nBrowse Exchange \nFRAMEWORKS\nReact\nVue\nNext.js\nNuxt.js\nSvelte\nRemix\nGatsby\nAstro\nAngular\nEleventy\nView all \nResources\nDISCOVER\nBlog\nResource library\nGlossary\nAgency partners\nBecome a partner\nTechnical support\nTalk to sales \nCASE STUDIES\nPuma\n\nSource of truth for global markets\n\nAether\n\nUnique digital shopping experience\n\nMorning Brew\n\nOmnichannel media distribution\n\nInVision\n\nDelivering exceptional customer experiences\n\nView all \nPOPULAR GUIDES\nHeadless CMS\nStructured content\nContent modeling\nHeadless SEO\nStatic websites\nView all \nEnterprise\nPricing\nLog in\nContact sales\nGet started\nSearch\nOverview\nGetting started\nSanity Studio\nSetup and deployment\nConfiguration\nBlock Content\nNEWVisual Editing\nAI Assist\nNEWComments\nCustomization\nComponent API\nStudio Components\nForm Components\nHow form paths work\nDiff Components\nAsset Sources\nTheming and branding\nIcons\nFavicons\nSearch\nSanity UI\nFocus and UI state in custom inputs\nFrom input components to real-time safe patches\nWorkflows\nTools\nPlugins\nCommand Line Interface\nMigrating from v2\nContent Lake\nBuild with Sanity\nAccess control\nReference\nStudio v2 docs\nCustom asset sources\n\nHow to add custom asset sources for Sanity Studio.\n\nSanity Studio comes with a rudimentary asset selector out of the box. It lets you browse and select images or files you have already uploaded. You can also add multiple asset sources, or replace the default one, globally or for a specific asset field.\n\nAsset source plugins\n\nYou can find available asset source plugins in the Sanity Exchange or by searching for them on npmjs.com. Just like other plugins, asset source plugins are installed using your preferred package manager. Some asset source plugins will require that you add some configuration, for example, an API token.\n\nWhen adding custom asset source plugins to your studio, the Select button for the upload field will become a drop-down button, showing the multiple sources:\n\nSelect image from various asset sources. Here we have installed plugins for Unsplash and Cloudinary.\n\nDefining asset sources globally\n\nAssets sources that are distributed as npm packages usually come with a plugin definition for easy setup.\n\nLet's say you want to add the Unsplash asset source. First, install the plugin by running npm i sanity-plugin-asset-source-unsplash in your project folder. Then, in sanity.config.js, add the following:\n\nimport {defineConfig} from 'sanity'\nimport {deskTool} from 'sanity/desk'\n\nimport {unsplashImageAsset} from 'sanity-plugin-asset-source-unsplash'\n\nimport {schemaTypes} from './schemas'\n\nexport default defineConfig({\n  name: 'default',\n  projectId: '<projectId>',\n  dataset: 'production',\n  plugins: [\n    deskTool(),\n\n    unsplashImageAsset(),\n\n  ],\n  schema: {\n    types: schemaTypes,\n  },\n})\n\n\nAdding unsplashImageAsset() to the plugins array will deal with registering the asset source and adding it to the list of assets sources for images in your project.\n\nIf you want to only allow the Unsplash asset source instead of adding it to the default upload option, you can instead import unsplashAssetSource and add it to form.image as the sole member of the returned array value.\n\nimport {defineConfig} from 'sanity'\nimport {deskTool} from 'sanity/desk'\n\nimport {unsplashAssetSource} from 'sanity-plugin-asset-source-unsplash'\n\nimport {schemaTypes} from './schemas'\n\nexport default defineConfig({\n  name: 'default',\n  projectId: '<projectId>',\n  dataset: 'production',\n  plugins: [deskTool()],\n\n  form: {\n\n    image: {\n\n      assetSources: () => [unsplashAssetSource],\n\n      directUploads: false,\n\n    },\n\n  },\n\n  schema: {\n    types: schemaTypes,\n  },\n})\n\nGotcha\n\nMany properties of the studio configuration can accept both a static value – an array of asset sources in this case – or a callback function that returns that same value. One crucial difference between the two is that providing a static array of sources will append those sources to the list of existing sources that may have been added by plugins or the studio's default settings, while returning an array of sources from the callback function will replace the current list of sources.\n\nThe callback is invoked with the current list of sources as the first argument, so to append to the list when using the callback option you might do something like this: assetSources:(prev)=>[...prev, unsplashAssetSource]\n\nUsing sources on a single type\n\nYou can customize sources for single image or file type field in the schema via the options.sources property:\n\n{\n  name: 'mainImage',\n  title: 'Main image',\n  type: 'image',\n  options: {\n    sources: [unsplashAssetSource],\n  },\n}\nRemove the Browse option\n\nYou can remove the Browse button on an image field (making the field upload-only) by specifying options.sources as an empty array:\n\n{\n  name: 'uploadedImage',\n  title: 'Upload an Image',\n  type: 'image',\n  options: {sources: []}\n}\nAnatomy of an asset source plugin\n\nThe plugin exports an object with the following shape:\n\nexport default {\n  name: 'cloudinary', // Unique source name\n  title: 'Cloudinary', // Title displayed in lists, buttons etc\n  component: Cloudinary, // Selection component\n  icon: Icon // Icon for lists, buttons etc.\n}\n\n\nThe selection component\n\nThe plugin must define a component that will let the user select some asset(s) from somewhere.\n\nIf the user selects something, the component calls the props.onSelect function with an array of asset objects like this:\n\ntype AssetFromSource = {\n  kind: 'assetDocumentId' | 'file' | 'base64' | 'url'\n  value: string | File\n  assetDocumentProps?: ImageAsset\n}\n\nAn asset can be a URL, user agent File object, base64 encoded binary data or an assetDocumentId. It can have assetDocumentProps that will end up as properties on the resulting asset document. The allowed document props are:\n\noriginalFilename\nstring\n\nIf you would like to use the original filename, when saving the file etc.\n\nsource\nobject\n\n{name, id, url?} - Optional object identifying the asset in the source, so you can find all assets from that source, or find it back to the spesific assets when opening the plugin etc. If set, the object properties name and id are required, but url is optional. An example for Instragram images: {name: 'instragram', id: '_cjqbJKwZB', url: 'https://www.instagram.com/p/_cjqbJKwZB/'}\n\ntitle\nstring\n\nOptional title for the asset.\n\ndescription\nstring\n\nOptional description for the asset.\n\ncreditLine\nstring\n\nOptional credit line for the asset. E.g. John Doe by Instragram\n\nlabel\nstring\n\nOptional label.\n\nComponent Props\nREQUIRED\nselectionType\nstring\n\nIf the opening interface selection type is 'single' or 'multiple'.\n\nREQUIRED\nselectedAssets\narray\n\nAn array of Sanity assets if they are selected in the opening interface. These are Sanity asset documents.\n\nREQUIRED\nonSelect\nfunction\n\nAccepts an array of asset objects (AssetFromSource[])\n\nWhen assets are selected and returned to props.onSelect, the Studio will make sure to upload the asset(s). If the selected asset is uploaded previously, the existing asset document and file will be used instead.\n\nREQUIRED\nonClose\nfunction\n\nThe component must call props.onClose if the select action is canceled or closed somehow.\n\ndialogHeaderTitle\nReact.ReactNode\n\nA component that serves as the header element for the dialog window.\n\nassetType\nstring\n\nEither file or image\n\nBasic component example\n\nThe following code shows how to implement a selection component for an asset source plugin. It's not very useful as it will only allow you to pick one very specific image, but it should serve nicely as an example.\n\nimport React, {useCallback} from \"react\";\nimport {\n  Dialog,\n  Card,\n} from \"@sanity/ui\";\n\nexport default function GitHubAssetSource({ onSelect, onClose }) {\n  const handleSelect = useCallback(() => {\n    onSelect([\n      {\n        kind: \"url\",\n        value:\n          \"https://github.githubassets.com/images/modules/site/sponsors/logo-mona.svg\",\n        assetDocumentProps: {\n          originalFilename: \"logo-mona.svg\", // Use this filename when the asset is saved as a file by someone.\n          source: {\n            // The source this image is from\n            name: \"github.githubassets.com\",\n            // A string that uniquely idenitfies it within the source.\n            // In this example the URL is the closest thing we have as an actual ID.\n            id: \"https://github.githubassets.com/images/modules/site/sponsors/logo-mona.svg\",\n          },\n          description: \"Mona Lisa Octocat\",\n          creditLine: \"By Github.com\",\n        },\n      },\n    ]);\n  }, [onSelect]);\n\n  const handleClose = useCallback(() => {\n    onClose();\n  }, [onClose]);\n\n  return (\n    <Dialog\n      id=\"github-asset-source\"\n      header=\"Select image from Github\"\n      onClose={handleClose}\n      width={4}\n      open\n    >\n      <Card>\n        <img\n          src=\"https://github.githubassets.com/images/modules/site/sponsors/logo-mona.svg\"\n          onClick={handleSelect}\n        />\n      </Card>\n    </Dialog>\n  );\n}\n\nGotcha\n\nCORS headers for image URLs\n\nWhen calling onSelect with  kind: 'url' the resource must respond with a access-control-allow-origin header that allows the image to be read by the Studio host. Using * will allow all hosts (including Studio host). \n\nProtip\n\nBest practice\n\nWhen integrating with an external service, be sure to read the usage guidelines for that service or API. Some will require you to honor the credits for the asset, not expose any API keys etc. Use the assetDocumentProps for onSelect to store any required or relevant information to the resulting asset document. If it is from a service where the asset has an ID and can be displayed in the service, you should use the source key for the assetDocumentProps to store that information. In that way, you can find back to the original asset.\n\nUPDATED ON MARCH 3, 2023\n\nWas this article helpful?\nNot at all\nSomewhat\nAbsolutely!\nI want to suggest an improvement to this article.\nPAGE CONTENT\nAsset source plugins\nDefining asset sources globally\nUsing sources on a single type\nRemove the Browse option\nAnatomy of an asset source plugin\nThe selection component\nBasic component example\nProduct\nSanity Studio\nAPIs\nContent Lake\nSecurity & Compliance\nCompare Sanity \nResources\nDocumentation\nBlog\nResource library\nCase Studies\nGuides \nTemplates \nPartners \nExplainers \nCMS \nCompany\nContact Sales\nEnterprise\nCareers\nTerms of Service\nPrivacy Policy\nAccessibility Statement\nStay connected\nGitHub\nSlack\nTwitter\nYouTube\nStack Overflow\nBlog RSS\nNewsletter\n©Sanity 2023\nCookie preferences"
  },
  {
    "title": "Form Components",
    "url": "https://www.sanity.io/docs/form-components",
    "html": "Skip to content\nJoin live – Get insights, tips, + Q&A from Sanity developers on our latest releases \nProduct\nPLATFORM\nSanity Studio\n\nFlexible editing environment\n\nAPIs\n\nConnect to anything\n\nContent Lake\n\nReal-time database\n\nTry product demo \nFEATURES\nReal-time collaboration\n\nFearlessly work with content\n\nPrecise content querying\n\nTreat content as data with GROQ\n\nLocalization\n\nCoherent messaging across territories\n\nSolutions\nUSE CASES\nE-commerce\n\nRicher shopping experiences\n\nMarketing sites\n\nControl your story\n\nProducts & services\n\nInnovate and automate\n\nMobile apps\n\nContent backend for every OS\n\nView all \nINTEGRATIONS\nShopify\nMux\nVercel\nNetlify\nAlgolia\nCloudinary\nBigCommerce\nCommerce Layer\nSmartling\nTransifex\nView all \nDevelopers\nLEARN\nDocumentation\nStudio API Reference\nAPI reference\nGuides\nGROQ cheat sheet\nSanity UI\nGet started \nBUILD AND SHARE\nTemplates\nTools and plugins\nSchemas and snippets\nProject showcase\nShare your work\nBrowse Exchange \nFRAMEWORKS\nReact\nVue\nNext.js\nNuxt.js\nSvelte\nRemix\nGatsby\nAstro\nAngular\nEleventy\nView all \nResources\nDISCOVER\nBlog\nResource library\nGlossary\nAgency partners\nBecome a partner\nTechnical support\nTalk to sales \nCASE STUDIES\nPuma\n\nSource of truth for global markets\n\nAether\n\nUnique digital shopping experience\n\nMorning Brew\n\nOmnichannel media distribution\n\nInVision\n\nDelivering exceptional customer experiences\n\nView all \nPOPULAR GUIDES\nHeadless CMS\nStructured content\nContent modeling\nHeadless SEO\nStatic websites\nView all \nEnterprise\nPricing\nLog in\nContact sales\nGet started\nSearch\nOverview\nGetting started\nSanity Studio\nSetup and deployment\nConfiguration\nBlock Content\nNEWVisual Editing\nAI Assist\nNEWComments\nCustomization\nComponent API\nStudio Components\nForm Components\nHow form paths work\nDiff Components\nAsset Sources\nTheming and branding\nIcons\nFavicons\nSearch\nSanity UI\nFocus and UI state in custom inputs\nFrom input components to real-time safe patches\nWorkflows\nTools\nPlugins\nCommand Line Interface\nMigrating from v2\nContent Lake\nBuild with Sanity\nAccess control\nReference\nStudio v2 docs\nForm Components\n\nThe Form Components API lets you customize the look and feel of the fields in your studio individually, or at a root level that will affect every field in the studio.\n\nReference: Form API\n\nThe form.components configuration property is available in your root studio configuration, in plugins, and on individual fields. It accepts the following component customizations:\n\n// sanity.config.js\nimport {defineConfig} from 'sanity'\n\nexport default defineConfig({\n  // ...rest of config\n  form: {\n    components: {\n      input: MyInput,\n  \t\tfield: MyField,\n  \t\titem: MyItem,\n  \t\tpreview: MyPreview,\n    }\n  }\n})\n\nThe props for each component available in the API include a callback function called renderDefault. As the name implies, renderDefault renders the default component. When you call renderDefault, you also pass along the props needed to render the default component. You can modify the props to your liking before passing them along.\n\n// ./custom-string.js\n\nimport {Stack, Text, Card} from '@sanity/ui'\n\nexport function CustomStringInput(props) {\n  return (\n    <Stack space={3}>\n      {props.renderDefault(props)}\n      <Text size={1}>Characters: {props.value?.length || 0}</Text>\n    </Stack>\n  )\n}\n\nIf you want to completely replace the component in question with your own markup, you can do so by neglecting to invoke renderDefault in your return. Be aware that doing so in a plugin setup might cause unexpected behavior because of the chainable nature of the components API (discussed in the next section).\n\nComposing renderDefault()\n\nThe rendering of components in this API uses a middleware pattern. This means that plugin customizations are applied in a chain. Each plugin may call props.renderDefault(props) to defer to default rendering. If any component in the chain fails to invoke the callback function, the chain breaks! To learn more about renderDefault, visit this article on the component API.\n\nInput and Field components\n\nThe input and field custom components are easiest to understand when examined together. To demonstrate the difference between these two we’ll take a closer look at the anatomy of a field widget in the studio. In the illustration below the field includes everything within the purple dashed border conveniently marked “field”, while the input includes only what’s within the green dashed border marked “input”.\n\nOften, developers are chiefly interested in customizing the input widget itself and happy to leave the rest to studio defaults. In these cases, you would opt to replace components.input. If you do want to control the field in its entirety, you can do so by replacing the components.field component.\n\nIn the following example, we assign a custom field component – adding a border and transforming the title and description visually – to all studio fields. In contrast, we do a check to only assign a custom input component – adding a character count – if the field has the string schema type.\n\n// sanity.config.js\n\nimport {Stack, Text, Card} from '@sanity/ui'\nimport {defineConfig} from 'sanity'\nimport schemaTypes from './schemas'\n\nfunction CustomStringInput(props) {\n  return (\n    <Stack space={3}>\n      {props.renderDefault(props)}\n      <Text size={1} style={{color: 'orange'}}>\n        Characters: {props.value?.length || 0}\n      </Text>\n    </Stack>\n  )\n}\n\nfunction CustomField(props) {\n  const {description, title, ...restProps} = props\n  return (\n    <Card border padding={3}>\n      <Stack space={3} marginBottom={3}>\n        <Text size={1} weight=\"bold\">\n          {title?.toUpperCase()}\n        </Text>\n        {description && (\n          <Text size={1} style={{color: 'green'}}>\n            {description}\n          </Text>\n        )}\n      </Stack>\n      {props.renderDefault(restProps)}\n    </Card>\n  )\n}\n\nexport default defineConfig({\n  //...rest of config\n  form: {\n    components: {\n      field: CustomField,\n      input: (props) =>\n\t\t\t\tprops.schemaType?.name === 'string' ? <CustomStringInput {...props} /> : props.renderDefault(props),\n    },\n  },\n})\n\nThe result in the studio is that all fields are customized to use the CustomField component which transforms the title and description and adds a border around the field, while only the fields of type string are affected by the CustomStringField a component which adds a character count in bright orange.\n\nForm Components\n\nPreview components\n\nThe preview component decides how an object, image, or reference value is displayed in list views. The illustration below shows an example of an array of objects, where each object has a string and an image field defined. The default preview component tries its best to guess which fields should be displayed by introspecting the defined fields of the object.\n\nJust like with input and field components – it is possible to configure a custom preview component. The custom preview component can be configured either in sanity.config.js, in a plugin, or directly in the schema definition. In the following example, we will configure a custom preview component directly in the schema definition.\n\nTo keep things simple, our custom preview component will be a div with a green border that wraps the default preview component rendered using renderDefault. However, it is possible to configure a completely custom component and not use renderDefault.\n\nThe following schema definition is what the illustration above represents. Since we want to configure a custom preview component for each object in the array, we add our component to the components.preview property for the object field definition.\n\n// ./custom-array.js\n\nimport {defineField} from 'sanity'\n\n// Render a div that wraps the default preview component\nfunction MyPreviewComponent(props) {\n  return (\n    <div style={{border: '1px solid green'}}>\n      {props.renderDefault(props)}\n    </div>\n  )\n}\n\nexport const arrayOfObjects = defineField({\n  type: 'array',\n  name: 'arrayOfObjects',\n  title: 'Array of objects',\n  of: [\n    {\n      type: 'object',\n      name: 'myObject',\n      title: 'My object',\n      components: {\n        preview: MyPreviewComponent, // Add custom preview component\n      }, \n      fields: [\n        {\n          type: 'string',\n          name: 'myString',\n          title: 'My string',\n        },\n        {\n          type: 'image',\n          name: 'myImage',\n          title: 'My image',\n        },\n      ],\n    },\n  ],\n})\n\n\nAs you can see in the illustration below, our custom preview component is rendered.\n\nItem components\n\nThe item component is the component that represents each item in an array field. The default item component contains a drag handle for sorting, a menu with actions – such as duplicate and delete – and some content. The content, that is, what is between the drag handle and the actions menu, varies based on what type of field(s) the item represents.\n\nIn an array of objects, a preview component is displayed as content, but in an array of primitive types (e.g boolean or string) – an input component is displayed as content.\n\nExample of items for object field. The object input is displayed in a dialog when clicking the item.\nExample of items for a string field. The string input is displayed inside the item (inline editing etc)\n\nTypical use cases/problems this solves\nDecorate the default component, or modify the props passed to the default component, using renderDefault\nCreate your own completely custom component\n\nUPDATED ON DECEMBER 7, 2022\n\nWas this article helpful?\nNot at all\nSomewhat\nAbsolutely!\nI want to suggest an improvement to this article.\nPAGE CONTENT\nComposing renderDefault()\nInput and Field components\nPreview components\nItem components\nTypical use cases/problems this solves\nProduct\nSanity Studio\nAPIs\nContent Lake\nSecurity & Compliance\nCompare Sanity \nResources\nDocumentation\nBlog\nResource library\nCase Studies\nGuides \nTemplates \nPartners \nExplainers \nCMS \nCompany\nContact Sales\nEnterprise\nCareers\nTerms of Service\nPrivacy Policy\nAccessibility Statement\nStay connected\nGitHub\nSlack\nTwitter\nYouTube\nStack Overflow\nBlog RSS\nNewsletter\n©Sanity 2023\nCookie preferences"
  },
  {
    "title": "Studio Components",
    "url": "https://www.sanity.io/docs/studio-components",
    "html": "Skip to content\nJoin live – Get insights, tips, + Q&A from Sanity developers on our latest releases \nProduct\nPLATFORM\nSanity Studio\n\nFlexible editing environment\n\nAPIs\n\nConnect to anything\n\nContent Lake\n\nReal-time database\n\nTry product demo \nFEATURES\nReal-time collaboration\n\nFearlessly work with content\n\nPrecise content querying\n\nTreat content as data with GROQ\n\nLocalization\n\nCoherent messaging across territories\n\nSolutions\nUSE CASES\nE-commerce\n\nRicher shopping experiences\n\nMarketing sites\n\nControl your story\n\nProducts & services\n\nInnovate and automate\n\nMobile apps\n\nContent backend for every OS\n\nView all \nINTEGRATIONS\nShopify\nMux\nVercel\nNetlify\nAlgolia\nCloudinary\nBigCommerce\nCommerce Layer\nSmartling\nTransifex\nView all \nDevelopers\nLEARN\nDocumentation\nStudio API Reference\nAPI reference\nGuides\nGROQ cheat sheet\nSanity UI\nGet started \nBUILD AND SHARE\nTemplates\nTools and plugins\nSchemas and snippets\nProject showcase\nShare your work\nBrowse Exchange \nFRAMEWORKS\nReact\nVue\nNext.js\nNuxt.js\nSvelte\nRemix\nGatsby\nAstro\nAngular\nEleventy\nView all \nResources\nDISCOVER\nBlog\nResource library\nGlossary\nAgency partners\nBecome a partner\nTechnical support\nTalk to sales \nCASE STUDIES\nPuma\n\nSource of truth for global markets\n\nAether\n\nUnique digital shopping experience\n\nMorning Brew\n\nOmnichannel media distribution\n\nInVision\n\nDelivering exceptional customer experiences\n\nView all \nPOPULAR GUIDES\nHeadless CMS\nStructured content\nContent modeling\nHeadless SEO\nStatic websites\nView all \nEnterprise\nPricing\nLog in\nContact sales\nGet started\nSearch\nOverview\nGetting started\nSanity Studio\nSetup and deployment\nConfiguration\nBlock Content\nNEWVisual Editing\nAI Assist\nNEWComments\nCustomization\nComponent API\nStudio Components\nForm Components\nHow form paths work\nDiff Components\nAsset Sources\nTheming and branding\nIcons\nFavicons\nSearch\nSanity UI\nFocus and UI state in custom inputs\nFrom input components to real-time safe patches\nWorkflows\nTools\nPlugins\nCommand Line Interface\nMigrating from v2\nContent Lake\nBuild with Sanity\nAccess control\nReference\nSANITY STUDIO\nStudio API Reference ↗\nConfiguration API\nSchema\nPlugins\nTools\nForm\nStudio Components\nDocument\nHistory experience\nDesk Tool\nTheme\nAuthentication\nStructure Builder\nStudio React Hooks\nCOMMAND LINE INTERFACES\nSanity CLI\nNEWEmbeddings Index CLI\nCONTENT LAKE\nHTTP API\nQuery language (GROQ)\nImage transformations\nINTEGRATION\nClient libraries\nVisual Editing Tooling\nPortable Text\nPROJECT MANAGEMENT\nNEWPlatform terminology\nProjects, organizations, and billing\nPlans and Payments\nStudio v2 docs\nChangelog\nStudio Components\n\nThe studio components API allows you to customize the UI of your Sanity Studio.\n\nIntroduction\n\nThe studio.components config property enables configuration-level customization of your studio. On the initial introduction of the API, the following components can be overridden:\n\n// sanity.config.js\n\nexport default defineConfig({\n  // rest of config ...\n  studio: {\n    components: {\n      layout: MyLayout,\n      logo: MyLogo,\n      navbar: MyNavbar,\n      toolMenu: MyToolMenu,\n    }\n  }\n})\n\nThe props for each component available in the API include a callback function named renderDefault. As the name implies, renderDefault will render the default component. When you call renderDefault, you also pass along the props needed to render the default component. You can modify the props to your liking before passing them along. If you want to completely replace the component in question with your own markup, simply do not invoke renderDefault in your return statement.\n\n// MyEnhancedNavbar.jsx\nimport { Stack, Card, Flex, Text } from '@sanity/ui'\n\n// Adds markup and invokes renderDefault()\nfunction MyEnhancedNavbar(props) {\n  return (\n    <Stack>\n      <Card padding={3} tone=\"caution\">\n        <Flex justify=\"center\">\n          <Text>Important Message: Please Read!</Text>\n        </Flex>\n      </Card>\n      <>{props.renderDefault(props)}</>\n    </Stack>\n  )\n}\n\n// Completely replaces default navbar\nfunction MySuperiorNavbar() {\n  return (\n    <Stack>\n      <Card padding={3} tone=\"caution\">\n        <Flex justify=\"center\">\n          {/* Custom navbar stuff goes here */}\n        </Flex>\n      </Card>\n    </Stack>\n  )\n}\n\nFor some components, like navbar and layout, the renderDefault() method is the only prop passed along, while other components receive additional props.\n\nfunction MyLogo(props) {\n\t// LogoProps includes the title from project config by default\n  const { renderDefault, title } = props;\n\t// Overwrite the value of `title` after spreading the props object\n  return renderDefault({...props, title: title.toUpperCase() });\n}\nimport { isDev } from 'sanity'\n\nfunction MyToolMenu(props) {\n\t// ToolMenuProps includes list of installed tools, and more\n  const { tools, renderDefault } = props;\n\t// Only show the dev-tool if the isDev variable resolves to true\n  const availableTools = isDev ? tools : tools.filter(tool => tool.name !== 'dev-tool')\n  return renderDefault({ ...props, tools: availableTools })\n}\nComposing renderDefault()\n\nThe rendering of components in this API uses a middleware pattern. This means that plugin customizations are applied in a chain. Each plugin may call props.renderDefault(props) to defer to default rendering. If any component in the chain fails to call the callback function, the chain breaks.\n\nfunction MyCustomLogo(props) {\n  return (\n    <div style={{ border: '3px solid skyblue', padding: 4 }}>\n      {props.renderDefault({ ...props, title: props.title?.toUpperCase() })}\n    </div>\n  )\n}\n\nconst myLogoPlugin = definePlugin({\n  name: 'my-logo-plugin',\n  studio: {\n    components: {\n      logo: (props) => (\n        <div style={{border: '3px solid hotpink'}}>\n          {props.renderDefault({...props, title: 'my improved title'})}\n        </div>\n      ),\n    },\n  },\n})\n\nexport default defineConfig({\n  //...rest of config\n  studio: {\n    components: {\n      logo: MyCustomLogo,\n    },\n  },\n})\n\nUPDATED ON DECEMBER 7, 2022\n\nWas this article helpful?\nNot at all\nSomewhat\nAbsolutely!\nI want to suggest an improvement to this article.\nPAGE CONTENT\nIntroduction\nComposing renderDefault()\nProduct\nSanity Studio\nAPIs\nContent Lake\nSecurity & Compliance\nCompare Sanity \nResources\nDocumentation\nBlog\nResource library\nCase Studies\nGuides \nTemplates \nPartners \nExplainers \nCMS \nCompany\nContact Sales\nEnterprise\nCareers\nTerms of Service\nPrivacy Policy\nAccessibility Statement\nStay connected\nGitHub\nSlack\nTwitter\nYouTube\nStack Overflow\nBlog RSS\nNewsletter\n©Sanity 2023\nCookie preferences"
  },
  {
    "title": "Loaders and Overlays",
    "url": "https://www.sanity.io/docs/loaders-and-overlays",
    "html": "Skip to content\nJoin live – Get insights, tips, + Q&A from Sanity developers on our latest releases \nProduct\nPLATFORM\nSanity Studio\n\nFlexible editing environment\n\nAPIs\n\nConnect to anything\n\nContent Lake\n\nReal-time database\n\nTry product demo \nFEATURES\nReal-time collaboration\n\nFearlessly work with content\n\nPrecise content querying\n\nTreat content as data with GROQ\n\nLocalization\n\nCoherent messaging across territories\n\nSolutions\nUSE CASES\nE-commerce\n\nRicher shopping experiences\n\nMarketing sites\n\nControl your story\n\nProducts & services\n\nInnovate and automate\n\nMobile apps\n\nContent backend for every OS\n\nView all \nINTEGRATIONS\nShopify\nMux\nVercel\nNetlify\nAlgolia\nCloudinary\nBigCommerce\nCommerce Layer\nSmartling\nTransifex\nView all \nDevelopers\nLEARN\nDocumentation\nStudio API Reference\nAPI reference\nGuides\nGROQ cheat sheet\nSanity UI\nGet started \nBUILD AND SHARE\nTemplates\nTools and plugins\nSchemas and snippets\nProject showcase\nShare your work\nBrowse Exchange \nFRAMEWORKS\nReact\nVue\nNext.js\nNuxt.js\nSvelte\nRemix\nGatsby\nAstro\nAngular\nEleventy\nView all \nResources\nDISCOVER\nBlog\nResource library\nGlossary\nAgency partners\nBecome a partner\nTechnical support\nTalk to sales \nCASE STUDIES\nPuma\n\nSource of truth for global markets\n\nAether\n\nUnique digital shopping experience\n\nMorning Brew\n\nOmnichannel media distribution\n\nInVision\n\nDelivering exceptional customer experiences\n\nView all \nPOPULAR GUIDES\nHeadless CMS\nStructured content\nContent modeling\nHeadless SEO\nStatic websites\nView all \nEnterprise\nPricing\nLog in\nContact sales\nGet started\nSearch\nOverview\nGetting started\nSanity Studio\nSetup and deployment\nConfiguration\nBlock Content\nNEWVisual Editing\nIntro to Presentation\nConfiguring Presentation\nIntegrating Presentation\nAI Assist\nNEWComments\nCustomization\nWorkflows\nTools\nPlugins\nCommand Line Interface\nMigrating from v2\nContent Lake\nBuild with Sanity\nAccess control\nReference\nStudio v2 docs\nLoaders and Overlays\n\nMake your front end Presentation-aware.\n\nThis guide article introduces you to the concepts of Loaders and Overlays and how to implement them in a front end. They are necessary parts to enable Visual Editing in the Presentation tool for your content team.\n\nWhat are Loaders\n\nLoaders provide a convenient, unified way of loading data from Content Lake: A single front end data fetching implementation across production, development and preview states, for both server and client side rendering.\n\nWe built Loaders to make it easier to integrate full-fledged Visual Editing functionality in your front end with less maintenance and repeated code. Loaders handle the heavy lifting of implementing Visual Editing into your front end by:\n\nSupporting rendering Overlays in your application, using Content Source Maps (CSM) to map your content to the exact documents and fields it came from.\nEnabling seamless switching into preview mode, using Perspectives to display either published or draft content.\nSetting up near instant, as-you-type updates in preview mode.\n\nCrucially, loaders only run preview code paths in preview states, so your production site is kept fast and lean.\n\nLoaders are available for several frameworks:\n\nReact Loader\nNuxt Loader\nSvelte Loader\n\nThese framework specific loaders are built on top of a foundational Core Loader that can be used in any JavaScript-based project.\n\nReact Example\n\nThe following guide is intended for Next.js App Router use cases. However, the same principles apply to other frameworks.\n\nInstallation\n\nOpen your Next.js project in the terminal.\n\nYou can install the required packages with npm, or your preferred package manager:\n\nnpm install @sanity/react-loader\nnpm install @sanity/client\nnpm install @sanity/overlays\nLoading content into your front end\n\n@sanity/react-loader\n\nThe library exposes a createQueryStore function that returns 3 utilities:\n\nuseQuery: A React hook for loading and streaming content data on the client side. The useQuery hook returns an object with data, error, and loading properties:\ndata contains the result of the query.\nerror contains any errors that may have occurred when executing the query.\nloading indicates whether the query is still in progress.\nloadQuery : A loading function that returns a promise with query response and content source mapping data. This is typically used to fetch content during server-side-rendering (SSR), which can then be used to initially hydrate the data returned by the useQuery hook.\nuseLiveMode: a React hook that enables real-time updates for the queried data from the server to the client. It returns liveMode, a boolean value indicating whether the studio is in live preview mode. This is useful for scenarios where you want to adapt your UI based on whether the editor is in live preview. Any changes to the data in the Content Lake are reflected in the application without requiring a manual refresh. This enables creating applications that provide a seamless and responsive user experience with up-to-date data.\nCreate the query store\n\nFirst, create a Sanity client, the query store, and expose the utility functions via a sanity/store.ts file:\n\n// sanity/store.ts\n\nimport { createClient } from \"@sanity/client/stega\";\nimport { createQueryStore } from \"@sanity/react-loader\";\n\nexport const STUDIO_ORIGIN =\n  process.env.NEXT_PUBLIC_STUDIO_ORIGIN || \"http://localhost:3000\";\n\n// Only enable Stega encoded strings in preview\nexport const STEGA_ENABLED = process.env.NODE_ENV !== \"production\";\n\n// Configure the client for production\nconst client = createClient({\n  projectId: process.env.NEXT_PUBLIC_SANITY_PROJECT_ID,\n  dataset: process.env.NEXT_PUBLIC_SANITY_DATASET,\n  apiVersion: \"2023-11-01\",\n  useCdn: true,\n  perspective: \"published\",\n\n  // The 'stega' object groups stega-specific options\n  stega: {\n    enabled: STEGA_ENABLED,\n    studioUrl: STUDIO_ORIGIN,\n\n    // High fidelity control over what strings to stega-encode\n    // filter: ({sourcePath, sourceDocument, resultPath, value, filterDefault}) => boolean\n    // Rich debug information\n    // logger: console,\n  },\n});\n\n// Export the loader utilities\nexport const { loadQuery, useQuery, useLiveMode } = createQueryStore({\n  client,\n});\nLoad data on a page\n\nThen, use the loading utilities in app/page.tsx:\n\n// app/page.tsx\n\nimport { loadQuery } from \"@/sanity/store\";\nimport Link from \"next/link\";\n\ninterface PageData {\n  products: {\n    _id: string;\n    slug: { current: string };\n    title: string | null;\n  }[];\n}\n\nconst PAGE_QUERY = `{\n  'products': *[_type == 'product' && defined(slug)]{\n    _id,\n    slug,\n    title\n  }\n}`;\n\nexport default async function Page() {\n  const { data } = await loadQuery<PageData>(PAGE_QUERY);\n\n  return (\n    <main className=\"min-h-screen p-24\">\n      <h1 className=\"text-lg font-bold\">Products</h1>\n\n      {data?.products.map((product) => (\n        <div key={product._id}>\n          <Link\n            className=\"text-blue-600 hover:text-black\"\n            href={`/products/${product.slug.current}`}\n          >\n            {product.title}\n          </Link>\n        </div>\n      ))}\n    </main>\n  );\n}\n\nIn client components you may use the useQuery hook instead of loadQuery:\n\n// components/DocumentCount.tsx\n\n\"use client\";\n\nimport { useQuery } from \"@/sanity/store\";\n\nexport function DocumentCount() {\n  const { data, loading } = useQuery<number>(`count(*)`);\n\n  if (loading) {\n    return <div>Loading…</div>\n  }\n\n  return <div>Total # of documents: {data}</div>;\n}\n\nEnable live previews\n\nWhen working with previews in the studio, use useLiveMode hooks to instantly propagate updates to the preview. useLiveMode transports changes to the preview as quickly as possible.\n\n// components/VisualEditing.tsx\n\n\"use client\";\n\nimport { STUDIO_ORIGIN, useLiveMode } from \"@/sanity/store\";\n\nexport function VisualEditing() {\n  // TODO: enable overlay highlighting\n  // See complete example in the following section 👇\n\n  useLiveMode({ allowStudioOrigin: STUDIO_ORIGIN });\n\n  return null;\n}\n\nEnable live mode preview and editing in the layout to make it available on all pages:\n\n// app/layout.tsx\n\nimport { draftMode } from \"next/headers\";\nimport \"./globals.css\";\nimport { VisualEditing } from \"@/components/VisualEditing\";\n\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode;\n}) {\n  return (\n    <html lang=\"en\">\n      <body>\n        {children}\n        {draftMode().isEnabled && <VisualEditing />}\n      </body>\n    </html>\n  );\n}\nRender overlays for click-to-edit\n\nYou need to add one more piece to complete the puzzle: render elements that help users visually identify editable elements on a page so that they can click and edit them in the studio.\n\nTo make this happen, you need the Content Source Maps (CSM) to make it into your front end.\n\nFor simple strings, you can do this automatically with Stega. Stega is a method to encode metadata inside of text strings that we invented in collaboration with Vercel. It encodes the CSM steganographically into as invisible characters strings in your front end. Your visitors won't see these encodings, but the Overlays will see them and overlay the editing UI on hover.\n\nGotcha\n\nStega is fast and can help you get started, but it will break any logic that depends on strings being pristine. For strings that are to be used for comparison or passed to functions like Date.parse() you need to use encodeDataAttribute and annotate the data-sanity attribute on DOM nodes manually. \n\nOverlays render interactive visual indicators over your DOM elements. When they are clicked, we'll signal the Studio to display the right field, even deeply nested ones, we'll take the user right to it. Similarly, when a user clicks a field in a form - we'll scroll the DOM node into view if it exists on the page.\n\n// components/VisualEditing.tsx\n\n\"use client\";\n\nimport { STUDIO_ORIGIN, useLiveMode } from \"@/sanity/store\";\nimport { enableOverlays } from \"@sanity/overlays\";\nimport { useEffect } from \"react\";\n\nexport function VisualEditing() {\n  useEffect(() => enableOverlays(), []);\n\n  useLiveMode({ allowStudioOrigin: STUDIO_ORIGIN });\n\n  return null;\n}\n\nWe recommend providing a HistoryAdapter to keep the studio preview pane in sync with your application router or history state. HistoryAdapter Implementations may differ depending on the framework you use. In any case, they must provide two methods:\n\nsubscribe: receives a navigate parameter, which is a function to execute when a new HistoryUpdate is sent to the preview frame.\nupdate: is called when the preview frame history changes. It receives a HistoryUpdate parameter to push/pop/replace your application history.\n// components/VisualEditing.tsx\n\n\"use client\";\n\nimport { STUDIO_ORIGIN, useLiveMode } from \"@/sanity/store\";\nimport {\n  HistoryAdapter,\n  HistoryAdapterNavigate,\n  enableOverlays,\n} from \"@sanity/overlays\";\nimport { usePathname, useRouter, useSearchParams } from \"next/navigation\";\nimport { useEffect, useMemo, useRef } from \"react\";\n\nexport function VisualEditing() {\n  const router = useRouter();\n  const pathname = usePathname();\n  const searchParams = useSearchParams();\n  const routerRef = useRef(router);\n  const navigateRef = useRef<HistoryAdapterNavigate>();\n\n  routerRef.current = router;\n\n  const history: HistoryAdapter = useMemo(\n    () => ({\n      subscribe(navigate) {\n        navigateRef.current = navigate;\n        return () => {\n          navigateRef.current = undefined;\n        };\n      },\n      update(update) {\n        switch (update.type) {\n          case \"push\":\n            return routerRef.current.push(update.url);\n          case \"pop\":\n            return routerRef.current.back();\n          case \"replace\":\n            return routerRef.current.replace(update.url);\n          default:\n            throw new Error(`Unknown update type: ${update.type}`);\n        }\n      },\n    }),\n    []\n  );\n\n  useEffect(\n    () =>\n      enableOverlays({\n        allowStudioOrigin: STUDIO_ORIGIN,\n        history,\n      }),\n    [history]\n  );\n\n  useEffect(() => {\n    navigateRef.current?.({\n      type: \"push\",\n      url: `${pathname}${searchParams?.size ? `?${searchParams}` : \"\"}`,\n    });\n  }, [pathname, searchParams]);\n\n  useLiveMode({ allowStudioOrigin: STUDIO_ORIGIN });\n\n  return null;\n}\nImplementing overlays with data attributes\n\nWhile Stega works for simple string values, you might want to enable overlays for more complex elements (like Product Card or Images) or for the cases where Stega strings don't work.\n\nOverlays also work for elements that have a data-sanity attribute with the necessary information for where the field and studio are.\n\nTo generate this data object, you can use the encodeDataAttribute from the useQuery hook (in React front ends) and pass the field path for a given document type.\n\n// Example from a Navigation component in a Next.js project\n\n\"use client\";\n\nimport { type QueryResponseInitial } from \"@sanity/react-loader/rsc\";\nimport Link from \"next/link\";\nimport { NAV_QUERY } from \"@/sanity/lib/queries\";\nimport { resolveHref } from \"@/sanity/lib/resolveHref\";\nimport { useQuery } from \"@/sanity/loader/useQuery\";\nimport { NavigationData } from \"@/types\";\nimport { useCallback } from \"react\";\nimport { useEncodeDataAttribute } from \"@sanity/react-loader\";\nimport { STUDIO_ORIGIN } from \"@/sanity/store\";\n\ntype Props = {\n  initial: QueryResponseInitial<NavigationData>;\n};\n\nexport function Navigation(props: Props) {\n  const { initial } = props;\n  const { data, sourceMap } = useQuery<NavigationData>(\n    NAV_QUERY,\n    {},\n    { initial }\n  );\n\n  const encodeDataAttribute = useEncodeDataAttribute(\n    data,\n    sourceMap,\n    STUDIO_ORIGIN\n  );\n\n  return (\n    <nav>\n      {data.map((navItem) => {\n        const href = resolveHref(navItem._type, navItem.slug);\n        if (!href) {\n          return null;\n        }\n        return (\n          <Link\n            key={navItem._key}\n            href={href}\n            data-sanity={encodeDataAttribute?.([\n              \"navigation\",\n              navItem._key,\n              \"slug\",\n            ])}\n          >\n            {navItem.title}\n          </Link>\n        );\n      })}\n    </nav>\n  );\n}\nTroubleshooting Stega\n\nA number of the solutions below rely on the vercelStegaSplit function from the @vercel/stega npm package. This works for any hosting provider, not just Vercel, as they both consume the same metadata.\n\nInstall it with:\n\nnpm install @vercel/stega\nComparing field values fails\n\nYour production front end likely evaluates values returned from the Content Lake to perform specific logic. If these values contain encoded metadata from Content Source Maps, likely, they will no longer work.\n\nHow to fix\n\nFor example, imagine a function that determines that a Sanity document's market value is the same as the current market:\n\nfunction showDocument(document: SanityDocument, currentMarket: string) {\n  return document.market === currentMarket\n}\n\nWithout Content Source Maps, this function works as expected. However, if document.market contains encoded metadata, this comparison will fail.\n\nIf document.market is never shown on the page and will not benefit from Visual Editing, it may be best to remove it from the encoded paths in encodeSourceMapAtPath.\n\nAlternatively, \"clean\" the value before comparing it. Since you'll likely do this more than once, consider extracting to a helper function.\n\nimport {vercelStegaCleanAll} from \"@sanity/client/stega\"\n\nfunction showDocument(document: SanityDocument, currentMarket: string) {\n  return vercelStegaCleanAll(document.market) === currentMarket\n}\nThe styling of the editable fields is incorrect\n\nIf the text on the page is breaking out of its container – or its container is much wider than normal – it can be resolved by splitting the encoded text out from the original text.\n\nNote: This is not due to the encoded characters themselves. This problem should only present itself if the element also uses negative letter-spacing in its CSS or is inside of a <ReactWrapBalancer>.\n\nThen identify where the problematic element is rendered in code, for example:\n\nexport function MyComponent({ text }: { text: string }) {\n  return <h1>{text}</h1>;\n}\n\nRewrite using @vercel/stega to avoid any styling issues:\n\nimport { vercelStegaSplit } from \"@vercel/stega\";\n\nexport function MyComponent({ text }: { text: string }) {\n  const { cleaned, encoded } = vercelStegaSplit(text);\n\n  return (\n    <h1>\n      {cleaned}\n      <span style={{ display: \"none\" }}>{encoded}</span>\n    </h1>\n  );\n}\n\nIf you find yourself doing this more than once, you might like to extract this logic to a reusable component:\n\nimport { vercelStegaSplit } from \"@vercel/stega\";\n\nexport default function Clean({ value }: { value: string }) {\n  const { cleaned, encoded } = vercelStegaSplit(value);\n\n  return encoded ? (\n    <>\n      {cleaned}\n      <span style={{ display: \"none\" }}>{encoded}</span>\n    </>\n  ) : (\n    cleaned\n  );\n}\n\nexport function MyComponent({ text }: { text: string }) {\n  return (\n    <h1>\n      <Clean value={text} />\n    </h1>\n  );\n}\n\nThe wrong element is being highlighted\n\nIf the wrong element is highlighted when hovering them, it can be resolved by adding an attribute to the correct element.\n\nHow to fix\n\nFor example, if this component highlights the <h1> and you want it to highlight the entire <section> element:\n\n<section>\n  <h1>{dynamicTitle}</h1>\n  <div>Hardcoded Tagline</div>\n</section>\n\nAdd a data attribute to highlight the correct item:\n\nFor Visual Editing with @sanity/overlays, add data-sanity-edit-target\nFor Vercel Visual Editing, add data-vercel-edit-target\n<section data-sanity-edit-target>\n  <h1>{dynamicTitle}</h1>\n  <div>Hardcoded Tagline</div>\n</section>\n\nUPDATED ON NOVEMBER 24, 2023\n\nWas this article helpful?\nNot at all\nSomewhat\nAbsolutely!\nI want to suggest an improvement to this article.\nPAGE CONTENT\nWhat are Loaders\nReact Example\nInstallation\nLoading content into your front end\nImplementing overlays with data attributes\nTroubleshooting Stega\nComparing field values fails\nThe styling of the editable fields is incorrect\nThe wrong element is being highlighted\nProduct\nSanity Studio\nAPIs\nContent Lake\nSecurity & Compliance\nCompare Sanity \nResources\nDocumentation\nBlog\nResource library\nCase Studies\nGuides \nTemplates \nPartners \nExplainers \nCMS \nCompany\nContact Sales\nEnterprise\nCareers\nTerms of Service\nPrivacy Policy\nAccessibility Statement\nStay connected\nGitHub\nSlack\nTwitter\nYouTube\nStack Overflow\nBlog RSS\nNewsletter\n©Sanity 2023\nCookie preferences"
  },
  {
    "title": "Studio Customization",
    "url": "https://www.sanity.io/docs/customization",
    "html": "Skip to content\nJoin live – Get insights, tips, + Q&A from Sanity developers on our latest releases \nProduct\nPLATFORM\nSanity Studio\n\nFlexible editing environment\n\nAPIs\n\nConnect to anything\n\nContent Lake\n\nReal-time database\n\nTry product demo \nFEATURES\nReal-time collaboration\n\nFearlessly work with content\n\nPrecise content querying\n\nTreat content as data with GROQ\n\nLocalization\n\nCoherent messaging across territories\n\nSolutions\nUSE CASES\nE-commerce\n\nRicher shopping experiences\n\nMarketing sites\n\nControl your story\n\nProducts & services\n\nInnovate and automate\n\nMobile apps\n\nContent backend for every OS\n\nView all \nINTEGRATIONS\nShopify\nMux\nVercel\nNetlify\nAlgolia\nCloudinary\nBigCommerce\nCommerce Layer\nSmartling\nTransifex\nView all \nDevelopers\nLEARN\nDocumentation\nStudio API Reference\nAPI reference\nGuides\nGROQ cheat sheet\nSanity UI\nGet started \nBUILD AND SHARE\nTemplates\nTools and plugins\nSchemas and snippets\nProject showcase\nShare your work\nBrowse Exchange \nFRAMEWORKS\nReact\nVue\nNext.js\nNuxt.js\nSvelte\nRemix\nGatsby\nAstro\nAngular\nEleventy\nView all \nResources\nDISCOVER\nBlog\nResource library\nGlossary\nAgency partners\nBecome a partner\nTechnical support\nTalk to sales \nCASE STUDIES\nPuma\n\nSource of truth for global markets\n\nAether\n\nUnique digital shopping experience\n\nMorning Brew\n\nOmnichannel media distribution\n\nInVision\n\nDelivering exceptional customer experiences\n\nView all \nPOPULAR GUIDES\nHeadless CMS\nStructured content\nContent modeling\nHeadless SEO\nStatic websites\nView all \nEnterprise\nPricing\nLog in\nContact sales\nGet started\nSearch\nOverview\nGetting started\nSanity Studio\nSetup and deployment\nConfiguration\nBlock Content\nNEWVisual Editing\nAI Assist\nNEWComments\nCustomization\nComponent API\nStudio Components\nForm Components\nHow form paths work\nDiff Components\nAsset Sources\nTheming and branding\nIcons\nFavicons\nSearch\nSanity UI\nFocus and UI state in custom inputs\nFrom input components to real-time safe patches\nWorkflows\nTools\nPlugins\nCommand Line Interface\nMigrating from v2\nContent Lake\nBuild with Sanity\nAccess control\nReference\nStudio v2 docs\nStudio Customization\n\nThe Sanity Studio is built from the ground up with customization in mind. You can extend and personalize the studio with your own styling, custom input components, custom previews and leverage our powerful plugin system.\n\nContent previews\nLearn how to customize previews in Sanity Studio.\nComponent API\nThe Component API enables you to change the look and feel of your studio and craft tailor-made editorial interactions.\nPlugins\nPlugins extend the functionality of your studio. Learn how to find and install plugins, or develop your own!\nCustom asset sources\nHow to add custom asset sources for Sanity Studio.\nProduct\nSanity Studio\nAPIs\nContent Lake\nSecurity & Compliance\nCompare Sanity \nResources\nDocumentation\nBlog\nResource library\nCase Studies\nGuides \nTemplates \nPartners \nExplainers \nCMS \nCompany\nContact Sales\nEnterprise\nCareers\nTerms of Service\nPrivacy Policy\nAccessibility Statement\nStay connected\nGitHub\nSlack\nTwitter\nYouTube\nStack Overflow\nBlog RSS\nNewsletter\n©Sanity 2023\nCookie preferences"
  },
  {
    "title": "Component API",
    "url": "https://www.sanity.io/docs/component-api",
    "html": "Skip to content\nJoin live – Get insights, tips, + Q&A from Sanity developers on our latest releases \nProduct\nPLATFORM\nSanity Studio\n\nFlexible editing environment\n\nAPIs\n\nConnect to anything\n\nContent Lake\n\nReal-time database\n\nTry product demo \nFEATURES\nReal-time collaboration\n\nFearlessly work with content\n\nPrecise content querying\n\nTreat content as data with GROQ\n\nLocalization\n\nCoherent messaging across territories\n\nSolutions\nUSE CASES\nE-commerce\n\nRicher shopping experiences\n\nMarketing sites\n\nControl your story\n\nProducts & services\n\nInnovate and automate\n\nMobile apps\n\nContent backend for every OS\n\nView all \nINTEGRATIONS\nShopify\nMux\nVercel\nNetlify\nAlgolia\nCloudinary\nBigCommerce\nCommerce Layer\nSmartling\nTransifex\nView all \nDevelopers\nLEARN\nDocumentation\nStudio API Reference\nAPI reference\nGuides\nGROQ cheat sheet\nSanity UI\nGet started \nBUILD AND SHARE\nTemplates\nTools and plugins\nSchemas and snippets\nProject showcase\nShare your work\nBrowse Exchange \nFRAMEWORKS\nReact\nVue\nNext.js\nNuxt.js\nSvelte\nRemix\nGatsby\nAstro\nAngular\nEleventy\nView all \nResources\nDISCOVER\nBlog\nResource library\nGlossary\nAgency partners\nBecome a partner\nTechnical support\nTalk to sales \nCASE STUDIES\nPuma\n\nSource of truth for global markets\n\nAether\n\nUnique digital shopping experience\n\nMorning Brew\n\nOmnichannel media distribution\n\nInVision\n\nDelivering exceptional customer experiences\n\nView all \nPOPULAR GUIDES\nHeadless CMS\nStructured content\nContent modeling\nHeadless SEO\nStatic websites\nView all \nEnterprise\nPricing\nLog in\nContact sales\nGet started\nSearch\nOverview\nGetting started\nSanity Studio\nSetup and deployment\nConfiguration\nBlock Content\nNEWVisual Editing\nAI Assist\nNEWComments\nCustomization\nComponent API\nStudio Components\nForm Components\nHow form paths work\nDiff Components\nAsset Sources\nTheming and branding\nIcons\nFavicons\nSearch\nSanity UI\nFocus and UI state in custom inputs\nFrom input components to real-time safe patches\nWorkflows\nTools\nPlugins\nCommand Line Interface\nMigrating from v2\nContent Lake\nBuild with Sanity\nAccess control\nReference\nStudio v2 docs\nComponent API\n\nThe Component API enables you to change the look and feel of your studio and craft tailor-made editorial interactions.\n\nThe Component API lets you customize your editorial experience by overriding different parts of the Sanity Studio with your own components written in React. The components available to customize can be split into two main categories: studio components and form components.\n\nStudio components\n\nThe studio.components configuration property accepts replacements for several parts of the studio UI, such as the layout, logo, navbar, and toolMenu. Studio components can be declared in your root workspace configuration, i.e. the defineConfig function, or as part of a plugin config, i.e. the definePlugin function.\n\n// sanity.config.js\nimport {defineConfig} from 'sanity'\n\nexport default defineConfig({\n  // ...rest of config\n  studio: {\n    components: {\n      layout: MyLayout,\n      logo: MyLogo,\n      navbar: MyNavbar,\n      toolMenu: MyToolMenu,\n    },\n  },\n})\nStudio components\n\nLearn more about the studio components API.\n\nReference: Studio components\n\nRead the reference docs for the studio components API.\n\nForm components\n\nThe form.components property deals with the rendering of form fields and inputs in the studio. The components available for customizing are field, input, item and preview. Form components can be declared in your root workspace configuration, i.e. the defineConfig function, as part of a plugin config, i.e. the definePlugin function, or individually on any field in your schemas.\n\n// sanity.config.js\nimport {defineConfig} from 'sanity'\n\nexport default defineConfig({\n  // ...rest of config\n  form: {\n    components: {\n      field: MyField,\n      input: MyInput,\n      item: MyItem,\n      preview: MyPreview,\n    },\n  },\n})\nForm components\n\nLearn more about the form components API.\n\nReference: Form components\n\nRead the reference docs for the form components API\n\nComposing components with renderDefault\n\nThe components available in this API are rendered using a middleware pattern. This means that plugin customizations are applied cumulatively in a chain or cascade. Each component declaration receives a callback function named renderDefault which, as the name implies, will defer to the default studio rendering of the component. When you call renderDefault you also pass along the props needed to render the component, with any changes you care to make.\n\nimport { Stack, Card, Flex, Text } from '@sanity/ui'\n\n// Adds markup and invokes renderDefault()\nfunction MyEnhancedNavbar(props) {\n  return (\n    <Stack>\n      <Card padding={3} tone=\"caution\">\n        <Flex justify=\"center\">\n          <Text>Important reminder! Remember this banner!</Text>\n        </Flex>\n      </Card>\n      <>{props.renderDefault(props)}</>\n    </Stack>\n  )\n}\nCalling renderDefault after adding our banner markup renders the default studio navbar.\n\nYou may opt not to call renderDefault if you want to replace the component in question in its entirety with your own markup, but be aware that doing so in a plugin might result in unexpected behavior as it breaks the middleware chain.\n\nIn the next example we’ll see how the studio handles rendering customization from two different custom logo components.\n\nimport {defineConfig, definePlugin} from 'sanity'\n\n// This custom component will be declared at the root configuration level\nfunction MyCustomLogo(props) {\n  return (\n    <div style={{ border: '3px solid skyblue', padding: 4 }}>\n      {props.renderDefault({ ...props, title: props.title.toUpperCase() })}\n    </div>\n  )\n}\n\n// Then we add another custom logo component as part of a plugin\nconst myLogoPlugin = definePlugin({\n  name: 'my-logo-plugin',\n  studio: {\n    components: {\n      logo: (props) => (\n        <div style={{border: '3px solid hotpink'}}>\n          {props.renderDefault({...props, title: 'my improved title'})}\n        </div>\n      ),\n    },\n  },\n})\n\n// We then include both components in our studio configuration\nexport default defineConfig({\n  name: 'components-api-tests',\n  title: 'Components API Tests',\n  projectId: '<projectId>',\n  dataset: 'production',\n  studio: {\n    components: {\n      logo: MyCustomLogo,\n    },\n  },\n  plugins: [deskTool(), myLogoPlugin()],\n\t/* ...rest of studio config */\n})\nEach custom component is applied in order of precedence\n\nTypical use cases/problems this solves\nBrand your studio with a custom logo or add a banner to your navbar\nHide certain tools when the studio is in development mode with a custom toolMenu\nWrap your studio with multiple context providers with a custom layout component\nCreate a custom input to display a range slider on a number field, or add a character counter on all string fields\n\nRelated and further reading\nStudio components\nReference – Studio components API\nForm components\nReference – Form components API\n\nUPDATED ON DECEMBER 7, 2022\n\nWas this article helpful?\nNot at all\nSomewhat\nAbsolutely!\nI want to suggest an improvement to this article.\nPAGE CONTENT\nStudio components\nForm components\nComposing components with renderDefault\nTypical use cases/problems this solves\nRelated and further reading\nProduct\nSanity Studio\nAPIs\nContent Lake\nSecurity & Compliance\nCompare Sanity \nResources\nDocumentation\nBlog\nResource library\nCase Studies\nGuides \nTemplates \nPartners \nExplainers \nCMS \nCompany\nContact Sales\nEnterprise\nCareers\nTerms of Service\nPrivacy Policy\nAccessibility Statement\nStay connected\nGitHub\nSlack\nTwitter\nYouTube\nStack Overflow\nBlog RSS\nNewsletter\n©Sanity 2023\nCookie preferences"
  },
  {
    "title": "Comments",
    "url": "https://www.sanity.io/docs/comments",
    "html": "Skip to content\nJoin live – Get insights, tips, + Q&A from Sanity developers on our latest releases \nProduct\nPLATFORM\nSanity Studio\n\nFlexible editing environment\n\nAPIs\n\nConnect to anything\n\nContent Lake\n\nReal-time database\n\nTry product demo \nFEATURES\nReal-time collaboration\n\nFearlessly work with content\n\nPrecise content querying\n\nTreat content as data with GROQ\n\nLocalization\n\nCoherent messaging across territories\n\nSolutions\nUSE CASES\nE-commerce\n\nRicher shopping experiences\n\nMarketing sites\n\nControl your story\n\nProducts & services\n\nInnovate and automate\n\nMobile apps\n\nContent backend for every OS\n\nView all \nINTEGRATIONS\nShopify\nMux\nVercel\nNetlify\nAlgolia\nCloudinary\nBigCommerce\nCommerce Layer\nSmartling\nTransifex\nView all \nDevelopers\nLEARN\nDocumentation\nStudio API Reference\nAPI reference\nGuides\nGROQ cheat sheet\nSanity UI\nGet started \nBUILD AND SHARE\nTemplates\nTools and plugins\nSchemas and snippets\nProject showcase\nShare your work\nBrowse Exchange \nFRAMEWORKS\nReact\nVue\nNext.js\nNuxt.js\nSvelte\nRemix\nGatsby\nAstro\nAngular\nEleventy\nView all \nResources\nDISCOVER\nBlog\nResource library\nGlossary\nAgency partners\nBecome a partner\nTechnical support\nTalk to sales \nCASE STUDIES\nPuma\n\nSource of truth for global markets\n\nAether\n\nUnique digital shopping experience\n\nMorning Brew\n\nOmnichannel media distribution\n\nInVision\n\nDelivering exceptional customer experiences\n\nView all \nPOPULAR GUIDES\nHeadless CMS\nStructured content\nContent modeling\nHeadless SEO\nStatic websites\nView all \nEnterprise\nPricing\nLog in\nContact sales\nGet started\nSearch\nOverview\nGetting started\nSanity Studio\nSetup and deployment\nConfiguration\nBlock Content\nNEWVisual Editing\nAI Assist\nNEWComments\nCustomization\nWorkflows\nTools\nPlugins\nCommand Line Interface\nMigrating from v2\nContent Lake\nBuild with Sanity\nAccess control\nReference\nStudio v2 docs\nComments\n\nStreamline your editorial workflow: use comments to manage asynchronous collaborative reviews and publish your content without leaving the studio. Less time and friction, more focus and content that shines.\n\nComments inside Sanity Studio\n\nUse document comments to drive collaborative authoring, editing, and reviewing of your content without leaving the studio.\n\nComments inside Sanity Studio\nEnable comments inside Sanity Studio\n\nThis guide walks developers through implementing comments inside Sanity Studio for asynchronous collaboration in an editorial team.\n\nEnable Comments inside Sanity Studio\nUse Comments for authors and editors\n\nThis guide walks content authors, editors, and reviewers through using comments in Sanity Studio for asynchronous collaboration.\n\nUse Comments for authors and editors\nProduct\nSanity Studio\nAPIs\nContent Lake\nSecurity & Compliance\nCompare Sanity \nResources\nDocumentation\nBlog\nResource library\nCase Studies\nGuides \nTemplates \nPartners \nExplainers \nCMS \nCompany\nContact Sales\nEnterprise\nCareers\nTerms of Service\nPrivacy Policy\nAccessibility Statement\nStay connected\nGitHub\nSlack\nTwitter\nYouTube\nStack Overflow\nBlog RSS\nNewsletter\n©Sanity 2023\nCookie preferences"
  },
  {
    "title": "Install and configure Sanity AI Assist",
    "url": "https://www.sanity.io/docs/install-and-configure-sanity-ai-assist",
    "html": "Skip to content\nJoin live – Get insights, tips, + Q&A from Sanity developers on our latest releases \nProduct\nPLATFORM\nSanity Studio\n\nFlexible editing environment\n\nAPIs\n\nConnect to anything\n\nContent Lake\n\nReal-time database\n\nTry product demo \nFEATURES\nReal-time collaboration\n\nFearlessly work with content\n\nPrecise content querying\n\nTreat content as data with GROQ\n\nLocalization\n\nCoherent messaging across territories\n\nSolutions\nUSE CASES\nE-commerce\n\nRicher shopping experiences\n\nMarketing sites\n\nControl your story\n\nProducts & services\n\nInnovate and automate\n\nMobile apps\n\nContent backend for every OS\n\nView all \nINTEGRATIONS\nShopify\nMux\nVercel\nNetlify\nAlgolia\nCloudinary\nBigCommerce\nCommerce Layer\nSmartling\nTransifex\nView all \nDevelopers\nLEARN\nDocumentation\nStudio API Reference\nAPI reference\nGuides\nGROQ cheat sheet\nSanity UI\nGet started \nBUILD AND SHARE\nTemplates\nTools and plugins\nSchemas and snippets\nProject showcase\nShare your work\nBrowse Exchange \nFRAMEWORKS\nReact\nVue\nNext.js\nNuxt.js\nSvelte\nRemix\nGatsby\nAstro\nAngular\nEleventy\nView all \nResources\nDISCOVER\nBlog\nResource library\nGlossary\nAgency partners\nBecome a partner\nTechnical support\nTalk to sales \nCASE STUDIES\nPuma\n\nSource of truth for global markets\n\nAether\n\nUnique digital shopping experience\n\nMorning Brew\n\nOmnichannel media distribution\n\nInVision\n\nDelivering exceptional customer experiences\n\nView all \nPOPULAR GUIDES\nHeadless CMS\nStructured content\nContent modeling\nHeadless SEO\nStatic websites\nView all \nEnterprise\nPricing\nLog in\nContact sales\nGet started\nSearch\nOverview\nGetting started\nSanity Studio\nSetup and deployment\nConfiguration\nBlock Content\nNEWVisual Editing\nAI Assist\nNEWComments\nCustomization\nWorkflows\nTools\nPlugins\nCommand Line Interface\nMigrating from v2\nContent Lake\nBuild with Sanity\nAccess control\nReference\nStudio v2 docs\nInstall and configure Sanity AI Assist\n\nSanity AI Assist is a content-aware Large Language Model-type assistant that can help you automate repetitive tasks and chores when working in Sanity Studio.\n\nPaid feature\n\nThis article is about a feature currently available for all projects on the Growth plan and up.\n\nThis article deals with the practicalities of installing and configuring the Sanity AI Assist plugin. You can learn more about how to enable the feature for your project and how to use it once you have access by visiting the following links:\n\nPlugin repository\nGuide: Getting started with AI Assist and instructions\nBlog: Announcing Sanity AI Assist\nBlog: AI will make your work more human, not less\nInstallation\n\nUsing npm, or your preferred package manager, update the sanity package to its latest version and install the AI Assist plugin.\n\nnpm install sanity@latest @sanity/assist\nAdd the plugin to your studio configuration\n\nIn sanity.config.ts, add assist to the plugins array:\n\nimport { assist } from '@sanity/assist'\n\nexport default defineConfig({\n  /* other config */\n  plugins: [\n    /* other plugins */\n    assist()\n  ]\n})\nEnabling the AI Assist API\n\nAfter installing and adding the plugin and enabling the AI Assist feature for your project and its datasets, you need to create a token for the plugin to access the AI Assist API. This needs to be done by a member of the project with token creation permissions (typically someone with an admin or developer role).\n\nStart the studio and open any document\nClick the sparkle icon(✨) in the document header near the close document X-button\nThen select Manage instructions\nSelecting Manage instructions will open an inspector panel\nClick the Enable AI assistance button to create a token and enable AI Assist for everyone with access to the project\n\nYou will find a new API token entry for your project named “Sanity AI” in your project's API settings on sanity.io/manage.\n\nThe plugin will now work for any dataset in your project.\n\nGotcha\n\nNote: You can revoke this token at any time to disable Sanity AI Assist service. A new token has to be generated via the plugin UI for it to work again.\n\nSchema configuration\n\nBy default, most object, array, and string field types have AI writing assistance enabled. Your assistant can write to all compatible fields that it detects.\n\nThe assistant can also create array items, including Portable Text blocks, when the type has been imported to the Studio's schema as a custom type (learn more about strict schemas).\n\nDisable AI Assist for a schema type\n// this will disable AI assistance wherever it is used,\n// ie: as field, document, array types\ndefineType({\n name: 'policy',\n  type: 'document',\n  options: {\n    aiWritingAssistance: {exclude: true}\n },\n  fields: [\n    // ...\n  ]\n})\nDisable for a nested field type\n// this disables AI assistance only for the specific field\ndefineType({\n name: 'product',\n  type: 'object',\n  fields: [\n    defineField({\n      name: 'sku',\n      type: 'string',\n      options: {\n        aiWritingAssistance: {exclude: true}\n     }\n  })\n  ]\n})\nDisable for an array type\n// this disables s AI assistance for the specific array member\n// if all types in the `of` array are excluded, the array type is also considered excluded\ndefineType({\n name: 'myArray',\n  type: 'array',\n  of: [\n    defineArrayMember({\n      type: 'someType',\n      options: {\n        aiWritingAssistance: {exclude: true}\n     }\n  })\n  ]\n})\nUnsupported types\n\nThe following types are not supported, and behave as excluded types:\n\nNumber\nReference\nSlug\nUrl\nDate\nDatetime\nImage (supported when image has custom fields)\nFile (never supported, even when file has custom fields)\n\nFields with these types will not be changed by the assistant, do not have AI Assist actions, and cannot be referenced in instructions.\n\nObjects where all fields are excluded or unsupported and arrays where all member types are excluded or unsupported will also be excluded.\n\nIncluded document types\n\nThis plugin adds an AI Context document type.\n\nIf your Studio uses Structure Builder to configure the studio structure, you might have to add this document type to your structure.\n\nThe document type name can be imported from the plugin:\n\nimport {contextDocumentTypeName} from '@sanity/assist'\n\n// put into structure in structure  \nS.documentTypeListItem(contextDocumentTypeName)\nTroubleshooting\nCaveats\n\nLarge Language Models (LLMs) are a new technology. Constraints and limitations are still being explored, but some common caveats to the field that you may run into using AI Assist are:\n\nLimits to instruction length: Long instructions on deep content structures may exhaust model context\nTimeouts: To be able to write structured content, we're using the largest language models - long-running results may time out or intermittently fail\nLimited capacity: The underlying LLM APIs used by AI Assist are resource constrained\n\nThere are limits to how much text the AI can process when processing an instruction. Under the hood, the AI Assist will add information about your schema, which adds to what's commonly referred to as “the context window.”\n\nIf you have a very large schema (many document and field types), it can be necessary to exclude types to limit how much of the context window is used for the schema itself.\n\nWe recommend excluding all types that would rarely benefit from automated workflows. A quick win is typically to exclude array types. It can be a good idea to exclude most non-block types from Portable Text arrays. This will ensure that the Sanity Assist outputs mostly formatted text.\n\nThird-party sub-processors\n\nThis version of the feature uses OpenAI.com as a third-party sub-processor. Their security posture has been vetted by Sanity's security team, and approved for use.\n\nUPDATED ON NOVEMBER 16, 2023\n\nWas this article helpful?\nNot at all\nSomewhat\nAbsolutely!\nI want to suggest an improvement to this article.\nPAGE CONTENT\nInstallation\nAdd the plugin to your studio configuration\nEnabling the AI Assist API\nSchema configuration\nDisable AI Assist for a schema type\nDisable for a nested field type\nDisable for an array type\nUnsupported types\nIncluded document types\nTroubleshooting\nThird-party sub-processors\nProduct\nSanity Studio\nAPIs\nContent Lake\nSecurity & Compliance\nCompare Sanity \nResources\nDocumentation\nBlog\nResource library\nCase Studies\nGuides \nTemplates \nPartners \nExplainers \nCMS \nCompany\nContact Sales\nEnterprise\nCareers\nTerms of Service\nPrivacy Policy\nAccessibility Statement\nStay connected\nGitHub\nSlack\nTwitter\nYouTube\nStack Overflow\nBlog RSS\nNewsletter\n©Sanity 2023\nCookie preferences"
  },
  {
    "title": "Customizing block content",
    "url": "https://www.sanity.io/docs/customizing-block-content",
    "html": "Skip to content\nJoin live – Get insights, tips, + Q&A from Sanity developers on our latest releases \nProduct\nPLATFORM\nSanity Studio\n\nFlexible editing environment\n\nAPIs\n\nConnect to anything\n\nContent Lake\n\nReal-time database\n\nTry product demo \nFEATURES\nReal-time collaboration\n\nFearlessly work with content\n\nPrecise content querying\n\nTreat content as data with GROQ\n\nLocalization\n\nCoherent messaging across territories\n\nSolutions\nUSE CASES\nE-commerce\n\nRicher shopping experiences\n\nMarketing sites\n\nControl your story\n\nProducts & services\n\nInnovate and automate\n\nMobile apps\n\nContent backend for every OS\n\nView all \nINTEGRATIONS\nShopify\nMux\nVercel\nNetlify\nAlgolia\nCloudinary\nBigCommerce\nCommerce Layer\nSmartling\nTransifex\nView all \nDevelopers\nLEARN\nDocumentation\nStudio API Reference\nAPI reference\nGuides\nGROQ cheat sheet\nSanity UI\nGet started \nBUILD AND SHARE\nTemplates\nTools and plugins\nSchemas and snippets\nProject showcase\nShare your work\nBrowse Exchange \nFRAMEWORKS\nReact\nVue\nNext.js\nNuxt.js\nSvelte\nRemix\nGatsby\nAstro\nAngular\nEleventy\nView all \nResources\nDISCOVER\nBlog\nResource library\nGlossary\nAgency partners\nBecome a partner\nTechnical support\nTalk to sales \nCASE STUDIES\nPuma\n\nSource of truth for global markets\n\nAether\n\nUnique digital shopping experience\n\nMorning Brew\n\nOmnichannel media distribution\n\nInVision\n\nDelivering exceptional customer experiences\n\nView all \nPOPULAR GUIDES\nHeadless CMS\nStructured content\nContent modeling\nHeadless SEO\nStatic websites\nView all \nEnterprise\nPricing\nLog in\nContact sales\nGet started\nSearch\nOverview\nGetting started\nSanity Studio\nSetup and deployment\nConfiguration\nBlock Content\nConfiguring the Portable Text editor\nCustomizing the Portable Text Editor\nCustomizing block content\nNEWVisual Editing\nAI Assist\nNEWComments\nCustomization\nWorkflows\nTools\nPlugins\nCommand Line Interface\nMigrating from v2\nContent Lake\nBuild with Sanity\nAccess control\nReference\nStudio v2 docs\nCustomizing block content\n\nThis series of practical examples shows how to customize block content and the Portable Text input in Sanity Studio.\n\nCustom decorators\n\nTo render content the way you want it to be shown, you can create custom decorators.\n\nimport {defineArrayMember} from 'sanity'\n\ndefineArrayMember({\n  type: 'block',\n  marks: {\n    decorators: [\n      {\n        title: 'Highlight',\n        value: 'highlight',\n        component: (props) => (\n          <span style={{backgroundColor: '#0f0'}}>\n            {props.children}\n          </span>\n        ),\n        icon: BulbOutlineIcon,\n      },\n    ],\n  },\n})\n\nThe code example defines a member of an array that enables creating a block with decorators. The decorator in the example has props, such as value, component, and icon; these props define how the block is rendered:\n\nvalue applies a highlight decorator to the component.\ncomponent is a React element. It has the same props as BlockDecoratorProps. It renders the child props wrapped in a span element with a green background color (#0f0).\nicon is an instance of BulbOutlineIcon.\nCustom styles\n\nYou can create custom decorators to render custom styles. Custom styles extend the standard set of styles available out of the box.\n\nGotcha\nA rendered preview isn't available for custom styles. It's possible to preview only the default built-in styles available in the editor toolbar menu.\nCustom styles don't support the icon prop.\nimport {defineArrayMember} from 'sanity'\nimport {Card, Text} from '@sanity/ui'\n\ndefineArrayMember({\n  type: 'block',\n  styles: [\n    {\n      title: 'Section Header',\n      value: 'sectionHeader',\n      component: (props) => (\n        <Card paddingBottom={4}>\n          <Text size={4} weight=\"bold\">\n            {props.children}\n          </Text>\n        </Card>\n      ),\n    },\n  ],\n})\n\nThe code example defines a block array member and adds style options to it:\n\nThe style is sectionHeader.\nThe child props of the component in the block are rendered as a card with bold text.\nSpellchecking\n\nYou can enable and disable the web browser's built-in spell-checker for text blocks. To do so, set options.spellCheck to either true or false for the specified block type.\n\ndefineArrayMember({\n  type: 'block',\n  options: {\n    spellCheck: false,\n  },\n})\n\nThe code example defines a block array member, and it disables spellchecking text in the block.\n\nCustomizing block content rendering\n\nYou can render block content in Sanity Studio using one of the following form components:\n\nblock: renders any valid Portable Text block (text or object.)\ninlineBlock: renders a Portable Text block inline inside a running piece of text.\nannotation: renders text with annotated metadata (for example, a URL link to reference an external resource, or a cross-reference to another document.)\n\nYou can modify specific schema types to customize only the corresponding components. Alternatively, you can modify the studio config or create a plugin to apply the customization to all block content in Sanity Studio.\n\nCustomizing specific block content\n\nTo customize a specific block content type, use the components property associated with that type.\nDefine a block to provide your custom render component for the associated content type.\n\nThe following example customizes the rendering of text and image blocks in the body field.\n\nimport {Box} from '@sanity/ui'\nimport {defineField, defineArrayMember} from 'sanity'\n\ndefineField({\n  name: 'body',\n  title: 'Body',\n  type: 'array',\n  of: [\n    defineArrayMember({\n      type: 'image',\n      // Replace the preview of all block images\n      // with the edit form for that image, bypassing\n      // the modal step.\n      components: {\n        block: (props) => {\n          return props.renderDefault({\n            ...props,\n            renderPreview: () => props.children,\n          })\n        },\n      },\n    }),\n    defineArrayMember({\n      type: 'block',\n      // Add extra padding to all text blocks\n      // for this type.\n      components: {\n        block: (props) => {\n          return (\n            <Box padding={2}>\n              {props.renderDefault(props)}\n            </Box>\n          )\n        },\n      },\n    }),\n  ],\n})\n\nThe defineField function creates a field called body, which is an array of two types of content: images and blocks.\n\nThe components property enables customizing the behavior of the field.\n\nThe block function is a component that renders the preview of a text or an image block. It takes props as an argument, and it returns a rendered version of the content with additional styling:\n\nIt bypasses the modal step when previewing images.\nIt adds extra padding to the text blocks.\nCustomizing block content with the studio config\n\nTo customize the default rendering of all block content in Sanity Studio, modify the studio config, instead of customizing schemas as shown in the previous section.\n\nThe following example reuses the customization described in the previous example, but it sets it in the studio config, instead of the schema type. The studio config applies the customization to any text block or image type rendered as block content.\n\nimport {definePlugin, defineField, BlockProps} from 'sanity'\n\nconst BlockComponent = (props: BlockProps) => {\n  // Add extra padding to all text blocks\n  if (props.schemaType.name === 'block') {\n    return (\n      <Box padding={2}>\n        {props.renderDefault(props)}\n      </Box>\n    )\n  }\n  // Inline editing of images\n  if (props.schemaType.name === 'image') {\n    return props.renderDefault({\n      ...props,\n      renderPreview: () => props.children,\n    })\n  }\n  // Render default for all other types\n  return props.renderDefault(props)\n}\n\n// The config in sanity.config.ts\ndefinePlugin({\n  ...,\n  form: {\n    components: {\n      block: BlockComponent,\n    },\n  },\n})\n\n// This schema gets the customizations automatically\n// added to the 'block' and 'image' types.\ndefineField({\n  name: 'intro',\n  title: 'Intro',\n  type: 'array',\n  of: [\n    {type: 'block'},\n    {type: 'image'},\n  ]\n})\n\n\nIn the code example:\n\nBlockComponent takes props and returns a component that does the following:\nAdds extra padding for all text blocks\nEnables skipping the preview and directly editing images inline\nApplies the default rendering to all other types.\nThe defineField function defines a schema field that automatically adds the customizations to the block and image types.\nCustomizing block content with a plugin\n\nInstead of modifying the studio config, you can use the code in the previous example to create a plugin to achieve the same outcome.\n\nThe advantage is that you can install and share the plugin across multiple studios and workspaces.\n\nFor more information about creating plugins, see Developing plugins.\n\nCustomizing the input\n\nBesides customizing block content, you can also customize PortableTextInput to change editing block content in Sanity Studio.\n\nThis option enables rendering additional information, such as a word counter or supporting custom hotkeys to control editing features.\n\nThe following example shows a simple implementation where you can modify the input by assigning custom values to the props of PortableTextInput.\n\nimport {\n  defineField,\n  defineArrayMember,\n  PortableTextInput,\n  PortableTextInputProps,\n} from 'sanity'\n\ndefineField({\n  name: 'body',\n  title: 'Body',\n  type: 'array',\n  of: [\n    {\n      type: 'block',\n    },\n  ],\n  components: {\n    input: (props: PortableTextInputProps) => {\n      return props.renderDefault(props)\n      // Alternatively:\n      // return <PortableTextInput {...props} />\n    },\n  },\n})\n\n\nReplace the input form component with your custom component. To do so, use either a block content schema type definition, or definePlugin in the studio config.\n\nCustom hotkeys\n\nYou can also set custom hotkeys by passing your hotkey mapping as hotkeys props to PortableTextInput.\n\nThe following example implements two hotkeys:\n\nA hotkey for a custom highlight decorator.\nAnother hotkey to enable adding a link annotation to the selected text:\nimport {useMemo} from 'react'\nimport {\n  defineField,\n  defineArrayMember,\n  PortableTextInput,\n  PortableTextInputProps,\n} from 'sanity'\n\n// The custom input with two custom hotkeys\nconst CustomInput =\n  (props: PortableTextInputProps) => {\n    const {path, onItemOpen, onPathFocus} = props\n    // Define the hotkey mapping\n    const hotkeys: PortableTextInputProps['hotkeys'] = useMemo(\n      () => ({\n        // Use the 'marks' prop to toggle\n        // text decorators on the currently\n        // selected text with a hotkey\n        marks: {\n          'Ctrl+h': 'highlight',\n        },\n        // Use the 'custom' prop to define custom\n        // functions that can access the underlying \n        // editor instance.\n        // In this case, the 'Ctrl+l' hotkey toggles\n        // a link on the selected text using the\n        // PortableTextEditor API with the editor instance.\n        custom: {\n          'Ctrl+l': (event, portableTextEditor) => {\n            const linkType = portableTextEditor.\n              schemaTypes.annotations.find((a) => a.name === 'link')\n            if (linkType) {\n              event.preventDefault()\n              const activeAnnotations =\n                PortableTextEditor.activeAnnotations(portableTextEditor)\n              const isLinkActive =\n                activeAnnotations.some((a) => a._type === 'link')\n              if (isLinkActive) {\n                PortableTextEditor.removeAnnotation(\n                  portableTextEditor,\n                  linkType\n                )\n              } else {\n                const result = PortableTextEditor.addAnnotation(\n                  portableTextEditor,\n                  linkType\n                )\n                if (result?.markDefPath) {\n                  // Open the form member\n                  onItemOpen(path.concat(result.markDefPath))\n                  // Move the focus to the 'href' field in the next tick\n                  setTimeout(() => {\n                    onPathFocus(result.markDefPath.concat('href'))\n                  })\n                }\n              }\n            }\n          },\n        },\n      }),\n      [onPathFocus, onItemOpen, path],\n    )\n    return <PortableTextInput {...props} hotkeys={hotkeys} />\n  }\n\n// The schema type to use for the custom input above\ndefineField({\n  name: 'body',\n  title: 'Body',\n  type: 'array',\n  of: [\n    defineArrayMember({\n      type: 'block',\n      marks: {\n        decorators: [\n          {\n            title: 'Highlight',\n            value: 'highlight',\n            component: (props) => (\n              <span style={{backgroundColor: '#0f0'}}>\n                {props.children}\n              </span>\n            ),\n            icon: BulbOutlineIcon,\n          },\n        ],\n      },\n    }),\n  ],\n  components: {\n    // Return the custom input defined above\n    input: CustomInput,\n  },\n})\n\n\nThe example defines a custom input component for the Portable Text editor.\n\nThe hotkey mapping includes a Ctrl+h key combination to toggle highlighting on the current selected text, and a Ctrl+l key combination to toggle a link on the selected text.\n\nThe marks property defines hotkey mappings for text decorators, whereas the custom property defines custom functions that can access the underlying editor instance.\n\nIn the example, custom adds a link annotation to PortableTextEditor:\n\nIt checks if the link type is an existing schema type.\nIf the link type exists, it prevents the default action that Ctrl+l would trigger, and it adds an annotation for the link type.\nIt checks if an active link annotation exists, and it either adds or removes it accordingly.\nIf adding or removing the annotation returns a result, it opens the form member and moves the focus to the href field.\nCustom paste handler\n\nThe following example implements custom paste handling for any clipboard text that is a valid URL.\nIt pastes the content as a resource type inline block at the current cursor position.\n\nimport {\n  defineField,\n  defineArrayMember,\n  PortableTextInput,\n  PortableTextInputProps,\n} from 'sanity'\n\n// The custom paste handler function to pass as props\n// to PortableTextInput\nconst onPaste: PortableTextInputProps['onPaste'] = (data) => {\n  let url: URL\n  const text =\n    data.event.clipboardData.getData('text/plain') || ''\n  // Check if clipboard data is a URL\n  try {\n    url = new URL(text)\n    // Insert an inline resource object in the text\n    return Promise.resolve({\n      insert: [\n        {\n          _type: 'block',\n          children: [{_type: 'resource', url: url.href}],\n        },\n      ],\n      // To set a specific location to insert\n      // the pasted content, instead of the current \n      // cursor position, define a 'path' prop\n    })\n  } catch (_) {\n    return undefined\n  }\n}\n\n// The block content schema type to use\n// for the custom paste handler above\ndefineField({\n  name: 'body',\n  title: 'Body',\n  type: 'array',\n  of: [\n    defineArrayMember({\n      type: 'block',\n      of: [\n        {\n          type: 'object',\n          name: 'resource',\n          title: 'Resource',\n          fields: [{type: 'url', name: 'url'}],\n        },\n      ],\n    }),\n  ],\n  components: {\n    input: (props) => {\n      return <PortableTextInput {...props} onPaste={onPaste} />\n    },\n  },\n})\n\nCustom block validation\n\nThe following example validates a text block: it checks for a set of disallowed content using regex matching on every span node of the text block.\nTo test the example, type \"foo\" inside a text block.\n\nimport {\n  Path,\n  PortableTextSpan,\n  defineArrayMember,\n  defineType,\n  isPortableTextSpan,\n  isPortableTextTextBlock,\n} from 'sanity'\n\ninterface DisallowListLocation {\n  matchText: string\n  message: string\n  offset: number\n  path: Path\n  span: PortableTextSpan\n  level: 'error' | 'info' | 'warning'\n}\n\nexport default defineType({\n  name: 'customValidationExample',\n  title: 'Custom block validation example',\n  type: 'document',\n  fields: [\n    {\n      name: 'blockContent',\n      title: 'Block content with custom validation',\n      type: 'array',\n      of: [\n        defineArrayMember({\n          type: 'block',\n          validation: (Rule) => [\n            Rule.error().custom((value, context) => {\n              const disallowList: {regExp: RegExp; message: string}[] = [\n                {\n                  message: 'Use n-dash (–) instead',\n                  regExp: new RegExp(/^- /g),\n                },\n                {\n                  message: 'Use a bullet list instead',\n                  regExp: new RegExp(/^\\* /g),\n                },\n                {\n                  message: 'Avoid using \\'foo\\'',\n                  regExp: new RegExp(/\\bfoo\\b/g),\n                },\n              ]\n              const {path} = context\n              const locations: DisallowListLocation[] = []\n              if (path && isPortableTextTextBlock(value)) {\n                value.children.forEach((child) => {\n                  if (isPortableTextSpan(child)) {\n                    disallowList.forEach((entry) => {\n                      const matches = isPortableTextSpan(child) && child.text.matchAll(entry.regExp)\n                      if (matches) {\n                        Array.from(matches).forEach((match) => {\n                          locations.push({\n                            span: child,\n                            matchText: match[0],\n                            path: path.concat(['children', {_key: child._key}]),\n                            offset: match.index || 0,\n                            message: entry.message,\n                            level: 'error',\n                          })\n                        })\n                      }\n                    })\n                  }\n                })\n              }\n              if (locations.length) {\n                return {\n                  message: `${locations.map((item) => item.message).join('. ')}.`,\n                }\n              }\n              return true\n            }),\n          ],\n        }),\n      ],\n    },\n  ],\n})\n\n\nIn the code example, onPaste defines a custom paste handler for the PortableTextInput component.\n\nIt checks if the clipboard data is a URL; if so, it inserts the URL as an inline resource object in the text block.\nThe default insert location is the current cursor position. It's also possible to assign a different insert location by setting an optional path prop.\nFurther reading\nFor more information about decorators and annotations, see:\nConfiguring the Portable Text editor\nCustomizing the Portable Text Editor\nPreviewing Portable Text\nSchema / Field Types\nBlock\n\nUPDATED ON OCTOBER 9, 2023\n\nWas this article helpful?\nNot at all\nSomewhat\nAbsolutely!\nI want to suggest an improvement to this article.\nPAGE CONTENT\nCustom decorators\nCustom styles\nSpellchecking\nCustomizing block content rendering\nCustomizing specific block content\nCustomizing block content with the studio config\nCustomizing block content with a plugin\nCustomizing the input\nCustom hotkeys\nCustom paste handler\nCustom block validation\nFurther reading\nProduct\nSanity Studio\nAPIs\nContent Lake\nSecurity & Compliance\nCompare Sanity \nResources\nDocumentation\nBlog\nResource library\nCase Studies\nGuides \nTemplates \nPartners \nExplainers \nCMS \nCompany\nContact Sales\nEnterprise\nCareers\nTerms of Service\nPrivacy Policy\nAccessibility Statement\nStay connected\nGitHub\nSlack\nTwitter\nYouTube\nStack Overflow\nBlog RSS\nNewsletter\n©Sanity 2023\nCookie preferences"
  },
  {
    "title": "Configuring the Portable Text editor",
    "url": "https://www.sanity.io/docs/portable-text-editor-configuration",
    "html": "Skip to content\nJoin live – Get insights, tips, + Q&A from Sanity developers on our latest releases \nProduct\nPLATFORM\nSanity Studio\n\nFlexible editing environment\n\nAPIs\n\nConnect to anything\n\nContent Lake\n\nReal-time database\n\nTry product demo \nFEATURES\nReal-time collaboration\n\nFearlessly work with content\n\nPrecise content querying\n\nTreat content as data with GROQ\n\nLocalization\n\nCoherent messaging across territories\n\nSolutions\nUSE CASES\nE-commerce\n\nRicher shopping experiences\n\nMarketing sites\n\nControl your story\n\nProducts & services\n\nInnovate and automate\n\nMobile apps\n\nContent backend for every OS\n\nView all \nINTEGRATIONS\nShopify\nMux\nVercel\nNetlify\nAlgolia\nCloudinary\nBigCommerce\nCommerce Layer\nSmartling\nTransifex\nView all \nDevelopers\nLEARN\nDocumentation\nStudio API Reference\nAPI reference\nGuides\nGROQ cheat sheet\nSanity UI\nGet started \nBUILD AND SHARE\nTemplates\nTools and plugins\nSchemas and snippets\nProject showcase\nShare your work\nBrowse Exchange \nFRAMEWORKS\nReact\nVue\nNext.js\nNuxt.js\nSvelte\nRemix\nGatsby\nAstro\nAngular\nEleventy\nView all \nResources\nDISCOVER\nBlog\nResource library\nGlossary\nAgency partners\nBecome a partner\nTechnical support\nTalk to sales \nCASE STUDIES\nPuma\n\nSource of truth for global markets\n\nAether\n\nUnique digital shopping experience\n\nMorning Brew\n\nOmnichannel media distribution\n\nInVision\n\nDelivering exceptional customer experiences\n\nView all \nPOPULAR GUIDES\nHeadless CMS\nStructured content\nContent modeling\nHeadless SEO\nStatic websites\nView all \nEnterprise\nPricing\nLog in\nContact sales\nGet started\nSearch\nOverview\nGetting started\nSanity Studio\nSetup and deployment\nConfiguration\nBlock Content\nConfiguring the Portable Text editor\nCustomizing the Portable Text Editor\nCustomizing block content\nNEWVisual Editing\nAI Assist\nNEWComments\nCustomization\nWorkflows\nTools\nPlugins\nCommand Line Interface\nMigrating from v2\nContent Lake\nBuild with Sanity\nAccess control\nReference\nStudio v2 docs\nChangelog\nConfiguring the Portable Text editor\n\nSet up and configure the Portable Text editor with decorators, annotations, and block content\n\nPortable Text is a JSON specification built on the idea of rich text as an array of blocks, where each block is an array of child spans. You can use it instead of Markdown or MDX to store your content in a presentation-agnostic way. This allows transforming, or serializing, content into any markup language or framework.\n\nPortable Text is extendible. Each block can have a style and a set of mark definitions that describe data structures distributed in the child spans. Portable Text also enables inserting arbitrary data objects in the array, only requiring a _type-key.\nPortable Text allows custom content objects in the root array, enabling editing and rendering environments to mix rich text with custom content types.\n\nYou can create as many versions of the editor for Portable Text as you want. A frequent pattern is a simple configuration with selected decorators and annotations, and a more comprehensive configuration with custom block types.\nThis can help if editors can only use emphasis and annotate text as internal links in some settings (for example, a caption) and have a full toolbox available in another (for example, an article body).\n\nMinimal configuration example\n\nThe following example shows a minimal configuration to implement Portable Text and the editor in Sanity Studio:\n\nexport default {\n  name: 'content',\n  type: 'array',\n  title: 'Content',\n  of: [\n    {\n      type: 'block'\n    }\n  ]\n}\n\nThe code renders the Portable Text editor with a default configuration for styles, decorators, and annotations.\n\nPortable Text is markup-agnostic; however, the default configuration maps easily to HTML conventions. Bold and italics set the decorators strong and em (emphasis), and produce a data structure like this:\n\n[\n  {\n    \"_type\": \"span\",\n    \"_key\": \"eab9266102e81\",\n    \"text\": \"strong\",\n    \"marks\": [\n      \"strong\"\n    ]\n  },\n  {\n    \"_type\": \"span\",\n    \"_key\": \"eab9266102e82\",\n    \"text\": \" and \",\n    \"marks\": []\n  },\n  {\n    \"_type\": \"span\",\n    \"_key\": \"eab9266102e83\",\n    \"text\": \"emphasis.\",\n    \"marks\": [\n      \"em\"\n    ]\n  }\n]\n\nPortable Text isn't designed for direct human authoring or reading, but to be easily parsed by software. The _type-key also makes it queryable in Sanity’s APIs, and by other JSON tools, such as jq or groq-js.\n\nAdd custom blocks\n\nSince Portable Text defines block content as an array, adding custom content blocks for images, videos, or code-embeds, means inserting these items between paragraph blocks.\n\nGotcha\n\nContent blocks for the Portable Text editor must be object-like types, and not primitive types like string, number, or boolean. \n\nYou can also use types that are installed with plugins.\nSome plugins, such as those for tables, may export an array type. Since it's not possible to store arrays directly within other arrays, you first need to wrap them in an object.\n\nExample: images\n\nTo add images to Portable Text, append a new type object to the array as such:\n\nexport default {\n  name: 'content',\n  type: 'array',\n  title: 'Content',\n  of: [\n    {\n      type: 'block'\n    },\n    {\n      type: 'image'\n    }\n  ]\n}\n\nThis configuration will add an insert menu with Image as the only option:\n\nThe insert image image option is added to the toolbar\n\nSelecting an image inserts the block with a preview in the Portable Text editor. You can drag the image and drop it in its designated position; you can also edit it by double-clicking the preview box or by selecting the edit option from the kebab menu:\n\nEdit or delete a custom block\n\nThe Portable Text data structure for this example looks like the following:\n\n[\n  {\n    \"style\": \"normal\",\n    \"_type\": \"block\",\n    \"markDefs\": [],\n    \"_key\": \"09cc5f099d3b\",\n    \"children\": [\n      {\n        \"_type\": \"span\",\n        \"_key\": \"09cc5f099d3b0\",\n        \"text\": \"Kokos is a miniature schnauzer.\",\n        \"marks\": []\n      }\n    ]\n  },\n  {\n    \"_type\": \"image\",\n    \"_key\": \"a5e9155ee3f5\",\n    \"asset\": {\n      \"_type\": \"reference\",\n      \"_ref\": \"image-61991cfbe9182124c18ee1829c07910faadd100e-2048x1366-png\"\n    }\n  },\n  {\n    \"style\": \"normal\",\n    \"_type\": \"block\",\n    \"markDefs\": [],\n    \"_key\": \"54145e9cb006\",\n    \"children\": [\n      {\n        \"_type\": \"span\",\n        \"_key\": \"54145e9cb0060\",\n        \"text\": \"Kokos is a good dog!\",\n        \"marks\": []\n      }\n    ]\n  }\n]\n\nThe image has its object structure, where asset references the asset’s document. While you can derive the image URL from its _id (corresponding to the _ref value in the code above), you can also join the asset document using select in GROQ:\n\n*[_type == \"post\"]{\n  ...,\n  content[]{\n    ...,\n    _type == \"image\" => {\n      ...,\n      asset->\n    }\n  }\n}\nExample: code input\n\nOur documentation features many code blocks. They are custom blocks that we added to our editor. You can install the code input as a plugin using the Sanity CLI:\n\nnpm i @sanity/code-input\n# OR\nyarn add @sanity/code-input\n\nOnce installed and configured, you can add the code block to the editor for Portable Text configuration:\n\nexport default {\n  name: 'content',\n  type: 'array',\n  title: 'Content',\n  of: [\n    {\n      type: 'block'\n    },\n    {\n      type: 'image'\n    },\n    {\n      type: 'code'\n    }\n  ]\n}\n\nCode (to change the default title to a different one, add title: \"<my-custom-title>\" to the same object) is now available as a selection in the insert menu. Inserting a code block produces a preview and a code editor:\n\nThe code editor with some schema code in JavaScript\n\nYou can set more options for the code input.\n\nHow to add a custom YouTube block\nConfiguring styles for text blocks\n\nOut of the box, the Portable Text editor includes the following styles: normal, h1–h6, and blockquote. By default, they map to HTML; but a style can be an arbitrary value.\n\n// The default set of styles\nexport default {\n  name: 'content',\n  title: 'Content',\n  type: 'array',\n  of: [\n    {\n      type: 'block',\n      styles: [\n        {title: 'Normal', value: 'normal'},\n        {title: 'H1', value: 'h1'},\n        {title: 'H2', value: 'h2'},\n        {title: 'H3', value: 'h3'},\n        {title: 'H4', value: 'h4'},\n        {title: 'H5', value: 'h5'},\n        {title: 'H6', value: 'h6'},\n        {title: 'Quote', value: 'blockquote'}\n      ]\n    }\n  ]\n}\n\nIf you want to tie Portable Text to specific use cases, that is possible: maybe you are using Sanity to work with content that will be transformed into InDesign’s XML format where you have ready-made templates with their style names. Or perhaps your organization has a BEM-based CSS design system, and you want to embed certain class names in the rich text data.\n\nThe default style configuration in the editor\n\nWe recommend keeping the configuration to a reasonably abstract level and following known, established conventions. If you plan to use our Portable Text tooling for rendering web pages, you should probably stay closer to naming conventions in HTML.\n\nTo override the default configuration for styles, add the style key and set an array of title/value objects:\n\nexport default {\n  name: 'content',\n  title: 'Content',\n  type: 'array',\n  of: [\n    {\n      type: 'block',\n      styles: [\n        { title: 'Normal', value: 'normal' },\n        { title: 'Heading 2', value: 'h2' },\n        { title: 'Quote', value: 'blockquote' },\n        { title: 'Hidden', value: 'blockComment' }\n      ]\n    }\n  ]\n}\n\nHere we have set 4 possible styles. The 3 first are from the default settings and are parsed in HTML to <p>, <h2>, and <blockquote>.\n\nblockComment is an arbitrary style that we set because we plan to make it possible for editors to hide selected blocks of text from rendering, while keeping them available in the source code as block comments.\n\nWant to style the blocks in the editor? Read more →\n\nEditor with style configuration\nConfiguring lists for text blocks\n\nThe editor supports two types of lists: bullet (unordered) and number (ordered). If your block type doesn't contain a lists definition, your editor features both a bullet list and a numbered list option:\n\nBullet and numbered lists\n\nThe default is the equivalent of explicitly naming both:\n\nYou can override the default by naming the lists you want. If you leave the array empty, you disable lists altogether:\n\n// The default set of styles\nexport default {\n  name: 'content',\n  title: 'Content',\n  type: 'array',\n  of: [\n    {\n      type: 'block',\n      lists: [\n        {title: 'Bullet', value: 'bullet'},\n        {title: 'Numbered', value: 'number'}\n      ] // yes please, both bullet and numbered\n    }\n  ]\n}\n// The default set of styles\nexport default {\n  name: 'content',\n  title: 'Content',\n  type: 'array',\n  of: [\n    {\n      type: 'block',\n      lists: [] // no lists, thanks\n    }\n  ]\n}\n\nAlso, you decide what goes into the title: {title: 'Prioritized', value: 'number'} works equally well!\n\nConfiguring marks for inline text\n\nPortable Text enables marks to label inline text with additional data. There are two types of marks: decorators and annotations.\nDecorators are marks as simple string values, while annotations are keys to a data structure. Annotations are a powerful feature of Portable Text in combination with Sanity’s backend, because they allow embedding complex data structures and references in running text.\n\nDecorators\n\nDecorators work similarly to styles, but they are applied to spans, that is, inline text. The default configurations are strong, em, code, underline, and strike-through. If you want to disable some of these and set your own, you do that by adding an array to the decorators key, under marks:\n\nexport default {\n  name: 'content',\n  title: 'Content',\n  type: 'array',\n  of: [\n    {\n      type: 'block',\n      marks: {\n        decorators: [\n          {title: 'Strong', value: 'strong'},\n          {title: 'Emphasis', value: 'em'},\n          {title: 'Code', value: 'code'}\n        ]\n      }\n    }\n  ]\n}\n\nDecorators are displayed as icons in the toolbar. This configuration looks like this:\n\nToolbar with custom decorator configuration\nAnnotations\n\nAnnotations enable embedding rich content data in inline text. An example can be a reference to another document, typically used for internal linking. A complete guide with front-end implementation can be found here.\n\nTo add an internal link annotation, configure the Portable Text schema like this:\n\nexport default {\n  name: 'content',\n  title: 'Content',\n  type: 'array',\n  of: [\n    {\n      type: 'block',\n      marks: {\n        decorators: [\n          // ...\n        ],\n        annotations: [\n          {\n            name: 'internalLink',\n            type: 'object',\n            title: 'Internal link',\n            fields: [\n              {\n                name: 'reference',\n                type: 'reference',\n                title: 'Reference',\n                to: [\n                  { type: 'post' },\n                  // other types you may want to link to\n                ]\n              }\n            ]\n          }\n        ]\n      }\n    }\n  ]\n}\nGotcha\n\nIf you plan to use Sanity’s GraphQL API, you should hoist internalLink as a schema type, and use type: 'internalLink' as the annotation, instead of the anonymous example above.\n\nLearn more about using GraphQL with Sanity here.\n\nThe annotations are displayed in the toolbar as question mark icons if none is set.\nFor more information on editing toolbar icons, see Customizing the Portable Text editor.\n\nReference modal for internal link annotation\n\nThe corresponding Portable Text data structure looks like this:\n\n[\n  {\n    \"_key\": \"da9dc50335a0\",\n    \"_type\": \"block\",\n    \"children\": [\n      {\n        \"_key\": \"da9dc50335a00\",\n        \"_type\": \"span\",\n        \"marks\": [\n          \"5b86c1132a66\"\n        ],\n        \"text\": \"This is an internal link\"\n      },\n      {\n        \"_key\": \"da9dc50335a01\",\n        \"_type\": \"span\",\n        \"marks\": [],\n        \"text\": \".\"\n      }\n    ],\n    \"markDefs\": [\n      {\n        \"_key\": \"5b86c1132a66\",\n        \"_type\": \"internalLink\",\n        \"reference\": {\n          \"_ref\": \"1dfa4e95-9f92-4e13-901b-1a769724e23c\",\n          \"_type\": \"reference\"\n        }\n      }\n    ],\n    \"style\": \"normal\"\n  }\n]\nFurther reading\nFor more information about decorators, annotations, and customizing block content, see:\nCustomizing block content\nCustomizing the Portable Text Editor\n\nUPDATED ON OCTOBER 9, 2023\n\nWas this article helpful?\nNot at all\nSomewhat\nAbsolutely!\nI want to suggest an improvement to this article.\nPAGE CONTENT\nMinimal configuration example\nAdd custom blocks\nExample: images\nExample: code input\nConfiguring styles for text blocks\nConfiguring lists for text blocks\nConfiguring marks for inline text\nDecorators\nAnnotations\nFurther reading\nProduct\nSanity Studio\nAPIs\nContent Lake\nSecurity & Compliance\nCompare Sanity \nResources\nDocumentation\nBlog\nResource library\nCase Studies\nGuides \nTemplates \nPartners \nExplainers \nCMS \nCompany\nContact Sales\nEnterprise\nCareers\nTerms of Service\nPrivacy Policy\nAccessibility Statement\nStay connected\nGitHub\nSlack\nTwitter\nYouTube\nStack Overflow\nBlog RSS\nNewsletter\n©Sanity 2023\nCookie preferences"
  },
  {
    "title": "Configuring the Presentation tool",
    "url": "https://www.sanity.io/docs/configuring-the-presentation-tool",
    "html": "Skip to content\nJoin live – Get insights, tips, + Q&A from Sanity developers on our latest releases \nProduct\nPLATFORM\nSanity Studio\n\nFlexible editing environment\n\nAPIs\n\nConnect to anything\n\nContent Lake\n\nReal-time database\n\nTry product demo \nFEATURES\nReal-time collaboration\n\nFearlessly work with content\n\nPrecise content querying\n\nTreat content as data with GROQ\n\nLocalization\n\nCoherent messaging across territories\n\nSolutions\nUSE CASES\nE-commerce\n\nRicher shopping experiences\n\nMarketing sites\n\nControl your story\n\nProducts & services\n\nInnovate and automate\n\nMobile apps\n\nContent backend for every OS\n\nView all \nINTEGRATIONS\nShopify\nMux\nVercel\nNetlify\nAlgolia\nCloudinary\nBigCommerce\nCommerce Layer\nSmartling\nTransifex\nView all \nDevelopers\nLEARN\nDocumentation\nStudio API Reference\nAPI reference\nGuides\nGROQ cheat sheet\nSanity UI\nGet started \nBUILD AND SHARE\nTemplates\nTools and plugins\nSchemas and snippets\nProject showcase\nShare your work\nBrowse Exchange \nFRAMEWORKS\nReact\nVue\nNext.js\nNuxt.js\nSvelte\nRemix\nGatsby\nAstro\nAngular\nEleventy\nView all \nResources\nDISCOVER\nBlog\nResource library\nGlossary\nAgency partners\nBecome a partner\nTechnical support\nTalk to sales \nCASE STUDIES\nPuma\n\nSource of truth for global markets\n\nAether\n\nUnique digital shopping experience\n\nMorning Brew\n\nOmnichannel media distribution\n\nInVision\n\nDelivering exceptional customer experiences\n\nView all \nPOPULAR GUIDES\nHeadless CMS\nStructured content\nContent modeling\nHeadless SEO\nStatic websites\nView all \nEnterprise\nPricing\nLog in\nContact sales\nGet started\nSearch\nOverview\nGetting started\nSanity Studio\nSetup and deployment\nConfiguration\nBlock Content\nNEWVisual Editing\nIntro to Presentation\nConfiguring Presentation\nIntegrating Presentation\nAI Assist\nNEWComments\nCustomization\nWorkflows\nTools\nPlugins\nCommand Line Interface\nMigrating from v2\nContent Lake\nBuild with Sanity\nAccess control\nReference\nStudio v2 docs\nConfiguring the Presentation tool\n\nThe Presentation tool enables visual editing with live previews. This is how you set it up with in your studio.\n\nThe Presentation tool for Sanity Studio enables visual editing with live previews. This article walks you through the configuration:\n\nHow to install the Presentation tool in your Studio\nHow to set up the base URL for your preview(s)\nHow to set up and configure document locations to show where a document is used in a presentation\nHow to add support for “preview/draft mode\" in frameworks like Next.js\nPrerequisites\n\nTo use the Presentation tool, you have to upgrade your Studio‘s sanity dependency to v3.20.0 or preferably latest.\n\nTo get the full visual editing and live preview experience in the Presentation tool, you will also need to install support in your front end(s) as well. You can go here to learn more about how to implement this for most JavaScript-based web frameworks.\n\nYou might also want to install rxjs as a dependency to your Studio project to enable real-time document locations with Observables:\n\nnpm install sanity@latest rxjs\nConfiguration\n\nSimilarly to the Structure tool (formerly known as the Desk tool), you add Presentation to your Studio's configuration file (code example below).\n\nBasic configuration\nImport presentationTool from sanity/presentation\nAdd it to the plugins array\nAdd the base URL for your front end to the previewUrl attribute\n// sanity.config.ts\nimport {defineConfig} from 'sanity'\n\nimport {presentationTool} from 'sanity/presentation'\n\n// ...other imports\n\n\n// We recommend configuring the preview location base URL using\n// environment variables to support multiple environments\n\nconst SANITY_STUDIO_PREVIEW_URL = (\n\n\tprocess.env.SANITY_STUDIO_PREVIEW_URL\n\n\t|| 'http://localhost:3000'\n\n)\n\n\nexport default defineConfig({\n  // Your configuration for the project\n  ...\n\n  plugins: [\n    // Add 'presentationTool' to the 'plugins' array\n\n    presentationTool({\n\n      // Required: set the base URL to the preview location in the front end\n\n      previewUrl: SANITY_STUDIO_PREVIEW_URL,\n\n    }),\n\n    // ...other plugins\n  ],\n})\nConfiguration reference\n\nThe Presentation tool takes the following configuration attributes:\n\nREQUIRED\npreviewUrl\nstring\n\nThe relative or absolute path to the base location in the front end you want to enable in the Presentation tool. If your Studio shares the same base URL as your front end, you can use relative URLs. We recommend implementing this as an environment variable to make it easier to work in development and production.\n\nExamples:\n\nhttp://localhost:3000\nhttps://your-production-url.com/\n/\n\nYou may also configure the Presentation tool to handle enabling/disable draft automatically.\n\nicon\nReact component\n\nSets an icon to represent the Presentation tool in the Studio's navigation bar. To use Sanity icons, install the @sanity/icons package.\n\nname\nstring\n\nSets a name for the Presentation tool. It's not visually represented in the Studio UI, but it’s included in the Studio's URL for the Presentation tool.\n\nThis is useful if you want to implement multiple instances of Presentation, for example, for different channels, domains, or preview environments.\n\nDefault value: presentation\n\nExamples: presentation, preview, website, app\n\ntitle\nstring\n\nSets the title that is displayed in the Studio's navigation bar. Keep it short and descriptive to help editorial users understand what they can do with the tool.\n\nDefault value: Presentation\n\nExamples: Website Preview, Newsletter Preview, US Site Preview\n\nlocate\nObservable<DocumentLocationsState>\n\nThis takes a callback function that returns a list of document locations. These are typically the URLs where content from a selected document is used.\n\nFor more information about the locate callback, see Configure Location resolver below.\n\nConfiguring Document Locations\n\nTypically, a page on your front end will contain content from multiple documents when using structured content. For example, a marketing landing page may include content from a landing page document as well as content from referenced products, people, shared content modules, and more. You can also save time and effort by having documents spanning multiple locations across several digital channels.\n\nThe Document Locations Resolver generates a list of the locations where a document is used. This helps editors understand how a change in a single document can affect the different places it is used.\n\nThe Locations UI showing where a product has been used\n\nThe locate callback property is a resolver that takes a document id and type parameters, and returns a state object that contains the locations that can be previewed for a given document.\n\nBasic example\n\nThe example below shows you how to implement document locations for a simple blog post document type where its id is used as part of the URL scheme:\n\n// locate.ts\n\nexport const locate: DocumentLocationResolver = ({id, type}) => {\n\t// Set up locations for documents of the type \"post\"\n  if (type === 'post') {\n    return {\n      // '/post' is an example path.\n      // Replace it with an actual relative or absolute value\n      // depending on your environment\n      locations: [\n        {title: `Post #${id}`, href: `/post/${id}`},\n        {title: 'Posts', href: '/posts'},\n      ],\n    }\n  }\n  return null\n}\n\nWe recommend containing the Document Location Resolver in a dedicated file to reduce clutter in your Studio configuration file. In the example above, it's exported as a named JavaScript variable so it can be imported to the studio configuration file like this:\n\n// sanity.config.ts\nimport {defineConfig} from 'sanity'\nimport {presentationTool} from 'sanity/presentation'\n\nimport {locate} from './locate'\n\n// ...other imports\n\n\nexport default defineConfig({\n  // ...configuration for the project\n\n  plugins: [\n    presentationTool({\n      previewUrl: SANITY_STUDIO_PREVIEW_URL,\n\n      locate\n\n    }),\n    // ...other plugins\n  ],\n})\nGenerate locations based on document data\n\nMost often, URLs are built up from document fields (like slug.current). The callback passes a second context parameter with a function that has methods for interacting with documents in real time. In most cases, you will call context.documentStore.listenQuery with a GROQ query that returns the queried documents as an Observable.\n\nWe recommend installing rxjs as a dependency in your Studio project to make it easier to interact with the Observable object returned from listenQuery:\n\nnpm install rxjs\n\nNow, you can use the parameters you get from the selected document to access the document data and generate the URLs based on it. Below is an example of how to do this for a blog post document where the slug field is used for URLs:\n\n// locate.ts\nimport { DocumentLocationResolver } from \"sanity/presentation\";\nimport { map } from \"rxjs\";\n\n// Pass 'context' as the second argument\nexport function locate(params, context): DocumentLocationResolver {\n  // Set up locations for post documents\n  if (params.type === \"post\") {\n    // Subscribe to the latest slug and title\n    const doc$ = context.documentStore.listenQuery(\n      `*[_id == $id][0]{slug,title}`,\n      params,\n      { perspective: \"previewDrafts\" } // returns a draft article if it exists\n    );\n    // Return a streaming list of locations\n    return doc$.pipe(\n      map((doc) => {\n        // If the document doesn't exist or have a slug, return null\n        if (!doc || !doc.slug?.current) {\n          return null;\n        }\n        return {\n          locations: [\n            {\n              title: doc.title || \"Untitled\",\n              href: `/post/${doc.slug.current}`,\n            },\n            {\n              title: \"Posts\",\n              href: \"/\",\n            },\n          ],\n        };\n      })\n    );\n  }\n  return null;\n}\nShow all locations where a document is being used\n\nTypically, with structured content, content from a document might be used in multiple locations by means of references. With GROQ, you can query for all documents that refer to a specific document (or use other join logic) and use that to build a list of locations for where a document is being used.\n\nBelow is an example showing how to build a list of locations for a \"person\" document that is being referred to by a \"post\" document as its author:\n\n// locate.ts\nimport {\n  DocumentLocationResolver,\n  DocumentLocationsState,\n} from 'sanity/presentation'\nimport { map, Observable } from 'rxjs'\n\nexport const locate: DocumentLocationResolver = (params, context) => {\n  if (params.type === 'post' || params.type === 'person') {\n    /* \n      Listen to all changes in the selected document \n      and all documents that reference it\n    */\n    const doc$ = context.documentStore.listenQuery(\n      `*[_id==$id || references($id)]{_type,slug,title, name}`,\n      params,\n      { perspective: 'previewDrafts' },\n    ) as Observable<\n      | {\n          _type: string\n          slug?: { current: string }\n          title?: string | null\n          name?: string | null\n        }[]\n      | null\n    >\n    // pipe the real-time results to RXJS's map function\n    return doc$.pipe(\n      map((docs) => {\n        if (!docs) {\n          return {\n            message: 'Unable to map document type to locations',\n            tone: 'critical',\n          } satisfies DocumentLocationsState\n        }\n        // Generate all the locations for person documents\n        const personLocations = docs\n          .filter(({ _type, slug }) => _type === 'person' && slug?.current)\n          .map(({ name, slug }) => ({\n            title: name || 'Name missing',\n            href: `/authors/${slug.current}`,\n          }))\n\n        // Generate all the locations for post documents\n        const postLocations: Array<any> = docs\n          .filter(({ _type, slug }) => _type === 'post' && slug?.current)\n          .map(({ title, slug }) => ({\n            title: title || 'Name missing',\n            href: `/posts/${slug.current}`,\n          }))\n\n        return {\n          locations: [\n            ...personLocations,\n            ...postLocations,\n            // Add a link to the \"All posts\" page when there are post documents\n            postLocations.length > 0 && {\n              title: 'All posts',\n              href: '/posts',\n            },\n            // Add a link to the \"All authors\" page when there are person documents\n            personLocations.length > 0 && {\n              title: 'All authors',\n              href: '/authors',\n            },\n          ].filter(Boolean),\n        } satisfies DocumentLocationsState\n      }),\n    )\n  }\n\n  return null\n}\nDocument Location Resolver Reference\n\nIn addition to the example above, the Document Location Resolver can return customized top-level messages and visual cues:\n\nmessage\nstring\n\nOverride the top-level text in the document locations UI. Useful if you want to customize the string (replace \"pages\") or display warnings.\n\nDefault value: Used on ${number} pages\n\nExamples:\n\nUnable to resolve locations for this document\nUsed in ${docs.length} email campaign${docs.length === 1 ?? 's'}\ntone\n'positive' | 'caution' | 'critical'\n\nGives the document locations UI a background color. It can be used to signal criticality.\n\nDefault: positive\n\nlocations\nDocumentLocation[]\n\nAn array of document locations objects with title and href properties. The href can be absolute or relative and will open in the Presentation tool.\n\nUPDATED ON NOVEMBER 16, 2023\n\nWas this article helpful?\nNot at all\nSomewhat\nAbsolutely!\nI want to suggest an improvement to this article.\nPAGE CONTENT\nPrerequisites\nConfiguration\nBasic configuration\nConfiguration reference\nConfiguring Document Locations\nBasic example\nGenerate locations based on document data\nShow all locations where a document is being used\nDocument Location Resolver Reference\nProduct\nSanity Studio\nAPIs\nContent Lake\nSecurity & Compliance\nCompare Sanity \nResources\nDocumentation\nBlog\nResource library\nCase Studies\nGuides \nTemplates \nPartners \nExplainers \nCMS \nCompany\nContact Sales\nEnterprise\nCareers\nTerms of Service\nPrivacy Policy\nAccessibility Statement\nStay connected\nGitHub\nSlack\nTwitter\nYouTube\nStack Overflow\nBlog RSS\nNewsletter\n©Sanity 2023\nCookie preferences"
  },
  {
    "title": "Presentation",
    "url": "https://www.sanity.io/docs/presentation",
    "html": "Skip to content\nJoin live – Get insights, tips, + Q&A from Sanity developers on our latest releases \nProduct\nPLATFORM\nSanity Studio\n\nFlexible editing environment\n\nAPIs\n\nConnect to anything\n\nContent Lake\n\nReal-time database\n\nTry product demo \nFEATURES\nReal-time collaboration\n\nFearlessly work with content\n\nPrecise content querying\n\nTreat content as data with GROQ\n\nLocalization\n\nCoherent messaging across territories\n\nSolutions\nUSE CASES\nE-commerce\n\nRicher shopping experiences\n\nMarketing sites\n\nControl your story\n\nProducts & services\n\nInnovate and automate\n\nMobile apps\n\nContent backend for every OS\n\nView all \nINTEGRATIONS\nShopify\nMux\nVercel\nNetlify\nAlgolia\nCloudinary\nBigCommerce\nCommerce Layer\nSmartling\nTransifex\nView all \nDevelopers\nLEARN\nDocumentation\nStudio API Reference\nAPI reference\nGuides\nGROQ cheat sheet\nSanity UI\nGet started \nBUILD AND SHARE\nTemplates\nTools and plugins\nSchemas and snippets\nProject showcase\nShare your work\nBrowse Exchange \nFRAMEWORKS\nReact\nVue\nNext.js\nNuxt.js\nSvelte\nRemix\nGatsby\nAstro\nAngular\nEleventy\nView all \nResources\nDISCOVER\nBlog\nResource library\nGlossary\nAgency partners\nBecome a partner\nTechnical support\nTalk to sales \nCASE STUDIES\nPuma\n\nSource of truth for global markets\n\nAether\n\nUnique digital shopping experience\n\nMorning Brew\n\nOmnichannel media distribution\n\nInVision\n\nDelivering exceptional customer experiences\n\nView all \nPOPULAR GUIDES\nHeadless CMS\nStructured content\nContent modeling\nHeadless SEO\nStatic websites\nView all \nEnterprise\nPricing\nLog in\nContact sales\nGet started\nSearch\nOverview\nGetting started\nSanity Studio\nSetup and deployment\nConfiguration\nBlock Content\nNEWVisual Editing\nIntro to Presentation \nConfiguring Presentation\nIntegrating Presentation\nAI Assist\nNEWComments\nCustomization\nWorkflows\nTools\nPlugins\nCommand Line Interface\nMigrating from v2\nContent Lake\nBuild with Sanity\nAccess control\nReference\nStudio v2 docs\nPresentation\n\nA dedicated, preview-first space for content creation.\n\nPresentation is a tool in the Sanity Studio that lets you work with content directly through preview — be it a website, in-store display, or anything you can point a browser at.\n\nYou can see what parts of the page are editable and click directly through to the right field to make your change. This complements the Structure tool (previously named “Desk”), where you find the right field through search, following references, and expanding modals for nested fields.\n\nPresentation saves time when working with visually oriented layouts and complex content models. Using Presentation gets you right to where you want to edit.\n\nYou're probably using structured content – so how do you find the many places a document is re-used? The Document Locations Resolver lets developers declare where a document is used in your front-end presentation(s). This makes content edits predictable and safe.\n\nPresentation lets you save effort by using structured content extensively (without the penalty of figuring out where documents are used).\n\nPresentation offers the following features for content creators:\n\nInteractive, navigable in-Studio preview\nLive-as-you-edit preview updates\nOption to switch between draft and published mode to check your changes against what's currently live\nComments for in-context feedback and reviews, with notifications and status.\nOverview of content reuse across front ends\nWide and narrow views to see your work on different devices\nDeep link to edit states for bookmarking and collaboration\nScroll syncing between preview display and content fields in the document editor\nGetting started with Presentation\n\nFirst things first, start by deciding which front ends you want to support with Presentation in your Sanity Studio—you can start with one, like a microsite, or go all in across many surfaces! Because Presentation reflects specific front ends, you'll have a separate tool for each (with a clear view of how content is reused across them!)\n\nPresentation consists of several underlying technologies working together. They should be implemented in sequence.\n\n1. Configure the Presentation Tool in your Studio\n\nThe Presentation tool comes as a part of your core Sanity Studio installation. A developer points it at any given URL where previews are enabled (you can create multiple Presentation tools in one Studio to support different root URLs), and implements document locations to let you see where documents are being used and preview them.\n\nConfigure the presentation tool\n\n2. Make your front end(s) Presentation-aware\n\nFor Presentation to show clickable overlays it needs to know where the content comes from; under the hood Content Source Maps gives your front end this extra information. We offer tooling called Loaders to make it easier to support live previews and click-to-edit overlays in your front end, regardless of the framework being used.\n\nSet up Loaders and annotate your site\n\nIs there more?\n\nFortunately, that's it. For large, existing sites this might be a few days of effort—which will more than pay for itself in editorial time saved. You don't need to do everything at once. Start with page-building routes or particularly complex content models.\n\nFor greenfield builds the story is better as mapping out Locations and affordances offers extra benefit: in addition to editorial time savings, it will also make getting around faster for developers during the build. Wonder if you've broken other locations a document is used? Now you can easily go check.\n\nWant to know more about Presentation? Check out the:\n\nReady-to-run templates for Next.js and Remix\nGuide: Setting up Presentation with Remix\nCaveats\n\nAlready using preview-kit? You don't need to migrate to Loaders yet. We've made preview-kit backward-compatible with Presentation. It will just work. You won't get the fastest real-time previews or the switch between Published and Drafts documents. If you want to migrate to Loaders, you should look at the guides and docs above.\n\nUsing GraphQL? Content Source Maps is supported in GraphQL, and we are working on making Presentation available for solutions that use GraphQL from Sanity.\n\nNeed Previews outside of Presentation? If you need standalone previews or want to use split panes? You should keep using preview-kit. For the time being Loaders only supports authentication within the Studio context. Consider if you need your previews to be standalone though — maybe you're good with Presentation inside the studio where it sits next to your comments and workflows?\n\nUPDATED ON NOVEMBER 17, 2023\n\nWas this article helpful?\nNot at all\nSomewhat\nAbsolutely!\nI want to suggest an improvement to this article.\nPAGE CONTENT\nGetting started with Presentation\n1. Configure the Presentation Tool in your Studio\n2. Make your front end(s) Presentation-aware\nIs there more?\nCaveats\nProduct\nSanity Studio\nAPIs\nContent Lake\nSecurity & Compliance\nCompare Sanity \nResources\nDocumentation\nBlog\nResource library\nCase Studies\nGuides \nTemplates \nPartners \nExplainers \nCMS \nCompany\nContact Sales\nEnterprise\nCareers\nTerms of Service\nPrivacy Policy\nAccessibility Statement\nStay connected\nGitHub\nSlack\nTwitter\nYouTube\nStack Overflow\nBlog RSS\nNewsletter\n©Sanity 2023\nCookie preferences"
  },
  {
    "title": "Customizing the Portable Text Editor",
    "url": "https://www.sanity.io/docs/customizing-the-portable-text-editor",
    "html": "Skip to content\nJoin live – Get insights, tips, + Q&A from Sanity developers on our latest releases \nProduct\nPLATFORM\nSanity Studio\n\nFlexible editing environment\n\nAPIs\n\nConnect to anything\n\nContent Lake\n\nReal-time database\n\nTry product demo \nFEATURES\nReal-time collaboration\n\nFearlessly work with content\n\nPrecise content querying\n\nTreat content as data with GROQ\n\nLocalization\n\nCoherent messaging across territories\n\nSolutions\nUSE CASES\nE-commerce\n\nRicher shopping experiences\n\nMarketing sites\n\nControl your story\n\nProducts & services\n\nInnovate and automate\n\nMobile apps\n\nContent backend for every OS\n\nView all \nINTEGRATIONS\nShopify\nMux\nVercel\nNetlify\nAlgolia\nCloudinary\nBigCommerce\nCommerce Layer\nSmartling\nTransifex\nView all \nDevelopers\nLEARN\nDocumentation\nStudio API Reference\nAPI reference\nGuides\nGROQ cheat sheet\nSanity UI\nGet started \nBUILD AND SHARE\nTemplates\nTools and plugins\nSchemas and snippets\nProject showcase\nShare your work\nBrowse Exchange \nFRAMEWORKS\nReact\nVue\nNext.js\nNuxt.js\nSvelte\nRemix\nGatsby\nAstro\nAngular\nEleventy\nView all \nResources\nDISCOVER\nBlog\nResource library\nGlossary\nAgency partners\nBecome a partner\nTechnical support\nTalk to sales \nCASE STUDIES\nPuma\n\nSource of truth for global markets\n\nAether\n\nUnique digital shopping experience\n\nMorning Brew\n\nOmnichannel media distribution\n\nInVision\n\nDelivering exceptional customer experiences\n\nView all \nPOPULAR GUIDES\nHeadless CMS\nStructured content\nContent modeling\nHeadless SEO\nStatic websites\nView all \nEnterprise\nPricing\nLog in\nContact sales\nGet started\nSearch\nOverview\nGetting started\nSanity Studio\nSetup and deployment\nConfiguration\nBlock Content\nConfiguring the Portable Text editor\nCustomizing the Portable Text Editor\nCustomizing block content\nNEWVisual Editing\nAI Assist\nNEWComments\nCustomization\nWorkflows\nTools\nPlugins\nCommand Line Interface\nMigrating from v2\nContent Lake\nBuild with Sanity\nAccess control\nReference\nStudio v2 docs\nChangelog\nCustomizing the Portable Text Editor\n\nCustomization guidelines and examples to tailor the Portable Text editor to your needs.\n\nSanity Studio Portable Text editor is customizable so that it can fit different editorial needs. You can configure and tailor several different editors throughout the studio.\nFor more information about configuring the editor, see Configuring the Portable Text Editor.\n\nIn general, customization works by passing React components to the schema definitions of content types that use Portable Text. Alternatively, it's also possible to pass strings.\n\nToolbar icons and span rendering\n\nWhen you configure custom markers, that is, decorators (simple values) and annotations (rich data structures), they are displayed as icons in the toolbar. The default icon is a question mark. You can customize it to display a different icon.\n\nIf you add custom decorators and annotations, you may want to control their visual presentation in the editor. By default, decorators are invisible, whereas annotations have a gray background and a dotted underline.\n\nDecorators\n\nSome often-used decorators, such as strong, emphasis, and code, feature rendering out of the box.\n\nFor example, let’s say you created a decorator to highlight text using the following configuration:\n\nexport default {\n  name: 'content',\n  title: 'Content',\n  type: 'array',\n  of: [\n    {\n      type: 'block',\n      marks: {\n        decorators: [\n          { title: 'Strong', value: 'strong' },\n          { title: 'Emphasis', value: 'em' },\n          { title: 'Code', value: 'code' },\n\n          { title: 'Highlight', value: 'highlight' }\n\n        ]\n      }\n    }\n  ]\n}\n\nNow, add a custom toolbar icon by passing in an anonymous function that returns H as a string to .icon:\n\n// RichTextEditor.jsx\nexport default {\n  name: 'content',\n  title: 'Content',\n  type: 'array',\n  of: [\n    {\n      type: 'block',\n      marks: {\n        decorators: [\n          { title: 'Strong', value: 'strong' },\n          { title: 'Emphasis', value: 'em' },\n          { title: 'Code', value: 'code' },\n          { \n\n            title: 'Highlight',\n\n            value: 'highlight',\n\n            icon: () => 'H'\n\n          }\n        ]\n      }\n    }\n  ]\n}\n\nThe string is rendered in the decorator button in the toolbar:\n\nToolbar with custom decorator button\n\nYou can also pass a JSX component directly in the schema, or via an import.\nThe following example adds simple inline styling to a span holding the character H.\n\n// RichTextEditor.js\nimport React from 'react'\n\n\nconst HighlightIcon = () => (\n\n  <span style={{fontWeight: 'bold'}}>H</span>\n\n  )\n\n\nexport default {\n  name: 'content',\n  title: 'Content',\n  type: 'array',\n  of: [\n    {\n      type: 'block',\n      marks: {\n        decorators: [\n          { title: 'Strong', value: 'strong' },\n          { title: 'Emphasis', value: 'em' },\n          { title: 'Code', value: 'code' },\n          {\n\n            title: 'Highlight',\n\n            value: 'highlight',\n\n            icon: HighlightIcon\n\n          }\n        ]\n      }\n    }\n  ]\n}\n\nThe next step is to render the actual highlighted text in the editor. We do this by passing the props into a React component and wrapping them in a span with some styling.\n\n// RichTextEditor.js\nimport React from 'react'\n\nconst HighlightIcon = () => (\n  <span style={{ fontWeight: 'bold' }}>H</span>\n)\n\nconst HighlightDecorator = props => (\n\n  <span style={{ backgroundColor: 'yellow' }}>{props.children}</span>\n\n)\n\n\nexport default {\n  name: 'content',\n  title: 'Content',\n  type: 'array',\n  of: [\n    {\n      type: 'block',\n      marks: {\n        decorators: [\n          { title: 'Strong', value: 'strong' },\n          { title: 'Emphasis', value: 'em' },\n          { title: 'Code', value: 'code' },\n          {\n            title: 'Highlight',\n            value: 'highlight',\n            icon: HighlightIcon,\n\n            component: HighlightDecorator\n\n          }\n        ]\n      }\n    }\n  ]\n}\n\nThe rendered presentation in the editor is a yellow background for highlighted text:\n\nEditor with custom render and icon for the highlight decorator\nProtip\n\nWhen you create your custom decorators, you can keep all, some, or none of the built-in decorators.\n\nThese are the built-in decorators:\n\n{ \"title\": \"Strong\", \"value\": \"strong\" },\n{ \"title\": \"Emphasis\", \"value\": \"em\" },\n{ \"title\": \"Code\", \"value\": \"code\" },\n{ \"title\": \"Underline\", \"value\": \"underline\" },\n{ \"title\": \"Strike\", \"value\": \"strike-through\" }\n\nMake sure you include those you intend to keep.\n\nAnnotations\n\nCustomizing annotations works much in the same way as decorations: you pass an icon and a renderer in the schema definition.\n\nA common use case is to have an annotation for an internal reference, in addition to a link with an external URL.\nYou can customize the editor to display a custom icon for the internal link, and a renderer that helps recognize external links when they are inline in the text.\n\nThe following example imports an icon from the @sanity/icons-package. In the example, you configure a user icon to represent internal references to a person type.\n\n// RichTextEditor.js\n\nimport { UserIcon } from '@sanity/icons'\n\n\nexport default {\n  name: 'content',\n  title: 'Content',\n  type: 'array',\n  of: [\n    {\n      type: 'block',\n      marks: {\n        annotations: [\n          {\n            name: 'link',\n            type: 'object',\n            title: 'link',\n            fields: [\n              {\n                name: 'url',\n                type: 'url'\n              }\n            ]\n          },\n          {\n            name: 'internalLink',\n            type: 'object',\n            title: 'Internal link',\n\n            icon: UserIcon,\n\n            fields: [\n              {\n                name: 'reference',\n                type: 'reference',\n                to: [\n                  { type: 'person' }\n                  // other types you may want to link to\n                ]\n              }\n            ]\n          }\n        ]\n      }\n    }\n  ]\n}\n\nNow the user icon replaces the default question mark icon in the toolbar:\n\nThe editor with a custom user icon for the internal link annotation\nCustom components\n\nThe next step is to create a custom renderer for external links. The following example appends an \"arrow out of a box\" icon to mark these links. To do this, you pass a small React component.\n\nIn the /schemas/components directory, create a file and name it ExternalLinkRenderer.tsx.\n\n// ExternalLinkRenderer.js\nimport React from 'react'\nimport { LaunchIcon } from '@sanity/icons'\n\nconst ExternalLinkRenderer = props => (\n  <span>\n    {props.renderDefault(props)}\n    <a contentEditable={false} href={props.value.href}>\n      <LaunchIcon />\n    </a>\n  </span>\n)\n\nexport default ExternalLinkRenderer\n\n\nThen, import the following component, and pass it to components.annotation in the schema type:\n\n// RichTextEditor.js\nimport { UserIcon } from '@sanity/icons'\n\nimport ExternalLinkRenderer from './components/ExternalLinkRenderer'\n\n\nexport default {\n  name: 'content',\n  title: 'Content',\n  type: 'array',\n  of: [\n    {\n      type: 'block',\n      marks: {\n        annotations: [\n          {\n            name: 'link',\n            type: 'object',\n            title: 'link',\n            fields: [\n              {\n                name: 'url',\n                type: 'url'\n              }\n            ],\n            components: {\n\n              annotation: ExternalLinkRenderer\n\n            }\n          },\n          {\n            name: 'internalLink',\n            type: 'object',\n            title: 'Internal link',\n            icon: UserIcon\n            fields: [\n              {\n                name: 'reference',\n                type: 'reference',\n                to: [\n                  { type: 'person' }\n                  // other types you may want to link to\n                ]\n              }\n            ]\n          }\n        ]\n      }\n    }\n  ]\n}\n\nAs a result, external links now look like this:\n\nThe editor with custom renderer for external links.\nBlock styles\n\nThe Portable Text editor ships with a set of styles that translate well to their corresponding HTML ones. However, your front end may not be targeting HTML. While it has always been possible to add and configure block styles, you can now also configure how these styles render in the editor using markup and the styling method of your choice. This means you can tune your editor to be aligned with your organization’s design system.\n\nTo illustrate this point, the following example produces a custom title style using Garamond as the font face with a slightly increased font size. First, define a custom style called title:\n\nexport default {\n  name: 'content',\n  title: 'Content',\n  type: 'array',\n  of: [\n    {\n      type: 'block',\n      styles: [\n        {title: 'Normal', value: 'normal'},\n        {title: 'Title', value: 'title'},\n        {title: 'H1', value: 'h1'},\n        {title: 'H2', value: 'h2'},\n        {title: 'H3', value: 'h3'},\n        {title: 'Quote', value: 'blockquote'},\n      ]\n    }\n  ]\n}\n\nWithout any customization, the block looks exactly like the normal one. To apply a custom style to it, create a renderer in React.\nIt works in the same way as renderers for marks: pass a React component to component. The props of the block contain the element to style and the appropriate styling.\nIn the following example, the React component is added to the configuration file.\n\n// RichTextEditor.js\nimport React from 'react'\n\n\nconst TitleStyle = props => (\n\n  <span style={{fontFamily: 'Garamond', fontSize: '2em'}}>{props.children} </span>\n\n)\n\n\nexport default {\n  name: 'content',\n  title: 'Content',\n  type: 'array',\n  of: [\n    {\n      type: 'block',\n      styles: [\n        {title: 'Normal', value: 'normal'},\n        {title: 'H1', value: 'h1'},\n        {title: 'H2', value: 'h2'},\n        {title: 'H3', value: 'h3'},\n        {title: 'Quote', value: 'blockquote'},\n        {\n          title: 'Title',\n          value: 'title',\n\n          component: TitleStyle\n\n        },\n      ]\n    }\n  ]\n}\n\nThe component prop applies the custom style to the title block, as it's rendered in the editor:\n\nThe editor with a custom title block style\n\nValidation of annotations\n\nLike other content types, annotations support content validation. Warnings are displayed in the margin and in the document. A pointer activates the annotation modal for the editor. Validations help editors structure the content correctly. It's generally a good idea to involve editors in creating validations and testing the warning messages so that they are helpful for them.\n\nLet's say that you are using the same content for multiple websites. In this case, it's important that internal linking use an annotation with a reference input. This helps prevent accidental deletion of linked content and resolve internal links in the front-end project.\nYou can create a simple validation that takes care of this:\n\nexport default {\n  name: 'content',\n  title: 'Content',\n  type: 'array',\n  of: [\n    {\n      type: 'block',\n      validation: Rule => Rule.regex(/.*damnation.*/gi, { name: 'profanity' }),\n      marks: {\n        annotations: [\n          {\n            name: 'link',\n            type: 'object',\n            title: 'link',\n            fields: [\n              {\n                name: 'url',\n                type: 'url',\n                validation: Rule =>\n                  Rule.regex(\n                    /https:\\/\\/(www\\.|)(portabletext\\.org|sanity\\.io)\\/.*/gi,\n                    {\n                      name: 'internal url',\n                      invert: true\n                    }\n                  ).warning(\n                    `This is not an external link. Consider using internal links instead.`\n                  )\n              }\n            ]\n          },\n          {\n            name: 'internalLink',\n            type: 'object',\n            title: 'Internal link',\n            fields: [\n              {\n                name: 'reference',\n                type: 'reference',\n                to: [\n                  { type: 'post' }\n                  // other types you may want to link to\n                ]\n              }\n            ]\n          }\n        ]\n      }\n    }\n  ]\n}\n\nThe regular expression /https:\\/\\/(www\\.|)(portabletext\\.org|sanity\\.io)\\/.*/i triggers on all URLs that match all the variations of either portabletext.org or sanity.io with some sub-paths (this allows linking to the root domain).\n\nA validation warning for the link annotation in the editor.\nMargin markers\nGotcha\n\nWe recommend avoiding margin markers. Instead, use form components and the Form API.\n\nMargin markers are still supported but will be deprecated in a future release.\n\nIn addition to validation markers, you can also define custom markers displayed in the right margin. You define these markers with the editor's input prop called markers.\n\nMargin markers are objects like this:\n\n{\n  type: 'comment',\n  path: [{_key: 'theBlockKey'}],\n  item: {\n    _type: 'comment',\n    _key: '2f323432r23',\n    body: 'I am commenting this block!'\n  }\n}\n\n\nTo show a custom marker, you must wrap the editor component and create a function that renders the custom markers as needed, and returns a React node (or null):\n\n// renderCustomMarkers.js\nimport React from 'react'\n\nexport default function renderCustomMarkers(markers) {\n  return (\n    <div>\n      {markers.map((marker, index) => {\n        if (marker.type === 'comment') {\n          return <div key={`marker${index}`}>A comment!</div>\n        }\n        return null\n      })}\n    </div>\n  )\n}\n\n\nThen, create a wrapper for the editor input to give the editor the renderCustomMarker prop:\n\n// CustomRichTextEditor.js\nimport React from 'react'\nimport {PortableTextInput} from 'sanity'\nimport renderCustomMarkers from './renderCustomMarkers' // From above example\n\nfunction ArticleBlockEditor (props) {\n  const {value, markers} = props\n  const customMarkers = [\n      {type: 'comment', path: value && value[0] ? [{_key: value[0]._key}] : [], value: 'This must be written better!'}\n    ]\n  const allMarkers = markers.concat(customMarkers) // [...markers, ...customMarkers] works too\n\n  return (\n    <BlockEditor\n      {...props}\n      markers={allMarkers}\n      renderCustomMarkers={renderCustomMarkers}\n    />\n  )\n}\n\nexport default ArticleBlockEditor\n\nFinally, update the schema to use your wrapper component as inputComponent:\n\n// content.js\nimport CustomRichTextEditor from './CustomRichTextEditor.js'\n\nexport default {\n  title: 'Content',\n  name: 'content',\n  type: 'array',\n  inputComponent: CustomRichTextEditor,\n  of: [\n    {type: 'block'}\n  ]\n}\nMargin actions\n\nYou can also define actions for the blocks; actions also render in the right margin, beside markers. Actions render as buttons that initiate an action on the corresponding block. The pattern is the same as custom markers above, the only difference being that the prop key is renderBlockActions. It's a function that gets the block as input, and then returns a React node (or null) for that block.\n\nThe following example defines a margin action that renders a button that inserts a new block with a span that contains the text ”Pong!”:\n\n// marginActions.js\nimport React from 'react'\n\nfunction MarginActions (props) {\n\n  const handleClick = event => {\n    const {insert} = props\n    insert([{\n      _type: 'block',\n      children: [\n        {\n          _type: 'span',\n          text: 'Pong!'\n        }\n      ]\n    }])\n  }\n  return (\n    <button type=\"button\" onClick={handleClick}>Ping</button>\n  )\n}\n\nexport default MarginActions  \n  \n\nTo add the action to the custom rich text editor, import it and add it as a property:\n\n// CustomRichTextEditor.js\nimport React from 'react'\nimport {BlockEditor} from 'sanity'\nimport renderCustomMarkers from './renderCustomMarkers'\nimport marginActions from './marginActions.js'\n\nfunction ArticleBlockEditor (props) {\n  const {value, markers = []} = props\n  const customMarkers = [\n      {type: 'comment', path: value && value[0] ? [{_key: value[0]._key}] : [], value: 'Rephrase this section for clarity!'}\n    ]\n  const allMarkers = markers.concat(customMarkers) // [...markers, ...customMarkers] works too\n\n  return (\n    <BlockEditor\n      {...props}\n      markers={allMarkers}\n      renderCustomMarkers={renderCustomMarkers}\n      renderBlockActions={marginActions}\n    />\n  )\n}\n\nexport default ArticleBlockEditor\nFurther reading\nFor more information about configuring the Portable Text Editor and customizing block content, see:\nConfiguring the Portable Text editor\nCustomizing block content\nForm Components\nForm Components\n\nUPDATED ON OCTOBER 17, 2023\n\nWas this article helpful?\nNot at all\nSomewhat\nAbsolutely!\nI want to suggest an improvement to this article.\nPAGE CONTENT\nToolbar icons and span rendering\nDecorators\nAnnotations\nBlock styles\nValidation of annotations\nMargin markers\nMargin actions\nFurther reading\nProduct\nSanity Studio\nAPIs\nContent Lake\nSecurity & Compliance\nCompare Sanity \nResources\nDocumentation\nBlog\nResource library\nCase Studies\nGuides \nTemplates \nPartners \nExplainers \nCMS \nCompany\nContact Sales\nEnterprise\nCareers\nTerms of Service\nPrivacy Policy\nAccessibility Statement\nStay connected\nGitHub\nSlack\nTwitter\nYouTube\nStack Overflow\nBlog RSS\nNewsletter\n©Sanity 2023\nCookie preferences"
  },
  {
    "title": "Visual Editing",
    "url": "https://www.sanity.io/docs/visual-editing",
    "html": "Skip to content\nJoin live – Get insights, tips, + Q&A from Sanity developers on our latest releases \nProduct\nPLATFORM\nSanity Studio\n\nFlexible editing environment\n\nAPIs\n\nConnect to anything\n\nContent Lake\n\nReal-time database\n\nTry product demo \nFEATURES\nReal-time collaboration\n\nFearlessly work with content\n\nPrecise content querying\n\nTreat content as data with GROQ\n\nLocalization\n\nCoherent messaging across territories\n\nSolutions\nUSE CASES\nE-commerce\n\nRicher shopping experiences\n\nMarketing sites\n\nControl your story\n\nProducts & services\n\nInnovate and automate\n\nMobile apps\n\nContent backend for every OS\n\nView all \nINTEGRATIONS\nShopify\nMux\nVercel\nNetlify\nAlgolia\nCloudinary\nBigCommerce\nCommerce Layer\nSmartling\nTransifex\nView all \nDevelopers\nLEARN\nDocumentation\nStudio API Reference\nAPI reference\nGuides\nGROQ cheat sheet\nSanity UI\nGet started \nBUILD AND SHARE\nTemplates\nTools and plugins\nSchemas and snippets\nProject showcase\nShare your work\nBrowse Exchange \nFRAMEWORKS\nReact\nVue\nNext.js\nNuxt.js\nSvelte\nRemix\nGatsby\nAstro\nAngular\nEleventy\nView all \nResources\nDISCOVER\nBlog\nResource library\nGlossary\nAgency partners\nBecome a partner\nTechnical support\nTalk to sales \nCASE STUDIES\nPuma\n\nSource of truth for global markets\n\nAether\n\nUnique digital shopping experience\n\nMorning Brew\n\nOmnichannel media distribution\n\nInVision\n\nDelivering exceptional customer experiences\n\nView all \nPOPULAR GUIDES\nHeadless CMS\nStructured content\nContent modeling\nHeadless SEO\nStatic websites\nView all \nEnterprise\nPricing\nLog in\nContact sales\nGet started\nSearch\nOverview\nGetting started\nSanity Studio\nSetup and deployment\nConfiguration\nBlock Content\nNEWVisual Editing\nIntro to Presentation\nConfiguring Presentation\nIntegrating Presentation\nAI Assist\nNEWComments\nCustomization\nWorkflows\nTools\nPlugins\nCommand Line Interface\nMigrating from v2\nContent Lake\nBuild with Sanity\nAccess control\nReference\nStudio v2 docs\nVisual Editing\n\nSanity offers a comprehensive suite of visual editing and previewing capabilities. Most recently we launched Presentation for visual editing in the Sanity Studio.\n\nIntroduction to Presentation\nA dedicated, preview-first space for content creation.\nPresentation Configuration\nThe Presentation tool enables visual editing with live previews. This is how you set it up with in your studio.\nLoaders and Overlays \nMake your front end Presentation-aware.\nVercel Visual Editing\nVisual Editing enables content teams to enjoy more intuitive content editing directly from your website.\nContent Source Maps\nContent Lake APIs for querying drafts and production data\nPreviewing changes to your content in a secure and high-fidelity setting before publishing is essential to a smooth editorial process.\nDraft mode\nDuring runtime, switch between an optimized production mode and an authorized mode to fetch draft content and render edit overlays.\nProduct\nSanity Studio\nAPIs\nContent Lake\nSecurity & Compliance\nCompare Sanity \nResources\nDocumentation\nBlog\nResource library\nCase Studies\nGuides \nTemplates \nPartners \nExplainers \nCMS \nCompany\nContact Sales\nEnterprise\nCareers\nTerms of Service\nPrivacy Policy\nAccessibility Statement\nStay connected\nGitHub\nSlack\nTwitter\nYouTube\nStack Overflow\nBlog RSS\nNewsletter\n©Sanity 2023\nCookie preferences"
  },
  {
    "title": "Block Content & Portable Text",
    "url": "https://www.sanity.io/docs/block-content",
    "html": "Skip to content\nJoin live – Get insights, tips, + Q&A from Sanity developers on our latest releases \nProduct\nPLATFORM\nSanity Studio\n\nFlexible editing environment\n\nAPIs\n\nConnect to anything\n\nContent Lake\n\nReal-time database\n\nTry product demo \nFEATURES\nReal-time collaboration\n\nFearlessly work with content\n\nPrecise content querying\n\nTreat content as data with GROQ\n\nLocalization\n\nCoherent messaging across territories\n\nSolutions\nUSE CASES\nE-commerce\n\nRicher shopping experiences\n\nMarketing sites\n\nControl your story\n\nProducts & services\n\nInnovate and automate\n\nMobile apps\n\nContent backend for every OS\n\nView all \nINTEGRATIONS\nShopify\nMux\nVercel\nNetlify\nAlgolia\nCloudinary\nBigCommerce\nCommerce Layer\nSmartling\nTransifex\nView all \nDevelopers\nLEARN\nDocumentation\nStudio API Reference\nAPI reference\nGuides\nGROQ cheat sheet\nSanity UI\nGet started \nBUILD AND SHARE\nTemplates\nTools and plugins\nSchemas and snippets\nProject showcase\nShare your work\nBrowse Exchange \nFRAMEWORKS\nReact\nVue\nNext.js\nNuxt.js\nSvelte\nRemix\nGatsby\nAstro\nAngular\nEleventy\nView all \nResources\nDISCOVER\nBlog\nResource library\nGlossary\nAgency partners\nBecome a partner\nTechnical support\nTalk to sales \nCASE STUDIES\nPuma\n\nSource of truth for global markets\n\nAether\n\nUnique digital shopping experience\n\nMorning Brew\n\nOmnichannel media distribution\n\nInVision\n\nDelivering exceptional customer experiences\n\nView all \nPOPULAR GUIDES\nHeadless CMS\nStructured content\nContent modeling\nHeadless SEO\nStatic websites\nView all \nEnterprise\nPricing\nLog in\nContact sales\nGet started\nSearch\nOverview\nGetting started\nSanity Studio\nSetup and deployment\nConfiguration\nBlock Content\nConfiguring the Portable Text editor\nCustomizing the Portable Text Editor\nCustomizing block content\nNEWVisual Editing\nAI Assist\nNEWComments\nCustomization\nWorkflows\nTools\nPlugins\nCommand Line Interface\nMigrating from v2\nContent Lake\nBuild with Sanity\nAccess control\nReference\nStudio v2 docs\nBlock Content & Portable Text\n\nWe believe you should treat all your content as structured content, even your rich text and block content. Portable Text is a presentation-agnostic specification for block content that you can use with Sanity. It's designed to be efficient for real-time collaborative interfaces and makes it possible to annotate rich text with additional data structures recursively.\n\nConfiguring the Portable Text editor\n\nGet to know the capabilities that the Portable Text editor offers out of the box\n\nCustomizing the Portable Text editor\n\nLearn how to extend the capabilities of the Portable Text editor with custom components\n\nPresenting Portable Text\n\nLearn how to transform Portable Text data into any presentation format you may need\n\nCustomizing block content\n\nA series of practical examples that illustrate how to customize block content and the Portable Text Input in the studio.\n\nLibraries\n\nTo present Portable Text on your front-end, we developed a range of tools to help you out\n\nPortable Text to React\nPortable Text to HTML\nPortable Text to Svelte\nBlock content to Hyperscript\nBlock content to Vue\nProduct\nSanity Studio\nAPIs\nContent Lake\nSecurity & Compliance\nCompare Sanity \nResources\nDocumentation\nBlog\nResource library\nCase Studies\nGuides \nTemplates \nPartners \nExplainers \nCMS \nCompany\nContact Sales\nEnterprise\nCareers\nTerms of Service\nPrivacy Policy\nAccessibility Statement\nStay connected\nGitHub\nSlack\nTwitter\nYouTube\nStack Overflow\nBlog RSS\nNewsletter\n©Sanity 2023\nCookie preferences"
  },
  {
    "title": "Sort Orders",
    "url": "https://www.sanity.io/docs/sort-orders",
    "html": "Skip to content\nJoin live – Get insights, tips, + Q&A from Sanity developers on our latest releases \nProduct\nPLATFORM\nSanity Studio\n\nFlexible editing environment\n\nAPIs\n\nConnect to anything\n\nContent Lake\n\nReal-time database\n\nTry product demo \nFEATURES\nReal-time collaboration\n\nFearlessly work with content\n\nPrecise content querying\n\nTreat content as data with GROQ\n\nLocalization\n\nCoherent messaging across territories\n\nSolutions\nUSE CASES\nE-commerce\n\nRicher shopping experiences\n\nMarketing sites\n\nControl your story\n\nProducts & services\n\nInnovate and automate\n\nMobile apps\n\nContent backend for every OS\n\nView all \nINTEGRATIONS\nShopify\nMux\nVercel\nNetlify\nAlgolia\nCloudinary\nBigCommerce\nCommerce Layer\nSmartling\nTransifex\nView all \nDevelopers\nLEARN\nDocumentation\nStudio API Reference\nAPI reference\nGuides\nGROQ cheat sheet\nSanity UI\nGet started \nBUILD AND SHARE\nTemplates\nTools and plugins\nSchemas and snippets\nProject showcase\nShare your work\nBrowse Exchange \nFRAMEWORKS\nReact\nVue\nNext.js\nNuxt.js\nSvelte\nRemix\nGatsby\nAstro\nAngular\nEleventy\nView all \nResources\nDISCOVER\nBlog\nResource library\nGlossary\nAgency partners\nBecome a partner\nTechnical support\nTalk to sales \nCASE STUDIES\nPuma\n\nSource of truth for global markets\n\nAether\n\nUnique digital shopping experience\n\nMorning Brew\n\nOmnichannel media distribution\n\nInVision\n\nDelivering exceptional customer experiences\n\nView all \nPOPULAR GUIDES\nHeadless CMS\nStructured content\nContent modeling\nHeadless SEO\nStatic websites\nView all \nEnterprise\nPricing\nLog in\nContact sales\nGet started\nSearch\nOverview\nGetting started\nSanity Studio\nSetup and deployment\nConfiguration\nWorkspaces\nSchemas and forms\nConditional Fields\nField Groups\nList Previews\nConnected Content\nValidation\nInitial Values\nShared Content\nSort Orders\nBlock Content\nNEWVisual Editing\nAI Assist\nNEWComments\nCustomization\nWorkflows\nTools\nPlugins\nCommand Line Interface\nMigrating from v2\nContent Lake\nBuild with Sanity\nAccess control\nReference\nStudio v2 docs\nSort Orders\n\nWhen displaying a collection of documents it's useful to be able to sort the collection by different fields. You do this by specifying an orderings property in the schema:\n\n{\n  name: 'movie',\n  type: 'document',\n  fields: [\n    {\n      title: 'Title',\n      name: 'title',\n      type: 'string'\n    },\n    {\n      title: 'Release Date',\n      name: 'releaseDate',\n      type: 'date'\n    },\n    {\n      title: 'Popularity',\n      name: 'popularity',\n      type: 'number'\n    }\n  ],\n\n  orderings: [\n\n    {\n\n      title: 'Release Date, New',\n\n      name: 'releaseDateDesc',\n\n      by: [\n\n        {field: 'releaseDate', direction: 'desc'}\n\n      ]\n\n    },\n\n    {\n\n      title: 'Release Date, Old',\n\n      name: 'releaseDateAsc',\n\n      by: [\n\n        {field: 'releaseDate', direction: 'asc'}\n\n      ]\n\n    },\n\n    {\n\n      title: 'Popularity',\n\n      name: 'popularityDesc',\n\n      by: [\n\n        {field: 'popularity', direction: 'desc'}\n\n      ]\n\n    }\n\n  ]\n\n}\n\nThe orderings above define a list of possible ways to order a collection of movies. To the user these appear as options in the Studio when the movies are listed, with each object in orderings being its own sort option (one can sort by Release Date, New OR Release Date, Old OR Popularity).\n\nDefault sort orders\n\nIf no sort orders are defined, Sanity will do its best to guess what fields would make sense to sort by.\n\nWhen no ordering is specified:\n\nIf the document type has string fields named title, name, label, heading, header, caption or description, we enable options to order by all of these.\nIf your type has no fields named any of the above, we will generate ordering configs for all fields of primitive types, that is fields of type string, number, or boolean.\n\nIf you specify your own ordering, we skip the default heuristics above.\n\nUPDATED ON OCTOBER 31, 2023\n\nWas this article helpful?\nNot at all\nSomewhat\nAbsolutely!\nI want to suggest an improvement to this article.\nProduct\nSanity Studio\nAPIs\nContent Lake\nSecurity & Compliance\nCompare Sanity \nResources\nDocumentation\nBlog\nResource library\nCase Studies\nGuides \nTemplates \nPartners \nExplainers \nCMS \nCompany\nContact Sales\nEnterprise\nCareers\nTerms of Service\nPrivacy Policy\nAccessibility Statement\nStay connected\nGitHub\nSlack\nTwitter\nYouTube\nStack Overflow\nBlog RSS\nNewsletter\n©Sanity 2023\nCookie preferences"
  },
  {
    "title": "Initial Value Templates",
    "url": "https://www.sanity.io/docs/initial-value-templates",
    "html": "Skip to content\nJoin live – Get insights, tips, + Q&A from Sanity developers on our latest releases \nProduct\nPLATFORM\nSanity Studio\n\nFlexible editing environment\n\nAPIs\n\nConnect to anything\n\nContent Lake\n\nReal-time database\n\nTry product demo \nFEATURES\nReal-time collaboration\n\nFearlessly work with content\n\nPrecise content querying\n\nTreat content as data with GROQ\n\nLocalization\n\nCoherent messaging across territories\n\nSolutions\nUSE CASES\nE-commerce\n\nRicher shopping experiences\n\nMarketing sites\n\nControl your story\n\nProducts & services\n\nInnovate and automate\n\nMobile apps\n\nContent backend for every OS\n\nView all \nINTEGRATIONS\nShopify\nMux\nVercel\nNetlify\nAlgolia\nCloudinary\nBigCommerce\nCommerce Layer\nSmartling\nTransifex\nView all \nDevelopers\nLEARN\nDocumentation\nStudio API Reference\nAPI reference\nGuides\nGROQ cheat sheet\nSanity UI\nGet started \nBUILD AND SHARE\nTemplates\nTools and plugins\nSchemas and snippets\nProject showcase\nShare your work\nBrowse Exchange \nFRAMEWORKS\nReact\nVue\nNext.js\nNuxt.js\nSvelte\nRemix\nGatsby\nAstro\nAngular\nEleventy\nView all \nResources\nDISCOVER\nBlog\nResource library\nGlossary\nAgency partners\nBecome a partner\nTechnical support\nTalk to sales \nCASE STUDIES\nPuma\n\nSource of truth for global markets\n\nAether\n\nUnique digital shopping experience\n\nMorning Brew\n\nOmnichannel media distribution\n\nInVision\n\nDelivering exceptional customer experiences\n\nView all \nPOPULAR GUIDES\nHeadless CMS\nStructured content\nContent modeling\nHeadless SEO\nStatic websites\nView all \nEnterprise\nPricing\nLog in\nContact sales\nGet started\nSearch\nOverview\nGetting started\nSanity Studio\nSetup and deployment\nConfiguration\nWorkspaces\nSchemas and forms\nConditional Fields\nField Groups\nList Previews\nConnected Content\nValidation\nInitial Values\nShared Content\nSort Orders\nBlock Content\nNEWVisual Editing\nAI Assist\nNEWComments\nCustomization\nWorkflows\nTools\nPlugins\nCommand Line Interface\nMigrating from v2\nContent Lake\nBuild with Sanity\nAccess control\nReference\nStudio v2 docs\nChangelog\nInitial Value Templates\n\nDefine an initial value for a new document created in Sanity Studio.\n\nBy default, whenever you create a new document in the studio, the document will be initialized with empty values for every field (actually: undefined). Sometimes this is not what you want. In this article, we'll look at some of the ways you can set your documents with some prefilled initial values.\n\nThere are two ways of defining initial values, depending on what you want to achieve:\n\nDefine a single set of initial values to apply to all new documents of the same type\nDefine a set of different templates to choose from when creating a new document\nDefine a single set of initial values\n\nIf you always want a particular document type to have a single set of initial values, the simplest way to do this is by specifying the initialValue property on a document type. In the following example, the project schema type is given the value false for the isHighlighted field.\n\nexport default {\n  name: 'project',\n  type: 'document',\n  title: 'Project',\n  fields: [\n    {\n      name: 'title',\n      title: 'Title',\n      type: 'string'\n    },\n    {\n\n      name: 'isHighlighted',\n\n      title: 'Highlighted',\n\n      type: 'boolean'\n\n    },\n    {\n      name: 'releaseDate',\n      title: 'Release date',\n      type: 'datetime'\n    }\n  ],\n\n  initialValue: {\n\n    isHighlighted: false\n\n  }\n\n}\n\nSometimes you may want to compute property values. For instance, in the example above, you may want to set the releaseDate property to be the current date. You can do this by specifying a function for the initialValue property:\n\nexport default {\n  // ...\n  initialValue: () => ({\n    isHighlighted: false,\n    releaseDate: (new Date()).toISOString()\n  })\n}\nSet an initial value for a specific field\n\nIn the creation of a field in a document, you can specify an initialValue for that specific instance of the field.\n\nexport default {\n  name: 'project',\n  type: 'document',\n  title: 'Project',\n  fields: [\n    {\n      name: 'title',\n      title: 'Title',\n      type: 'string'\n    },\n    {\n      name: 'isHighlighted',\n      title: 'Highlighted',\n      type: 'boolean',\n\n      initialValue: false\n\n    },\n    {\n      name: 'releaseDate',\n      title: 'Release date',\n      type: 'datetime'\n    }\n  ]\n}\nSingle-field examples\n\nInitial values can be used on any schema type.\n\nexport default {\n  name: 'project',\n  type: 'document',\n  title: 'Project',\n  fields: [\n    {\n      name: 'title',\n      title: 'Title',\n      type: 'string',\n      initialValue: 'This string'\n    },\n    {\n      title: 'title',\n      name: 'myArray',\n      type: 'array',\n      initialValue: ['red', 'green'],\n      of: [\n          {type: 'string'},\n      ],\n    },\n    {\n      title: 'Complex Array',\n      name: 'myArray',\n      type: 'array',\n      initialValue: [\n        {\n          // Required _type to tell the schema what fields to map\n          _type: 'mySecondObject', \n          stringField: 'Starting string'\n        }\n      ],\n      of: [\n        {type: 'myFirstObject'},\n        {type: 'mySecondObject'}\n      ],\n    },\n    {\n      name: 'myObject',\n      title: 'My custom input',\n      type: 'object',\n      initialValue: {\n        name: \"some name\",\n        someField: \"Some other thing\"\n      },\n      fields: [\n        {\n            name: 'name',\n            title: 'Title',\n            type: 'string'\n        },\n        {\n            name: 'someField',\n            title: 'Something',\n            type: 'string'\n        },\n      ],\n    },\n    {\n      title: 'Custom type',\n      type: 'myCustomObjType',\n      name: 'myCustomObjType',\n      initialValue: {\n        customName: \"This is a custom name\",\n        customString: \"This is a custom string\"\n      }\n    },\n    {\n      name: 'isHighlighted',\n      title: 'Highlighted',\n      type: 'boolean',\n      initialValue: false\n    },\n    {\n      name: 'releaseDate',\n      title: 'Release date',\n      type: 'datetime',\n      initialValue: (new Date()).toISOString()\n    }\n  ]\n}\nInitial value precedence\n\nInitial values for nested types will be deeply merged. The initial value for the above project type will be resolved to something similar to:\n\n{\n  \"releaseDate\": \"2021-04-28T10:39:17.622Z\",\n  \"isHighlighted\": false\n}\n\nIn a case where an object type declares initial values for a field that also defines an initial value, the object type's initial value will \"win\" and override the field's initial value.\n\nIn the following example, the resolved initial value for the project type will be {\"isHighlighted\": true}:\n\nexport default {\n  name: 'project',\n  type: 'document',\n  title: 'Project',\n  fields: [\n    {\n      name: 'isHighlighted',\n      title: 'Highlighted',\n      type: 'boolean',\n\n      initialValue: false\n\n    },\n    //...\n  ],\n  initialValue: {\n    // this overrides the initial value defined on the field\n\n    isHighlighted: true\n\n  }\n}\nProtip\n\nIf you want to clear the initial value defined for a nested type, you can do this by setting the initial value to undefined.\n\nDefine multiple templates\n\nSo far, we’ve only looked at customizing the initial value for all documents of a document type. Quite often, you'll want to provide a set of different templates that an editor can choose from.\n\nGotcha\n\nInitial value templates only applies to document types.\n\nIn this example, we'll be working directly in the defineConfig configuration of our imaginary studio, but you can of course choose to export your templates/template functions elsewhere as they grow unwieldy.\n\n// sanity.config.js|ts\n\nimport {defineConfig} from 'sanity'\n\nexport default defineConfig({\n  //...rest of config\n  schema: {\n    templates: (prev, context) => {\n        console.log(prev)\n        // logs array of templates for existing types\n        console.log(context);\n        // logs: schema, currentUser, getClient, dataset, projectId\n        return prev;\n      }\n    } \n  }\n})\n\nWe’ve now recreated the exact same functionality that you get out of the box, but we also get a look at the templates that exist for our current types. For a document of type movie (such as you might find in the default \"Movie project\" example) the template looks like this:\n\n{\n    id: \"movie\",\n    schemaType: \"movie\",\n    title: \"Movie\",\n    value: {\n        \"_type\": \"movie\"\n    }\n}\nBehind the scenes\n\nThis gives you an idea of what happens behind the scenes: each document type will generate a template for its type, which will produce either an empty object as its initial value or whichever value is set in the schema type definitions initialValue property.\n\nLet's take what we've learned and make it useful by defining a custom initial values template.\n\nIn the following example, we include all the default templates, and then we add a template for documents of type person which will set up each new document with a prefilled value for the role field.\n\n// sanity.config.js|ts\nimport {defineConfig} from 'sanity'\n\nexport default defineConfig({\n  // ...rest of config\n  schema: {\n    templates: (prev) => [\n      ...prev,\n      {\n      id: 'person-developer',\n      title: 'Developer',\n      schemaType: 'person',\n      value: {\n        role: 'developer'\n      },\n    },\n\t],\n})\n\nWhen creating new documents, an editor will now get the option to create either a Person (the default template for the person type) or a Developer, which is the specific template we defined above with a pre-populated role property. The value property can also be defined as a function.\n\nTo polish this editor experience, it's a best practice to assign custom icons for templates to make them easier to differentiate. You can do this by setting the icon property:\n\n// sanity.config.js|ts\nimport {defineConfig} from 'sanity'\nimport {CogIcon} from '@sanity/icons'\n\nexport default defineConfig({\n  // ...rest of config\n  schema: {\n    templates: (prev) => [\n      ...prev,\n      {\n      icon: CogIcon,\n      id: 'person-developer',\n      title: 'Developer',\n      schemaType: 'person',\n      value: {\n        role: 'developer'\n      },\n    },\n\t],\n})\nInserting objects or references as default values\n\nFields that are object types (or is a reference to another document) have a few rules that you need to keep in mind:\n\nIn instances of nested objects, it's necessary to include a _type property to define what schema type to reference. For instance, if inserting a geopoint, you will set the field value to:\n{_type: 'geopoint', lat: 59.92409, lng: 10.7584}\nTo create a Reference initial value, the _ref property must be defined. This means that if you want to reference a specific document, you need to provide that document's ID as the value for _ref. {_ref: 'document-id-to-reference'}\nImages and files are represented as objects with a nested asset field (which is a reference to the actual asset document). Combining the two points above, the default value for an image field would look something like this:\n{_type: 'image', asset: {_type: 'reference', _ref: 'image-someId-200x300-jpg'}}\nWhile objects in arrays should generally have a _key property, the initial value system will generate the _key property if it is not included in the provided value (using a randomly generated string).\nResolving initial values asynchronously\n\nThe initial value can also be specified as an asynchronous function (a function returning a promise). This allows exciting things like running a request to an API to get data needed for the initial value. For instance:\n\nimport axios from 'axios'\n\nexport default {\n  // ...\n  initialValue: async () => {\n    const response = await axios.get('https://api.sanity.io/pets')\n    return {favoritePetName: response.data[0].name}\n  }\n}\nParameterized templates\n\nA common use case is to populate fields based on a set of parameters. You can do this by defining a parameters array for your template. By defining the value property as a function, you'll get the parameters passed to the template as the argument to the function. Each item in the parameters array follows the same declaration as fields within a schema object type:\n\n// sanity.config.js|ts\nimport {defineConfig} from 'sanity'\n\nexport default defineConfig({\n  //...rest of config\n  schema: {\n    templates: [\n      {\n        id: 'person-role',\n        title: 'Person with role',\n        schemaType: 'person',\n        parameters: [\n          {\n            name: 'roleName',\n            title: 'Role name',\n            type: 'string',\n          },\n        ],\n        value: (parameters) => ({\n          role: parameters.roleName,\n        }),\n      },\n    ],\n  },\n})\n\nUsing templates in a structure\n\nWhen defining your own structure for the desk tool (using the Structure Builder), a common use case is to create filtered lists of documents. In these cases, you probably want the new document action to not start with a totally empty document but have values pre-populated that match the structure the user is currently in.\n\nIn a dataset containing a large number of books and their related authors, you may want to segment the books by author. To do this, you might create a desk structure that looks like this:\n\n// deskStructure.js\n\nexport const structure = (S) =>\n  S.list()\n  .id('root')\n  .title('Content')\n  .items([\n    S.listItem({\n      id: 'books-by-author',\n      title: 'Books by author',\n      schemaType: 'book',\n      child: () =>\n        S.documentTypeList('author').child(authorId =>\n          S.documentTypeList('book')\n            .title('Books by author')\n            .filter('_type == $type && author._ref == $authorId')\n            .params({type: 'book', authorId})\n        )\n    }),\n    ...S.documentTypeListItems()\n  ])\n\nThis satisfies the navigation part, but it doesn’t select the author we want when creating a new document. For this to work, we need to first create a parameterized initial value template, then tell the structure to use it. Let’s first define the initial value template. In your sanity.config.js:\n\n// sanity.config.js|ts\nimport {defineConfig} from 'sanity'\nimport {deskStructure} from './deskStructure'\n\nexport default defineConfig({\n //...rest of config\n  plugins: [\n    deskTool({ structure: deskStructure }),\n   ],\n  schema: {\n    templates: [\n  \t\t  {\n      id: 'book-by-author',\n      title: 'Book by author',\n      description: 'Book by a specific author',\n      schemaType: 'book',\n      parameters: [{name: 'authorId', type: 'string'}],\n      value: params => ({\n        author: {_type: 'reference', _ref: params.authorId}\n      })\n    }\n\t],\n },\n})\n\nNow let’s use it in our structure:\n\n// deskStructure.js\n\nexport const structure = (S) =>\n  S.list()\n  .id('root')\n  .title('Content')\n  .items([\n    S.listItem({\n      id: 'books-by-author',\n      title: 'Books by author',\n      schemaType: 'book',\n      child: () =>\n        S.documentTypeList('author').child(authorId =>\n          S.documentTypeList('book')\n            .title('Books by author')\n            .filter('_type == $type && author._ref == $authorId')\n            .params({type: 'book', authorId})\n            .initialValueTemplates([\n              S.initialValueTemplateItem('book-by-author', {authorId})\n            ])\n        )\n    }),\n    ...S.documentTypeListItems()\n  ])\n\nNote how we’re defining which initial value templates should be valid in this context: by specifying just a single template, that is the only template valid in this context and will be used. If you specify multiple templates, you will get a choice of which template to use. The second argument to S.initialValueTemplateItem() is a set of parameters – in this case, we're passing the authorId from the parent pane as a parameter.\n\nUPDATED ON SEPTEMBER 25, 2023\n\nWas this article helpful?\nNot at all\nSomewhat\nAbsolutely!\nI want to suggest an improvement to this article.\nPAGE CONTENT\nDefine a single set of initial values\nSet an initial value for a specific field\nSingle-field examples\nInitial value precedence\nDefine multiple templates\nInserting objects or references as default values\nResolving initial values asynchronously\nParameterized templates\nUsing templates in a structure\nProduct\nSanity Studio\nAPIs\nContent Lake\nSecurity & Compliance\nCompare Sanity \nResources\nDocumentation\nBlog\nResource library\nCase Studies\nGuides \nTemplates \nPartners \nExplainers \nCMS \nCompany\nContact Sales\nEnterprise\nCareers\nTerms of Service\nPrivacy Policy\nAccessibility Statement\nStay connected\nGitHub\nSlack\nTwitter\nYouTube\nStack Overflow\nBlog RSS\nNewsletter\n©Sanity 2023\nCookie preferences"
  },
  {
    "title": "Validation",
    "url": "https://www.sanity.io/docs/validation",
    "html": "Skip to content\nJoin live – Get insights, tips, + Q&A from Sanity developers on our latest releases \nProduct\nPLATFORM\nSanity Studio\n\nFlexible editing environment\n\nAPIs\n\nConnect to anything\n\nContent Lake\n\nReal-time database\n\nTry product demo \nFEATURES\nReal-time collaboration\n\nFearlessly work with content\n\nPrecise content querying\n\nTreat content as data with GROQ\n\nLocalization\n\nCoherent messaging across territories\n\nSolutions\nUSE CASES\nE-commerce\n\nRicher shopping experiences\n\nMarketing sites\n\nControl your story\n\nProducts & services\n\nInnovate and automate\n\nMobile apps\n\nContent backend for every OS\n\nView all \nINTEGRATIONS\nShopify\nMux\nVercel\nNetlify\nAlgolia\nCloudinary\nBigCommerce\nCommerce Layer\nSmartling\nTransifex\nView all \nDevelopers\nLEARN\nDocumentation\nStudio API Reference\nAPI reference\nGuides\nGROQ cheat sheet\nSanity UI\nGet started \nBUILD AND SHARE\nTemplates\nTools and plugins\nSchemas and snippets\nProject showcase\nShare your work\nBrowse Exchange \nFRAMEWORKS\nReact\nVue\nNext.js\nNuxt.js\nSvelte\nRemix\nGatsby\nAstro\nAngular\nEleventy\nView all \nResources\nDISCOVER\nBlog\nResource library\nGlossary\nAgency partners\nBecome a partner\nTechnical support\nTalk to sales \nCASE STUDIES\nPuma\n\nSource of truth for global markets\n\nAether\n\nUnique digital shopping experience\n\nMorning Brew\n\nOmnichannel media distribution\n\nInVision\n\nDelivering exceptional customer experiences\n\nView all \nPOPULAR GUIDES\nHeadless CMS\nStructured content\nContent modeling\nHeadless SEO\nStatic websites\nView all \nEnterprise\nPricing\nLog in\nContact sales\nGet started\nSearch\nOverview\nGetting started\nSanity Studio\nSetup and deployment\nConfiguration\nWorkspaces\nSchemas and forms\nConditional Fields\nField Groups\nList Previews\nConnected Content\nValidation\nInitial Values\nShared Content\nSort Orders\nBlock Content\nNEWVisual Editing\nAI Assist\nNEWComments\nCustomization\nWorkflows\nTools\nPlugins\nCommand Line Interface\nMigrating from v2\nContent Lake\nBuild with Sanity\nAccess control\nReference\nStudio v2 docs\nValidation\n\nDescribes how to validate documents within the content studio\n\nSanity Studio allows you to specify validation rules on your document types and fields. Field-level validation is the most specific and gives the Studio a better chance to help the user understand where the validation failed and why, whereas the document-level validation provides slightly more control since it can validate based on the values of the entire document.\n\nEach schema type has a set of built-in validation methods. See the schema type documentation for a detailed list →\n\nProtip\n\nValidation is currently only done client-side (within the content studio). In the future, non-custom rules will be synchronized and run on the server as well. This is why we recommend you use the built-in validation methods as much as possible, resorting to custom validation only where absolutely necessary.\n\nBasics\n\nValidation is defined by setting the validation property on a document type or field. It takes a function which receives a Rule as the first argument. By calling methods on this rule, you add new validation modifiers. Here's an example which validates that a string field has a value and that the string is between 10 and 80 characters long:\n\n{\n  title: 'Title',\n  name: 'title',\n  type: 'string',\n  validation: Rule => Rule.required().min(10).max(80)\n}\n\nWithout the required() call, the title is also considered valid if it does not have a value.\n\nError levels and error messages\n\nBy default, values that do not pass the validation rules are considered errors - these will block the draft from being published until they have been resolved. You can also set a rule to be a warning, simply by calling warning() on the rule. Similarly, you can customize the error message displayed by passing a string to the warning() or error() method:\n\n{\n  title: 'Title',\n  name: 'title',\n  type: 'string',\n  validation: Rule => Rule.max(50).warning('Shorter titles are usually better')\n}\n\nIf you want to combine both warnings and errors in the same validation set, you can use an array:\n\n{\n  title: 'Title',\n  name: 'title',\n  type: 'string',\n  validation: Rule => [\n    Rule.required().min(10).error('A title of min. 10 characters is required'),\n    Rule.max(50).warning('Shorter titles are usually better')\n  ]\n}\nReferencing other fields\n\nSometimes you may want to build a rule that is based on the value of a different field. By calling the Rule.valueOfField method, you can achieve this.\n\n{\n  title: 'Start date',\n  name: 'startDate',\n  type: 'datetime',\n  validation: Rule => Rule.required().min('2022-03-01T15:00:00.000Z')\n},\n{\n  title: 'End date',\n  name: 'endDate',\n  type: 'datetime',\n  validation: Rule => Rule.required().min(Rule.valueOfField('startDate'))\n}\n\nNote however that it only allows referencing sibling fields. If you need to refer to things outside of this scope, you will have to use document-level validation.\n\nGotcha\n\nRule.valueOfField() returns the literal value of a field, allowing you to validate that the end date is always equal to or greater than the start date (as in the previous example). However, it cannot be used for inserting a field value into conditional logic and creating a validation based on the result.\n\nCustom validation\n\nSometimes you will need to validate values beyond what Sanity provides. The custom() method allows you to do this. It takes a function as the first argument, which should return either true (in the case of a valid value) or an error message as a string (in the case of an invalid value). You may also return a promise that resolves with one of those values, should you need to do asynchronous operations:\n\n{\n  name: 'location',\n  type: 'geopoint',\n  title: 'Location of bar',\n  description: 'Required, must be in Norway',\n  validation: Rule =>\n    Rule.required().custom(geoPoint =>\n      someGeoService\n        .isWithinBounds(\n          {\n            latitude: geoPoint.lat,\n            longitude: geoPoint.lng\n          },\n          someGeoService.BOUNDS_NORWAY\n        )\n        .then(isWithinBounds => (isWithinBounds ? true : 'Location must be in Norway, somewhere'))\n    )\n}\n\n\nPlease note that custom validators are also run on undefined values, unless the rule is explicitly set as optional by calling Rule.optional(). This allows for conditionally allowing undefined values based on some external factor, with the slight drawback that you need to make sure your functions check for undefined values. Here's an example:\n\n{\n  name: 'breweryName',\n  type: 'string',\n  title: 'Brewery name',\n  validation: Rule => Rule.custom(name => {\n    if (typeof name === 'undefined') {\n      return true // Allow undefined values\n    }\n    \n    // This would crash if we didn't check\n    // for undefined values first\n    return name.startsWith('Brew')\n      ? 'Please be more creative'\n      : true\n  }).warning()\n}\n\n\nShould you need to reference other fields from within the custom validator function, you can use the second argument (context) to the function:\n\n{\n  name: 'durationInMinutes',\n  type: 'number',\n  title: 'Duration of talk, in minutes',\n  validation: Rule => Rule.custom((duration, context) => {\n    const isShortTalk = duration && duration <= 10\n    if (isShortTalk && context.document.talkType !== 'lightning') {\n      return 'Only lightning talks should be 10 minutes or less'\n    }\n    \n    return true\n  })\n}\n\nYou can also access the closest parent from the context, along with the path of the current element being validated.\n\nValidating children\n\nIn certain cases, you may want to validate children of an object or array. In this case you can return an object containing a message and a paths property. Each path is an array of path segments leading to the child you want to flag as being the culprit. Let's say you want to disallow empty blocks/paragraphs in a portable text field:\n\n{\n  name: 'introduction',\n  title: 'Introduction',\n  type: 'array',\n  of: [{type: 'block'}],\n  validation: Rule => Rule.custom(blocks => {\n    const emptyBlocks = (blocks || []).filter(\n      block =>\n        block._type === 'block' &&\n        block.children.every(span =>\n          span._type === 'span' &&\n          span.text.trim() === ''\n        )\n    )\n    \n    const emptyPaths = emptyBlocks.map(\n      (block, index) => [{_key: block._key}] || [index]\n    )\n\n    return emptyPaths.length === 0\n      ? true\n      : {\n          message: 'Paragraph cannot be empty',\n          paths: emptyPaths\n        }\n  })\n}\n\nFor each of the empty blocks we find, we collect the path to it, which can either be the _key property (preferably), or the array index if a key cannot be found.\n\nDocument level validation\n\nSometimes you want to validate a whole document rather than just specific fields in a document. To do this, you can give a document the validation property and access fields inside the document by passing a prop. In this example, the validation ensures that editors can't add a \"Guest Author\" and an \"Author.\"\n\n{\n  name: 'post',\n  type: 'document',\n  title: 'Blog Post',\n  validation: Rule => Rule.custom(fields => {\n    if (fields.authors.length > 0 && Object.keys(fields.guest).length > 0) return \"You can't have an author AND guest author\"\n    return true\n  }),\n  fields: [\n    // ... \n    {\n      name: 'authors',\n      title: 'Authors',\n      type: 'array',\n      of: [\n        {\n          type: 'authorReference',\n        }\n      ]\n    },\n    {\n      name: 'guest',\n      title: 'Guest Author',\n      type: 'object',\n      fields: [\n        {name: 'name', type: 'string', title: 'Guest Author Name'},\n        {name: 'site', type: 'string', title: 'Guest Author Site'},\n      ],\n    },\n  ]\n}\nDisabling validation\n\nYou can set validation: false in the schema on a document or a field to disable it.\n\nGotcha\n\nValidation is run whenever changes are made to the document. We will provide a way to only validate on publish in the future. Keep this in mind when doing asynchronous operations against external APIs and similar.\n\nUPDATED ON DECEMBER 7, 2022\n\nWas this article helpful?\nNot at all\nSomewhat\nAbsolutely!\nI want to suggest an improvement to this article.\nPAGE CONTENT\nBasics\nError levels and error messages\nReferencing other fields\nCustom validation\nValidating children\nDocument level validation\nDisabling validation\nProduct\nSanity Studio\nAPIs\nContent Lake\nSecurity & Compliance\nCompare Sanity \nResources\nDocumentation\nBlog\nResource library\nCase Studies\nGuides \nTemplates \nPartners \nExplainers \nCMS \nCompany\nContact Sales\nEnterprise\nCareers\nTerms of Service\nPrivacy Policy\nAccessibility Statement\nStay connected\nGitHub\nSlack\nTwitter\nYouTube\nStack Overflow\nBlog RSS\nNewsletter\n©Sanity 2023\nCookie preferences"
  },
  {
    "title": "Overview of Cross Dataset References",
    "url": "https://www.sanity.io/docs/cross-dataset-references",
    "html": "This website stores data such as cookies to enable essential site functionality, as well as marketing, personalization, and analytics. By remaining on this website you indicate your consent. Privacy Policy\nSkip to content\nJoin live – Get insights, tips, + Q&A from Sanity developers on our latest releases \nProduct\nPLATFORM\nSanity Studio\n\nFlexible editing environment\n\nAPIs\n\nConnect to anything\n\nContent Lake\n\nReal-time database\n\nTry product demo \nFEATURES\nReal-time collaboration\n\nFearlessly work with content\n\nPrecise content querying\n\nTreat content as data with GROQ\n\nLocalization\n\nCoherent messaging across territories\n\nSolutions\nUSE CASES\nE-commerce\n\nRicher shopping experiences\n\nMarketing sites\n\nControl your story\n\nProducts & services\n\nInnovate and automate\n\nMobile apps\n\nContent backend for every OS\n\nView all \nINTEGRATIONS\nShopify\nMux\nVercel\nNetlify\nAlgolia\nCloudinary\nBigCommerce\nCommerce Layer\nSmartling\nTransifex\nView all \nDevelopers\nLEARN\nDocumentation\nStudio API Reference\nAPI reference\nGuides\nGROQ cheat sheet\nSanity UI\nGet started \nBUILD AND SHARE\nTemplates\nTools and plugins\nSchemas and snippets\nProject showcase\nShare your work\nBrowse Exchange \nFRAMEWORKS\nReact\nVue\nNext.js\nNuxt.js\nSvelte\nRemix\nGatsby\nAstro\nAngular\nEleventy\nView all \nResources\nDISCOVER\nBlog\nResource library\nGlossary\nAgency partners\nBecome a partner\nTechnical support\nTalk to sales \nCASE STUDIES\nPuma\n\nSource of truth for global markets\n\nAether\n\nUnique digital shopping experience\n\nMorning Brew\n\nOmnichannel media distribution\n\nInVision\n\nDelivering exceptional customer experiences\n\nView all \nPOPULAR GUIDES\nHeadless CMS\nStructured content\nContent modeling\nHeadless SEO\nStatic websites\nView all \nEnterprise\nPricing\nLog in\nContact sales\nGet started\nSearch\nOverview\nGetting started\nSanity Studio\nSetup and deployment\nConfiguration\nWorkspaces\nSchemas and forms\nConditional Fields\nField Groups\nList Previews\nConnected Content\nValidation\nInitial Values\nShared Content\nSort Orders\nBlock Content\nNEWVisual Editing\nAI Assist\nNEWComments\nCustomization\nWorkflows\nTools\nPlugins\nCommand Line Interface\nMigrating from v2\nContent Lake\nBuild with Sanity\nAccess control\nReference\nStudio v2 docs\nCross Dataset References\n\nAll you need to know about creating references across datasets.\n\nEnterprise Feature\n\nShared content with Cross-Dataset References is an enterprise feature. Use our contact form to start a conversation with our sales team to enable your project to use this feature.\n\nA fundamental requirement for enabling a content-driven workflow is having access to the proper tools to help you compartmentalize and then connect your content. A way of composing sets of fields to create documents, and of connecting documents to create relationships. Boxes and arrows, if you will.\n\nThe premier tool for connecting content in Sanity is the reference schema type, for creating binding relationships between content types. The reference type only allows references within a single dataset. This covers most use cases, but sometimes more complex architectures and content needs present a legitimate case for a way of communicating across datasets.\n\nEnterprise organizations often have different teams working with different content across channels, geographies, and markets. You might have one team managing product data. A handful of others teams each in charge of the digital experience for their specific brand, in their specific market. And a centralized legal team, who supports various brands and markets by providing copy for Terms of Service, Warranties, and other official information. Making sure these teams all refer to the same single source of truth for any specific bit of content is a challenge in most CMSes and often leads to duplication of effort and content debt.\n\nFor these scenarios, there is the crossDatasetReference schema type! With it comes the ability to make references between documents in different datasets.\n\nWhile closely related to the reference type, the crossDatasetReference type has some unique capabilities and some different limitations that you should be aware of.\n\nThe anatomy of a cross-dataset reference\n\nA cross-dataset reference is, as its name suggests, a reference in one dataset to a document in another dataset. In order for this to be possible, there are some requirements that must be filled.\n\nFor the remainder of this article, we’ll use the term referencing dataset when we discussing the dataset where the reference originates – i.e. the document that has a field pointing to a field in a different dataset – and referenced dataset when we talk about the dataset that is being referred to.\n\nBoth datasets must belong to the same project which must be on an enterprise plan and have this feature enabled\nThe source and target studios must both be updated to version 2.34.3 or later\nThe dataset name of the referenced dataset must be known at the time of creating the reference field in the referencing dataset\nSimilarly, the type of document you wish to refer to in the referenced dataset, and one or more of its fields must be known in order to set up previews in the source dataset\nExploring the crossDatasetReference schema\n\nTo read details about the crossDatasetReference schema type, visit the schema type reference documentation.\n\nThe crossDatasetReference type is, as mentioned, closely related to the reference type. It supports most of the same properties and options, in addition to some specific ones. Let’s have a look at a minimal example of a crossdatasetReference schema, and then go a bit further once we’ve established the basics.\n\n//Type definition on the schema of the \"referencing\" dataset,\n//i.e. where the reference originates\n\n{\n  name: 'my-reference-field',\n  title: 'Field reference to other field in another dataset',\n  type: 'crossDatasetReference',\n  dataset: 'name-of-the-other-dataset',\n  to: [\n    {\n      type: 'article',\n      preview: {\n        select: {\n          title: 'title'\n        },\n      },\n    },\n  ],\n}\nAll fields in the above example, except the title, are required\nThe type must be set to crossDatasetReference\nThe dataset must have the appropriate value\nThe to field accepts an array of entries to different document types in the referenced dataset. You may define as many types here as you please, but each crossDatasetReference field is limited to connecting to a single referenced dataset.\nBecause the entire schema of all document types in the referenced dataset is not known to the referencing dataset, the following is true for each entry in the to array:\nIn addition to type, each entry must specify one or more fields to use when searching for and previewing content in the referenced dataset. To learn more about previews and list views, please refer to this article.\n\nLet’s add a few more fields and a little more complexity to our schema:\n\n{\n  title: 'Reference to a document in a another dataset',\n  name: 'myCoolReferenceAcrossDatasets',\n  type: 'crossDatasetReference',\n  dataset: 'name-of-other-dataset',\n\tstudioUrl: ({ type, id }) => `https://target.studio/desk/${type};${id}`,\n  to: [\n    {\n      type: 'article',\n      preview: {\n        select: {\n          title: 'title',\n          media: 'heroImage',\n        },\n      },\n    },\n    {\n      type: 'person',\n      preview: {\n          select: {\n            name: 'name',\n            picture: 'portrait',\n            honorific: 'jobTitle',\n          },\n          prepare({ name, picture, honorific }) {\n            return {\n              title: name,\n              media: picture,\n              subtitle: honorific,\n            };\n          },\n        },\n      },\n    },\n  ],\n}\n\nLet’s look at what we’ve added.\n\nThe studioUrl field on line 6 accepts a function, which is invoked with the type and id of your referenced document, and which should return a string in the shape of a URL to the document editing pane address in the referenced dataset studio. This field is used to create a direct link from the reference preview to its editing environment (providing your editors have access to it, of course).\nFinally, we’ve added a second document type to our to array with an expanded preview configuration.\nThe Cross-Dataset Reference field in your studio.\n\nHaving configured your schema, you should see the crossDatasetReference field show up in your studio. While similar to reference inputs they differ in some key aspects:\n\nThe “Create New” button and option to open the referenced document in a new pane to the right are not available across datasets. Instead, you will find an intent link that will open the referenced document in the target studio (if you have access to it, and have set the studioUrl property).\nLinking to drafts is not available across datasets. Unless the document has been published at some point, it will not show up in search.\nDepending on network conditions, searching and previewing cross-dataset reference fields might be less performant than doing the same operations on internal references.\nSearching for documents in target studio.\n\nEditor support for cross-dataset references\nProtip\n\nThe visibility of Cross Dataset References depends on the permissions of the current user or token. For private datasets this means that:\n\nA user or token can see that a reference exists if they have at least read permissions on the source document. If they don’t have read permissions on the target document, they’ll see that the reference exists but not the content of the target document.\nA user or token can fetch the referenced document if they have at least read permissions on the target document.\nA user who wants to create a reference to a document can search for and attach any documents they have read permissions on.\nIf studioUrl is set, the referenced document will open in the target studio.\n\nAs with the reference schema type, crossDatasetReference fields are by default assumed to have bi-directional integrity which means that if you try to delete a document that is referred to by another document, the studio will alert you with a warning.\n\nHowever, unlike references within a single dataset, the studio will allow you to proceed with deleting or unpublishing documents that have cross-dataset references.\n\nIf you go ahead and delete the document despite the warnings, it will show up as unavailable in any studio referencing it and will block publishing until the problem is fixed if any changes are made to the referring document.\n\nThese measures are in place so that you can feel confident about connecting your content across datasets, and that you will be notified if a referenced document disappears.\n\nSometimes you don't need this guarantee while you want to keep the convenience of references. This warning can be turned off by adding the weak: true property to a reference field configuration.\n\nYou will still be notified that the document you are referring to has gone missing, but you will no longer be blocked from publishing.\n\nQuerying cross-dataset references\nGotcha\n\nCross-dataset references require you to use API version v2022-03-07 or later. Read more about the Sanity API versioning scheme here.\n\nGotcha\n\nCross dataset references can only be dereferenced using GROQ queries. Dereferencing through GraphQL endpoints is not currently supported.\n\nTo GROQ, a crossDatasetReference behaves similarly to an internal reference, except that dereferencing must always start from the “referencing” document. For example, for these two schemas, each in a different dataset:\n\n// Movie type (movies-dataset)\n\n{ \n  name: 'Movie Name',\n  ...\n},\n{\n  name: 'Actors',\n  title: 'Actors',\n  type: 'array',\n  of: {\n    type: 'crossDatasetReference',\n    dataset: 'people-dataset',\n    to: [\n      {\n        type: 'person',\n        preview: {\n          select: {\n            name: 'firstname'\n          },\n        },\n      },\n    ]\n  }\n}\n// Person type (people-dataset)\n\n{ \n  name: 'firstname',\n  ...\n},\n{ \n  name: 'lastname',\n  ...\n},\n...\n\nA GROQ query starting at the Movies type can dereference the “actors” field elements to retrieve the Person type field:\n\n*[_type == \"movie\"] {\n  ...,\n  \"actors\": actors[]->{\n    ...\n    firstname,\n    lastname,\n  }\n}\n\nThere are no limitations on the number of levels or nesting of references supported by the dereferencing operation, but dereferencing can only be done through the -> operator, following the “unidirectionality” of cross-dataset references - for example, if the person type had an “awards” cross-dataset reference field, it could be further dereferenced as follows:\n\n*[_type == \"movie\"] {\n  ...,\n  \"actors\": actors[]->{\n    ...\n    firstname,\n    lastname,\n    awards->name\n  }\n}\n\nHowever, other ways of dereferencing, for example, using the references() function is not supported:\n\n// This is a NOT SUPPORTED query\n*[_type == \"movie\"] {\n  ...,\n  \"actors\": actors[]->{\n    ...\n    firstname,\n    lastname,\n    \"awards\": *[_type == \"awards\" && references(^._id)] // <== here the reference function will not work for a cross-dataset reference\n  }\n}\nIn conclusion\n\nThe cross-dataset reference schema type is a powerful tool for enabling Shared Content across datasets. It allows you to keep your content connected beyond its original context by extending the reference field with methods for authenticating and querying across datasets.\n\nFurther reading:\n\nShared Content Quickstart\ncrossDatasetReference schema type\nConnected Content article\n\nUPDATED ON AUGUST 17, 2023\n\nWas this article helpful?\nNot at all\nSomewhat\nAbsolutely!\nI want to suggest an improvement to this article.\nPAGE CONTENT\nThe anatomy of a cross-dataset reference\nExploring the crossDatasetReference schema\nThe Cross-Dataset Reference field in your studio.\nEditor support for cross-dataset references\nQuerying cross-dataset references\nIn conclusion\nProduct\nSanity Studio\nAPIs\nContent Lake\nSecurity & Compliance\nCompare Sanity \nResources\nDocumentation\nBlog\nResource library\nCase Studies\nGuides \nTemplates \nPartners \nExplainers \nCMS \nCompany\nContact Sales\nEnterprise\nCareers\nTerms of Service\nPrivacy Policy\nAccessibility Statement\nStay connected\nGitHub\nSlack\nTwitter\nYouTube\nStack Overflow\nBlog RSS\nNewsletter\n©Sanity 2023\nCookie preferences"
  },
  {
    "title": "Connected Content",
    "url": "https://www.sanity.io/docs/connected-content",
    "html": "Skip to content\nJoin live – Get insights, tips, + Q&A from Sanity developers on our latest releases \nProduct\nPLATFORM\nSanity Studio\n\nFlexible editing environment\n\nAPIs\n\nConnect to anything\n\nContent Lake\n\nReal-time database\n\nTry product demo \nFEATURES\nReal-time collaboration\n\nFearlessly work with content\n\nPrecise content querying\n\nTreat content as data with GROQ\n\nLocalization\n\nCoherent messaging across territories\n\nSolutions\nUSE CASES\nE-commerce\n\nRicher shopping experiences\n\nMarketing sites\n\nControl your story\n\nProducts & services\n\nInnovate and automate\n\nMobile apps\n\nContent backend for every OS\n\nView all \nINTEGRATIONS\nShopify\nMux\nVercel\nNetlify\nAlgolia\nCloudinary\nBigCommerce\nCommerce Layer\nSmartling\nTransifex\nView all \nDevelopers\nLEARN\nDocumentation\nStudio API Reference\nAPI reference\nGuides\nGROQ cheat sheet\nSanity UI\nGet started \nBUILD AND SHARE\nTemplates\nTools and plugins\nSchemas and snippets\nProject showcase\nShare your work\nBrowse Exchange \nFRAMEWORKS\nReact\nVue\nNext.js\nNuxt.js\nSvelte\nRemix\nGatsby\nAstro\nAngular\nEleventy\nView all \nResources\nDISCOVER\nBlog\nResource library\nGlossary\nAgency partners\nBecome a partner\nTechnical support\nTalk to sales \nCASE STUDIES\nPuma\n\nSource of truth for global markets\n\nAether\n\nUnique digital shopping experience\n\nMorning Brew\n\nOmnichannel media distribution\n\nInVision\n\nDelivering exceptional customer experiences\n\nView all \nPOPULAR GUIDES\nHeadless CMS\nStructured content\nContent modeling\nHeadless SEO\nStatic websites\nView all \nEnterprise\nPricing\nLog in\nContact sales\nGet started\nSearch\nOverview\nGetting started\nSanity Studio\nSetup and deployment\nConfiguration\nWorkspaces\nSchemas and forms\nConditional Fields\nField Groups\nList Previews\nConnected Content\nValidation\nInitial Values\nShared Content\nSort Orders\nBlock Content\nNEWVisual Editing\nAI Assist\nNEWComments\nCustomization\nWorkflows\nTools\nPlugins\nCommand Line Interface\nMigrating from v2\nContent Lake\nBuild with Sanity\nAccess control\nReference\nStudio v2 docs\nConnected Content\n\nStructured content is connected. It's what enables reusing and repurposing the same chunk of content in different contexts, and it's how you enable your content to be treated as data. The Content Lake has some unique capabilities that make connected, structured content not only possible but pleasant to work with both programmatically through APIs and in the studio. This article aims to unpack how to use and think about references. While it has some technical language and concepts, you should be able to tag along, even if you aren't super familiar with JavaScript, JSON, or GROQ, our primary query language.\n\nWhat is a “reference”?\n\nWhen we talk about references in the context of Sanity, we usually mean one of three related things:\n\nThe reference field type in the studio's schema files\nThe field UI that you'll interact within the studio\nThe specific data shape that you'll find in the JSON documents that holds your content\n\nYou can put reference fields inside a document type, object, and array fields, as well as inside annotations in the Portable Text editor.\n\nTypical use cases for references:\n\nYou can use references pretty much anywhere it makes sense to connect two pieces of content, but let's look at some common patterns and use cases:\n\nAn author field that references a person document\nAn internalLink field that references document types like route, product, post, service\nTaxonomy fields that reference tag and category documents\nA parent field that establishes a hierarchical structure\nA related field that references documents of the same type\nReferences are always bi-directional\n\nA reference will always point to another document. The Content Lake will index references bi-directionally, meaning that you can query them from “both sides.” If you are used to database terminology, this means that the Content Lake acts more like a graph database than a relational database. If you're not, it means that any document in your Content Lake can be connected to any other document by a reference!\n\nIn other words, as long as you have a reference inside of a document pointing to another, you can ask the Content Lake to return all the data of a document and include the content of the document it refers to, but you can also ask it to return all the documents that contain a reference to a particular document – sometimes referred to as “incoming references.” There are also ways of querying for documents that have a reference to another document in a given field.\n\nHence, where to place a reference field is mostly a consideration for the editorial experience. From where does it makes sense to manage the references? Typically, some document types will be relevant in many different contexts. Typically you want references to point to these.\n\nExample\n\nLet's say you have document types for post and person. While you could put an array of references to post on the person document type, that would be cumbersome when authoring the post. To connect it to a person, that is, its author, you would have to go to the given document and add the new post to the array. Hence, it's \"natural\" to make a field called author that's a reference to the type person on the post document type.\n\n// post.js\nexport default {\n  name: 'post',\n  type: 'document',\n  fields: [\n    // other fields\n    // ...\n\t\t{\n\t\t  name: 'author',\n      type: 'reference',\n\t\t\ttitle: 'Author',\n      to: [{type: 'person' }]\n    }\n  ]\n}\nProtip\n\nWhile we're demonstrating a single author field in the code above, it's often wise to make it an array field called authors that can hold multiple references to persons. It's likely that you'll need support for multiple authors at some point.\n\nThese fields will produce a data structure that looks like this:\n\n{\n  \"_type\": \"post\",\n  \"author\": {\n     \"_type\": \"reference\",\n     \"_ref\": \"82b75d44-13af-4351-90ee-13045f84cf3b\",\n\t}\n}\n\nThe value of the _ref property is the _id of the document it's referencing.\n\nReferential integrity\n\nNot only are your references indexed and queryable; The Sanity Content Lake will also make sure that they keep their integrity. That means that it will prevent you from deleting a document that is referenced elsewhere. This simplifies implementing connected content, and enables you to have confidence in the structure of your data.\n\nSometimes you don't need this guarantee while you want to keep the convenience of references. Referential integrity can be turned off by adding the weak: true property to a reference field configuration. This will add _weak: true to the reference object in the data, which is also the way to convert a strong reference to a weak one programmatically (notice the underscore _ that signifies a special Content Lake property).\n\n// Example of a weak reference. The referenced document can be deleted because this reference is set as weak.\n{\n  \"_type\": \"feedback\",\n\t\"message\": \"This was a great article!\",\n  \"article\": {\n     \"_type\": \"reference\",\n     \"_ref\": \"4049517c-3258-4747-8e00-2956ca5b894b\",\n     \"_weak\": true\n\t}\n}\n\nIf you use weak references and a reference field points to a non-existent document, this will show up for editors in the studio as a warning:\n\nWorking with references in the studio\n\nA reference field in the studio lets you do mainly four things:\n\nSearch and select a document you want to reference\nCreate a new document that can be referenced\nOpen an already referenced document in a new pane next to the current one\nDelete a reference to a document\nAdding references\n\nAdding a reference to an existing document is fairly straightforward. You click into the reference field and type into it to search for a document from most of its text-based fields. The studio will create the reference when you select the document. If the document you selected is a draft that has never been published, the studio will still make the connection, but it will block the referring document from publishing until the referenced document has been published (unless the reference field has the weak option set to true).\n\nCreate and edit documents in place\n\nWanting to reference some piece of content you haven't created yet is fairly common. A simple example is when a new author is creating their first post and they don't have their own author document yet. In many systems, they'll have to leave the current document that they're editing, create and publish a new author document, and then get back to where they left. The reference fields for Sanity Studio remove this friction by letting you create and edit documents in a new pane next to the current.\n\nThe referring document of the type book on the left is blocked from publishing until the referenced document of the type author on the right has been published. Setting the reference field's weak option to true disables this safety measure.\nQuerying connected content\n\nThe true potential of connected content is revealed when you start taking advantage of references in your queries. Using GROQ, you can follow any reference and include any value from that document in your result. Including references, which means you can follow the trail from a book via its reference to an author which might include references to awards they've won, which might have been referenced by other authors who have won that same award.\n\n// For books by any award winning author\n// return title of book\n// follow the author reference to get their name\n// follow the award reference via the author to get the award title\n// finally list names of other authors who have received the same award\n\n*[_type == \"book\" && defined(author->award)] {\n  title,\n \"By: \": author->name,\n \"Winner of: \": author->award->title,\n \"Also won by: \": \n\t\t*[_type == \"author\" && references(^.author->award._ref) ].name\n}\n\nThe query above might yield a result like this:\n\n[\n  {\n    \"title\": \"One Flew Over The Cuckoos Nest\"\n    \"By: \": \"Ken Kesey\",\n    \"Winner of\": \"Pulitzer\",\n    \"Also won by\": [\n      \"Astrid Lindgren\",\n      \"Niccolo Machiavelli\",\n      \"Terry Pratchett\"\n    ],\n  },\n\t...\n]\n\nWhile this example might seem a bit convoluted (and probably wouldn't stand up to the scrutiny of the Pulitzer board), it also demonstrates how using references can reveal patterns and possibilities in connected content using only a few lines of GROQ.\n\nDelving further into the syntax and features of GROQ is beyond the scope of this article, but rest assured that we have ample docs and examples on the possibilities afforded by references in your queries.\n\nFurther Reading\nHow joins in GROQ work\nContent Modelling in Sanity Studio\nDesigning Connected Content: Plan and Model Digital Products for Today and Tomorrow\n\nUPDATED ON DECEMBER 7, 2022\n\nWas this article helpful?\nNot at all\nSomewhat\nAbsolutely!\nI want to suggest an improvement to this article.\nPAGE CONTENT\nWhat is a “reference”?\nTypical use cases for references:\nReferences are always bi-directional\nReferential integrity\nWorking with references in the studio\nAdding references\nCreate and edit documents in place\nQuerying connected content\nFurther Reading\nProduct\nSanity Studio\nAPIs\nContent Lake\nSecurity & Compliance\nCompare Sanity \nResources\nDocumentation\nBlog\nResource library\nCase Studies\nGuides \nTemplates \nPartners \nExplainers \nCMS \nCompany\nContact Sales\nEnterprise\nCareers\nTerms of Service\nPrivacy Policy\nAccessibility Statement\nStay connected\nGitHub\nSlack\nTwitter\nYouTube\nStack Overflow\nBlog RSS\nNewsletter\n©Sanity 2023\nCookie preferences"
  },
  {
    "title": "List Previews",
    "url": "https://www.sanity.io/docs/previews-list-views",
    "html": "Skip to content\nJoin live – Get insights, tips, + Q&A from Sanity developers on our latest releases \nProduct\nPLATFORM\nSanity Studio\n\nFlexible editing environment\n\nAPIs\n\nConnect to anything\n\nContent Lake\n\nReal-time database\n\nTry product demo \nFEATURES\nReal-time collaboration\n\nFearlessly work with content\n\nPrecise content querying\n\nTreat content as data with GROQ\n\nLocalization\n\nCoherent messaging across territories\n\nSolutions\nUSE CASES\nE-commerce\n\nRicher shopping experiences\n\nMarketing sites\n\nControl your story\n\nProducts & services\n\nInnovate and automate\n\nMobile apps\n\nContent backend for every OS\n\nView all \nINTEGRATIONS\nShopify\nMux\nVercel\nNetlify\nAlgolia\nCloudinary\nBigCommerce\nCommerce Layer\nSmartling\nTransifex\nView all \nDevelopers\nLEARN\nDocumentation\nStudio API Reference\nAPI reference\nGuides\nGROQ cheat sheet\nSanity UI\nGet started \nBUILD AND SHARE\nTemplates\nTools and plugins\nSchemas and snippets\nProject showcase\nShare your work\nBrowse Exchange \nFRAMEWORKS\nReact\nVue\nNext.js\nNuxt.js\nSvelte\nRemix\nGatsby\nAstro\nAngular\nEleventy\nView all \nResources\nDISCOVER\nBlog\nResource library\nGlossary\nAgency partners\nBecome a partner\nTechnical support\nTalk to sales \nCASE STUDIES\nPuma\n\nSource of truth for global markets\n\nAether\n\nUnique digital shopping experience\n\nMorning Brew\n\nOmnichannel media distribution\n\nInVision\n\nDelivering exceptional customer experiences\n\nView all \nPOPULAR GUIDES\nHeadless CMS\nStructured content\nContent modeling\nHeadless SEO\nStatic websites\nView all \nEnterprise\nPricing\nLog in\nContact sales\nGet started\nSearch\nOverview\nGetting started\nSanity Studio\nSetup and deployment\nConfiguration\nWorkspaces\nSchemas and forms\nConditional Fields\nField Groups\nList Previews\nConnected Content\nValidation\nInitial Values\nShared Content\nSort Orders\nBlock Content\nNEWVisual Editing\nAI Assist\nNEWComments\nCustomization\nWorkflows\nTools\nPlugins\nCommand Line Interface\nMigrating from v2\nContent Lake\nBuild with Sanity\nAccess control\nReference\nStudio v2 docs\nChangelog\nList Previews\n\nSanity will often need to render a compact representation of a document or object for list views and similar situations, and we call this a Preview. You can decide which fields should be used, and how, by implementing Preview. By default, Sanity tries its best to guess which fields should be used for preview by introspecting the type's defined fields. For example, if your type has a field of type string named title, it will infer that this should be used as the title when previewing values of this type.\n\nSanity offers two ways of customizing how documents and objects are previewed:\n\nSpecify preview options for the type in the schema for lists and arrays to use automatically\nImplement a custom preview component to display when used in block content\nProtip\n\nLooking to create custom previews inside of the document pane? Read more on creating custom content previews inside of split panes with Structure Builder.\n\nSpecify preview options\n\nIf you want to specify which fields should be used for what, you can control this by adding a preview key to the type defined in the schema. For example:\n\nexport default {\n  name: 'movie',\n  type: 'document',\n  fields: [\n    {\n      title: 'Title',\n      name: 'title',\n      type: 'string'\n    },\n    {\n      title: 'Release Date',\n      name: 'releaseDate',\n      type: 'date'\n    }\n  ],\n\n  preview: {\n\n    select: {\n\n      title: 'title',\n\n      subtitle: 'releaseDate'\n\n    }\n\n  }\n\n}\n\nAbove, the preview.select object will inform the Sanity preview logic that for this document, movie.title should be used as title and movie.releaseDate should be used as subtitle.\n\nThis might be sufficient in many cases, but sometimes you want to reformat the selected values. Say releaseDate (e.g., 2016-04-25) is a bit hard on the eyes. All we really want is the year:\n\nexport default {\n  name: 'movie',\n  type: 'document',\n  fields: [\n    {\n      title: 'Title',\n      name: 'title',\n      type: 'string'\n    },\n    {\n      title: 'Release Date',\n      name: 'releaseDate',\n      type: 'datetime'\n    }\n  ],\n  preview: {\n    select: {\n      title: 'title',\n\n      date: 'releaseDate'\n\n    },\n    prepare(selection) {\n      const {title, date} = selection\n      return {\n        title: title,\n\n        subtitle: date.split('-')[0] // YYYY-MM-DD --> YYYY\n\n      }\n    }\n  }\n}\n\nAbove, title and releaseDate are selected. The result of this selection is passed to the prepare function, where you can transform the selection however you like (only keeping the year, in this case).\n\nProtip\n\nIn these examples we have put the preview object after the fields array, however you can also place it before it. This might give you a better idea at first glance of how the document is previewed.\n\nPreview using fields from referenced documents\n\nYou can follow relations by using dot notation to the related document field you want to display in preview.select.\n\nHere's an example of a preview for a movie that uses the director name as a part of its preview:\n\nexport default {\n  name: 'movie',\n  type: 'document',\n  fields: [...],\n  preview: {\n    select: {\n      title: 'title',\n\n      director: 'director.name' // if the movie has a director, follow the relation and get the name\n\n    },\n    prepare(selection) {\n\n      const {title, director} = selection\n\n      return {\n        title: title,\n\n        subtitle: `Directed by: ${director ? director : 'unknown'}`\n\n      }\n    }\n  }\n}\nPreviewing from predefined string lists\n\nWhen using a predefined list of strings, you can use objects with title and value keys. This might be useful if you're using a list of U.S. states, for example: The title can be the spelled out state while the value can be a two-letter state code:\n\n{\n  title: 'state',\n  name: 'U.S. State',\n  type: 'string',\n  options: {\n    list: [\n      { \"title\": \"Alabama\", \"value\": \"AL\"},\n      { \"title\": \"Alaska\", \"value\": \"AK\"},\n      { \"title\": \"Arizona\", \"value\": \"AZ\"},\n      // ...\n    ],\n    layout: 'dropdown'\n  }\n}\n\nIf you wish to use that value in your preview, Sanity will default to providing the title—unless you use a prepare() function. In that case, the value (and only the value) will be passed along to prepare().\n\nIf you want to render the title in your document preview but need to manipulate it in some way (which is done using prepare(), as seen in the second example above), you can specify your list outside of the schema, use it as your list in options.list, and then consult that list in your prepare() function. This is best explained via an example:\n\nconst STATES = [\n  { \"title\": \"Alabama\", \"value\": \"AL\"},\n  { \"title\": \"Alaska\", \"value\": \"AK\"},\n  { \"title\": \"Arizona\", \"value\": \"AZ\"},\n  // ...\n]\n\nexport default {\n  // ...\n  fields: [\n    // ...\n    {\n      name: \"state\",\n      title: \"U.S. State\",\n      type: \"string\",\n      options: {\n        list: STATES,\n        layout: \"dropdown\",\n      },\n    }\n  ],\n  preview: {\n    select: {\n      state: 'state',\n    },\n    prepare: ({ state }) => {\n      const stateName = state && STATES.flatMap(option => option.value === state ? [option.title] : [])\n      return {\n        title: state ? `${state} is ${stateName}` : 'No state selected',\n      }\n    }\n  }\n}\nPreviewing from array values\n\nFetching entire arrays of values can potentially result in large and complex responses, especially in the case of large arrays. We encourage you to only select a subset of the array values:\n\nexport default {\n  name: 'book',\n  type: 'document',\n  fields: [...],\n  preview: {\n    select: {\n      title: 'title',\n\n      author0: 'authors.0.name', // <- authors.0 is a reference to author, and the preview component will automatically resolve the reference and return the name\n\n      author1: 'authors.1.name',\n\n      author2: 'authors.2.name',\n\n      author3: 'authors.3.name'\n\n    },\n    prepare: ({title, author0, author1, author2, author3}) => {\n\n      const authors = [author0, author1, author2].filter(Boolean)\n\n      const subtitle = authors.length > 0 ? `by ${authors.join(', ')}` : ''\n\n      const hasMoreAuthors = Boolean(author3)\n\n      return {\n        title,\n\n        subtitle: hasMoreAuthors ? `${subtitle}…` : subtitle\n\n      }\n    }\n  }\n}\nGotcha\n\nResolving references in arrays works the same as covered above, with dot notation.\n\nThe easiest way to show an image in the preview is to assign a field containing an image to the media property. The different views take care of a proper rendering of the image, including any hotspot and crop specifics.\n\nexport default {\n  name: 'person',\n  type: 'document',\n  fields: [...],\n  preview: {\n    select: {\n      title: 'name',\n\n      media: 'userPortrait' // Use the userPortait image field as thumbnail\n\n    }\n  }\n}\n\nYou can also use JSX to render a thumbnail. Here's an example of how to show specific emojis based on the status of our document. This example is partly taken from our Community Studio.\n\n{\n  name: 'ticket',\n  type: 'document',\n  fields: [...],\n  preview: {\n    select: {\n      title: 'title',\n      summary: 'summary',\n      status: 'status'\n    },\n    prepare({ title, summary, status }) {\n\n      const EMOJIS = {\n\n        open: '🎫',\n\n        resolved: '✅',\n\n        cancelled: '🚫'\n\n      }\n\n      return {\n\n        title: title,\n\n        subtitle: summary,\n\n        media: <span style={{fontSize: '1.5rem'}}>{status ? EMOJIS[status] : '🎫'}</span>\n\n      }\n\n    }\n  }\n}\nCustom preview component\n\nIf you want complete control of how the document or object list preview is rendered, you can also provide a React component that will be invoked when the document or object is previewed in that context. To learn more about this option, visit the article on form components.\n\nPreview in the Studio\n\nDepending on how your schema is set up, here is an example of how Preview could look in your Studio. This uses title, subtitle, and media.\n\nUPDATED ON DECEMBER 7, 2022\n\nWas this article helpful?\nNot at all\nSomewhat\nAbsolutely!\nI want to suggest an improvement to this article.\nPAGE CONTENT\nSpecify preview options\nPreview using fields from referenced documents\nPreviewing from predefined string lists\nPreviewing from array values\nCustom preview component\nPreview in the Studio\nProduct\nSanity Studio\nAPIs\nContent Lake\nSecurity & Compliance\nCompare Sanity \nResources\nDocumentation\nBlog\nResource library\nCase Studies\nGuides \nTemplates \nPartners \nExplainers \nCMS \nCompany\nContact Sales\nEnterprise\nCareers\nTerms of Service\nPrivacy Policy\nAccessibility Statement\nStay connected\nGitHub\nSlack\nTwitter\nYouTube\nStack Overflow\nBlog RSS\nNewsletter\n©Sanity 2023\nCookie preferences"
  },
  {
    "title": "Conditional fields",
    "url": "https://www.sanity.io/docs/conditional-fields",
    "html": "Skip to content\nJoin live – Get insights, tips, + Q&A from Sanity developers on our latest releases \nProduct\nPLATFORM\nSanity Studio\n\nFlexible editing environment\n\nAPIs\n\nConnect to anything\n\nContent Lake\n\nReal-time database\n\nTry product demo \nFEATURES\nReal-time collaboration\n\nFearlessly work with content\n\nPrecise content querying\n\nTreat content as data with GROQ\n\nLocalization\n\nCoherent messaging across territories\n\nSolutions\nUSE CASES\nE-commerce\n\nRicher shopping experiences\n\nMarketing sites\n\nControl your story\n\nProducts & services\n\nInnovate and automate\n\nMobile apps\n\nContent backend for every OS\n\nView all \nINTEGRATIONS\nShopify\nMux\nVercel\nNetlify\nAlgolia\nCloudinary\nBigCommerce\nCommerce Layer\nSmartling\nTransifex\nView all \nDevelopers\nLEARN\nDocumentation\nStudio API Reference\nAPI reference\nGuides\nGROQ cheat sheet\nSanity UI\nGet started \nBUILD AND SHARE\nTemplates\nTools and plugins\nSchemas and snippets\nProject showcase\nShare your work\nBrowse Exchange \nFRAMEWORKS\nReact\nVue\nNext.js\nNuxt.js\nSvelte\nRemix\nGatsby\nAstro\nAngular\nEleventy\nView all \nResources\nDISCOVER\nBlog\nResource library\nGlossary\nAgency partners\nBecome a partner\nTechnical support\nTalk to sales \nCASE STUDIES\nPuma\n\nSource of truth for global markets\n\nAether\n\nUnique digital shopping experience\n\nMorning Brew\n\nOmnichannel media distribution\n\nInVision\n\nDelivering exceptional customer experiences\n\nView all \nPOPULAR GUIDES\nHeadless CMS\nStructured content\nContent modeling\nHeadless SEO\nStatic websites\nView all \nEnterprise\nPricing\nLog in\nContact sales\nGet started\nSearch\nOverview\nGetting started\nSanity Studio\nSetup and deployment\nConfiguration\nWorkspaces\nSchemas and forms\nConditional Fields\nField Groups\nList Previews\nConnected Content\nValidation\nInitial Values\nShared Content\nSort Orders\nBlock Content\nNEWVisual Editing\nAI Assist\nNEWComments\nCustomization\nWorkflows\nTools\nPlugins\nCommand Line Interface\nMigrating from v2\nContent Lake\nBuild with Sanity\nAccess control\nReference\nStudio v2 docs\nChangelog\nConditional fields\n\nHow to make field visibility conditional, based on other fields' values or on information about the current user.\n\nSometimes you want to reduce the cognitive load and the complexity of a content form by controlling the visibility of its fields, or make certain fields read-only under certain conditions. You can make fields in Sanity Studio's form appear and disappear using the hidden property, and make them read-only with the readOnly property on all field types. This also works on fieldsets. This feature is commonly referred to as “conditional fields”. The hidden and readOnly properties can take a static true or false value or a callback function that contains the specific logic you want and returns true or false accordingly.\n\nExamples\nHide based on a value in the current document\n\nOnly show the subtitle field if the title field is truthy:\n\n{\n  name: 'subtitle',\n  type: 'string',\n  title: 'Subtitle',\n  hidden: ({document}) => !document?.title\n}\nSet \"read-only\" based on the current user's role\n\nOnly show the productSKU field if the current user is an administrator:\n\n{\n  name: 'productSKU',\n  type: 'string',\n  title: 'SKU',\n  readOnly: ({currentUser}) => {\n    return !(currentUser.roles.find(({name}) => name === 'administrator'))\n  }\n}\nHide based on a value in a sibling field\n\nShow or hide a sibling field if it's empty and the current field has a value:\n\n{\n  name: 'link',\n  type: 'object',\n  title: 'Link',\n  fields: [\n    {\n      name: 'external',\n      type: 'url',\n      title: 'URL',\n      hidden: ({ parent, value }) => !value && parent?.internal\n    },\n    {\n      name: 'internal',\n      type: 'reference',\n      to: [{ type: 'route' }, { type: 'post' }],\n      hidden: ({ parent, value }) => !value && parent?.external\n    }\n  ]\n}\nSet \"read-only\" on an entire field set\n{\n  name: 'product',\n  type: 'document',\n  title: 'Product',\n\tfieldsets: [\n    {\n      name: 'links',\n      title: 'Links',\n      options: {columns: 2},\n      readOnly: ({document}) => document?.title === 'Hello world',\n    }\n  ],\n  fields: [\n\t\t {\n      name: 'title',\n      type: 'string',\n      title: 'Title',\n    },\n    {\n      name: 'external',\n      type: 'url',\n      title: 'URL',\n\t\t\tfieldset: 'links'\n    },\n    {\n      name: 'internal',\n      type: 'reference',\n      to: [{ type: 'route' }, { type: 'post' }],\n\t\t\tfieldset: 'links'\n    }\n  ]\n}\nGotcha\n\nYou can't return a promise to the hidden or readOnly properties. This is because of performance optimizations.\n\nEditor Experience\n\nBe mindful that Sanity Studio is a real-time collaborative application. That means that someone else can make a condition true that hides the field you're currently working in. You can consider mentioning if a field has a condition in its description, or by letting the content team know.\n\nReference\nCallback properties\n\nThe hidden callback function takes an object as an argument with the following properties:\n\ndocument\nobject\n\nThe current state of the document with all its values. Remember that it can return undefined. You can use optional chaining to avoid errors in the console, for example, document?.title.\n\nparent\nobject | undefined\n\nThe values of the field's parent. This is useful when the field is part of an object type. Remember that it can return undefined. You can use optional chaining to avoid errors in the console, for example, parent?.title.\n\nIf it's a root field, it will contain the document's values.\n\nvalue\nany\n\nThe field's current value.\n\ncurrentUser\nobject\n\nThe current user with the following fields:\n\nemail (string)\nid (string)\nname (string)\nprofileImage (string)role (string)\nroles (array of objects with name, title, description)\n\nUPDATED ON JULY 12, 2023\n\nWas this article helpful?\nNot at all\nSomewhat\nAbsolutely!\nI want to suggest an improvement to this article.\nPAGE CONTENT\nExamples\nHide based on a value in the current document\nSet \"read-only\" based on the current user's role\nHide based on a value in a sibling field\nSet \"read-only\" on an entire field set\nReference\nCallback properties\nProduct\nSanity Studio\nAPIs\nContent Lake\nSecurity & Compliance\nCompare Sanity \nResources\nDocumentation\nBlog\nResource library\nCase Studies\nGuides \nTemplates \nPartners \nExplainers \nCMS \nCompany\nContact Sales\nEnterprise\nCareers\nTerms of Service\nPrivacy Policy\nAccessibility Statement\nStay connected\nGitHub\nSlack\nTwitter\nYouTube\nStack Overflow\nBlog RSS\nNewsletter\n©Sanity 2023\nCookie preferences"
  },
  {
    "title": "Field Groups",
    "url": "https://www.sanity.io/docs/field-groups",
    "html": "Skip to content\nJoin live – Get insights, tips, + Q&A from Sanity developers on our latest releases \nProduct\nPLATFORM\nSanity Studio\n\nFlexible editing environment\n\nAPIs\n\nConnect to anything\n\nContent Lake\n\nReal-time database\n\nTry product demo \nFEATURES\nReal-time collaboration\n\nFearlessly work with content\n\nPrecise content querying\n\nTreat content as data with GROQ\n\nLocalization\n\nCoherent messaging across territories\n\nSolutions\nUSE CASES\nE-commerce\n\nRicher shopping experiences\n\nMarketing sites\n\nControl your story\n\nProducts & services\n\nInnovate and automate\n\nMobile apps\n\nContent backend for every OS\n\nView all \nINTEGRATIONS\nShopify\nMux\nVercel\nNetlify\nAlgolia\nCloudinary\nBigCommerce\nCommerce Layer\nSmartling\nTransifex\nView all \nDevelopers\nLEARN\nDocumentation\nStudio API Reference\nAPI reference\nGuides\nGROQ cheat sheet\nSanity UI\nGet started \nBUILD AND SHARE\nTemplates\nTools and plugins\nSchemas and snippets\nProject showcase\nShare your work\nBrowse Exchange \nFRAMEWORKS\nReact\nVue\nNext.js\nNuxt.js\nSvelte\nRemix\nGatsby\nAstro\nAngular\nEleventy\nView all \nResources\nDISCOVER\nBlog\nResource library\nGlossary\nAgency partners\nBecome a partner\nTechnical support\nTalk to sales \nCASE STUDIES\nPuma\n\nSource of truth for global markets\n\nAether\n\nUnique digital shopping experience\n\nMorning Brew\n\nOmnichannel media distribution\n\nInVision\n\nDelivering exceptional customer experiences\n\nView all \nPOPULAR GUIDES\nHeadless CMS\nStructured content\nContent modeling\nHeadless SEO\nStatic websites\nView all \nEnterprise\nPricing\nLog in\nContact sales\nGet started\nSearch\nOverview\nGetting started\nSanity Studio\nSetup and deployment\nConfiguration\nWorkspaces\nSchemas and forms\nConditional Fields\nField Groups\nList Previews\nConnected Content\nValidation\nInitial Values\nShared Content\nSort Orders\nBlock Content\nNEWVisual Editing\nAI Assist\nNEWComments\nCustomization\nWorkflows\nTools\nPlugins\nCommand Line Interface\nMigrating from v2\nContent Lake\nBuild with Sanity\nAccess control\nReference\nStudio v2 docs\nChangelog\nField Groups\n\nOrganize your content editing experience by grouping fields together under tabs.\n\nWhen editing documents in the Studio, it can sometimes be helpful to show certain fields together to provide context and alleviate visual input overload. Document and object types accept a groups property that you use to define the groups you want and you can assign fields to appear in the groups you have defined using the group property on a field. Fields can also appear in more than one group.\n\nLet's, for example, say you have a long document and want to focus on the fields related to SEO. To achieve this, we first define an SEO group in our document's properties and then add the property group: 'seo' to a field to make it appear in the SEO group:\n\nLeft: default view with all fields visible. Right: groups view with only relevant fields visible.\nProtip\n\nAdding default: true to the object setup in groups: [] will make it the default field group.\n\nThe schema to produce the document structure in the example above might look like this (note the groups property on the document itself, as well as the group property on the fields related to SEO):\n\nexport default {\n  name: 'article',\n  title: 'Article',\n  type: 'document',\n  groups: [\n    {\n      name: 'seo',\n      title: 'SEO',\n    },\n  ],\n  fields: [\n    {name: 'title', title: 'Title', type: 'string'},\n    {name: 'icon', title: 'Icon', type: 'image'},\n    {\n      name: 'related',\n      title: 'Related',\n      type: 'array',\n      of: [{type: 'reference', to: [{type: 'article'}]}],\n    },\n    {name: 'seoTitle', title: 'SEO title', type: 'string', group: 'seo'},\n    {name: 'seoKeywords', title: 'Keywords', type: 'string', group: 'seo'},\n    {name: 'seoSlug', title: 'Slug', type: 'slug', group: 'seo'},\n    {name: 'seoImage', title: 'Image', type: 'image', group: 'seo'},\n  ],\n}\n\nFields can belong to more than one group. Expanding on our previous example, let's say we would like another view showing only fields that include images. We might then create a new group called Media and add all the fields with a graphic element to it:\n\nA group showing only image fields\n\nTo do this, we'd add another group called Media in groups, and change the group property on our icon and seoImage fields to be an array of strings instead of a single string:\n\nexport default {\n  name: 'article',\n  title: 'Article',\n  type: 'document',\n  groups: [\n    {\n      name: 'seo',\n      title: 'SEO',\n    },\n    {\n      name: 'media',\n      title: 'Media',\n    },\n  ],\n  fields: [\n    {name: 'title', title: 'Title', type: 'string'},\n    {name: 'icon', title: 'Icon', type: 'image', group: 'media'},\n    {\n      name: 'related',\n      title: 'Related',\n      type: 'array',\n      of: [{type: 'reference', to: [{type: 'article'}]}],\n    },\n    {name: 'field1', title: 'SEO title', type: 'string', group: 'seo'},\n    {name: 'field2', title: 'Keywords', type: 'string', group: 'seo'},\n    {name: 'field3', title: 'Slug', type: 'slug', group: 'seo'},\n    {name: 'seoImage', title: 'Image', type: 'image', group: ['seo', 'media']},\n  ],\n}\nProtip\n\nUsing field groups in a document or object does not change the structure of the document, it only affects how and where fields appear in the Studio. \n\nIn addition to documents, field groups can also be defined on objects.\n\nGotcha\n\nA field inside an object, cannot appear in a group by itself.\n\nConditional field groups\n\nIt can be useful to make certain groups appear or hide based on certain conditions. A group can be conditionally hidden using the boolean values true or false, but you can also pass a function. This function passes currentUser, value, and parent as arguments, where value is the values of the current group and parent is an array of all the groups defined in the document or object.\n\nReference\n\nProperty: groups\n\nType: array\n\nDefined on document or object\n\ngroups: [\n\t{\n\t\tname: 'groupName',\n\t\ttitle: 'Group title',\n\t\ticon: CogIcon, // optional\n\t\tdefault: true, // optional, defaults to false\n\t  hidden: ({currentUser, value, parent}) => true // optional\n\t}\n]\n\nProperty: group\n\nType: string or array\n\nDefined on a field\n\n{\n\tname: 'fieldName',\n\ttitle: 'Field title', \n\ttype: 'string',\n\tgroup: 'groupName' // or ['groupName']\n}\n\nUPDATED ON DECEMBER 7, 2022\n\nWas this article helpful?\nNot at all\nSomewhat\nAbsolutely!\nI want to suggest an improvement to this article.\nPAGE CONTENT\nConditional field groups\nReference\nProduct\nSanity Studio\nAPIs\nContent Lake\nSecurity & Compliance\nCompare Sanity \nResources\nDocumentation\nBlog\nResource library\nCase Studies\nGuides \nTemplates \nPartners \nExplainers \nCMS \nCompany\nContact Sales\nEnterprise\nCareers\nTerms of Service\nPrivacy Policy\nAccessibility Statement\nStay connected\nGitHub\nSlack\nTwitter\nYouTube\nStack Overflow\nBlog RSS\nNewsletter\n©Sanity 2023\nCookie preferences"
  },
  {
    "title": "Schemas and Forms",
    "url": "https://www.sanity.io/docs/schemas-and-forms",
    "html": "Skip to content\nJoin live – Get insights, tips, + Q&A from Sanity developers on our latest releases \nProduct\nPLATFORM\nSanity Studio\n\nFlexible editing environment\n\nAPIs\n\nConnect to anything\n\nContent Lake\n\nReal-time database\n\nTry product demo \nFEATURES\nReal-time collaboration\n\nFearlessly work with content\n\nPrecise content querying\n\nTreat content as data with GROQ\n\nLocalization\n\nCoherent messaging across territories\n\nSolutions\nUSE CASES\nE-commerce\n\nRicher shopping experiences\n\nMarketing sites\n\nControl your story\n\nProducts & services\n\nInnovate and automate\n\nMobile apps\n\nContent backend for every OS\n\nView all \nINTEGRATIONS\nShopify\nMux\nVercel\nNetlify\nAlgolia\nCloudinary\nBigCommerce\nCommerce Layer\nSmartling\nTransifex\nView all \nDevelopers\nLEARN\nDocumentation\nStudio API Reference\nAPI reference\nGuides\nGROQ cheat sheet\nSanity UI\nGet started \nBUILD AND SHARE\nTemplates\nTools and plugins\nSchemas and snippets\nProject showcase\nShare your work\nBrowse Exchange \nFRAMEWORKS\nReact\nVue\nNext.js\nNuxt.js\nSvelte\nRemix\nGatsby\nAstro\nAngular\nEleventy\nView all \nResources\nDISCOVER\nBlog\nResource library\nGlossary\nAgency partners\nBecome a partner\nTechnical support\nTalk to sales \nCASE STUDIES\nPuma\n\nSource of truth for global markets\n\nAether\n\nUnique digital shopping experience\n\nMorning Brew\n\nOmnichannel media distribution\n\nInVision\n\nDelivering exceptional customer experiences\n\nView all \nPOPULAR GUIDES\nHeadless CMS\nStructured content\nContent modeling\nHeadless SEO\nStatic websites\nView all \nEnterprise\nPricing\nLog in\nContact sales\nGet started\nSearch\nOverview\nGetting started\nSanity Studio\nSetup and deployment\nConfiguration\nWorkspaces\nSchemas and forms\nConditional Fields\nField Groups\nList Previews\nConnected Content\nValidation\nInitial Values\nShared Content\nSort Orders\nBlock Content\nNEWVisual Editing\nAI Assist\nNEWComments\nCustomization\nWorkflows\nTools\nPlugins\nCommand Line Interface\nMigrating from v2\nContent Lake\nBuild with Sanity\nAccess control\nReference\nStudio v2 docs\nSchemas and Forms\n\nSchemas are the main mechanic for describing your content and how to interact with it in the studio.\n\nYou write schemas in plain JavaScript (or TypeScript) objects that let you describe your content model in Sanity Studio. The studio creates the forms and inputs needed to create and edit your content.\n\nAnatomy of Schemas:\n\nContent model or Schema: More of a conceptual thing like a diagram that details documents and their schema types or attributes present in a studio\n\nDocument Types: A collection of schema types used to build a standalone piece of content that typically consist of multiple fields, has a revision history, can be published, drafted, and can have queryable references between them.\n\nGotcha\n\nDocument types can be whatever you like, and does not have to map to “a page” or “a post”.\n\nForm: The order and structure of the schema types used for a document\n\nSchema types: Catch-all for attributes used on a form to make a document and maps to schema.types in the config API. Sometimes we use “field types” to talk about the same concept.\n\nSchemas are Content Models\n\nWhen we talk about a schema or the content model, we are referring to all the document types created for a studio. All document types are made of schema/field types. In short form:\n\nSchema —> All Document Types —> Use Schema/Field Types\nExample: Your first schema\n\nSchemas are declared in the root configuration for your Sanity Studio project, typically found in a file named sanity.config.js.\n\n// ./sanity.config.js\n\nimport {defineConfig} from 'sanity'\nimport {deskTool} from 'sanity/desk'\nimport {schemaTypes} from './schemas'\n\nexport default defineConfig({\n  name: 'default',\n  title: 'my-studio',\n\n  projectId: '<project-id>',\n  dataset: 'production',\n\n  plugins: [deskTool()],\n\n\n  schema: {\n\n    types: schemaTypes,\n\n  },\n\n})\n\n\nYou can declare your schemas inline in the configuration as an array of JavaScript objects, but the more common practice is to put your schemas in external files and import them into the schema.types-array.\n\nThe default studio setup when you create a new project in the CLI will include a folder at the root level called schemas with a single file called index.js. This file exports an array, which – depending on whether you started from a template or with a clean project – might be empty or might already contain some schemas.\n\nExample schema\n\nLet's look at an example schema for a person content type. We'll add a string field for the name of the person and an image field for a headshot.\n\n// ./schemas/person.js\n\nexport default {\n  name: 'person',\n  title: 'Person',\n  type: 'document',\n  fields: [\n    {\n      name: 'fullName',\n      title: 'Full name',\n      type: 'string',\n    },\n    {\n      name: 'portrait',\n      title: 'Portrait',\n      type: 'image',\n      options: {\n        hotspot: true,\n      }\n    }\n  ]\n}\n\nWe then import our schema into our main schema file (./schemas/index.js) and add it to the schema array.\n\n// ./schemas/index.js\nimport person from './person'\n\nexport const schemaTypes = [person]\n\nThe studio will now let you create a new \"Person\", and provide the form inputs needed to equip your person with a name and a photo.\n\nYour studio comes with a range of default schema types, such as the ones we just used to create this document, and these types can be combined to create an endless amount of data structures.\n\nLearn about all the built-in schema types available\n\nUPDATED ON MARCH 7, 2023\n\nWas this article helpful?\nNot at all\nSomewhat\nAbsolutely!\nI want to suggest an improvement to this article.\nPAGE CONTENT\nAnatomy of Schemas:\nSchemas are Content Models\nExample: Your first schema\nExample schema\nProduct\nSanity Studio\nAPIs\nContent Lake\nSecurity & Compliance\nCompare Sanity \nResources\nDocumentation\nBlog\nResource library\nCase Studies\nGuides \nTemplates \nPartners \nExplainers \nCMS \nCompany\nContact Sales\nEnterprise\nCareers\nTerms of Service\nPrivacy Policy\nAccessibility Statement\nStay connected\nGitHub\nSlack\nTwitter\nYouTube\nStack Overflow\nBlog RSS\nNewsletter\n©Sanity 2023\nCookie preferences"
  },
  {
    "title": "Workspaces",
    "url": "https://www.sanity.io/docs/workspaces",
    "html": "Skip to content\nJoin live – Get insights, tips, + Q&A from Sanity developers on our latest releases \nProduct\nPLATFORM\nSanity Studio\n\nFlexible editing environment\n\nAPIs\n\nConnect to anything\n\nContent Lake\n\nReal-time database\n\nTry product demo \nFEATURES\nReal-time collaboration\n\nFearlessly work with content\n\nPrecise content querying\n\nTreat content as data with GROQ\n\nLocalization\n\nCoherent messaging across territories\n\nSolutions\nUSE CASES\nE-commerce\n\nRicher shopping experiences\n\nMarketing sites\n\nControl your story\n\nProducts & services\n\nInnovate and automate\n\nMobile apps\n\nContent backend for every OS\n\nView all \nINTEGRATIONS\nShopify\nMux\nVercel\nNetlify\nAlgolia\nCloudinary\nBigCommerce\nCommerce Layer\nSmartling\nTransifex\nView all \nDevelopers\nLEARN\nDocumentation\nStudio API Reference\nAPI reference\nGuides\nGROQ cheat sheet\nSanity UI\nGet started \nBUILD AND SHARE\nTemplates\nTools and plugins\nSchemas and snippets\nProject showcase\nShare your work\nBrowse Exchange \nFRAMEWORKS\nReact\nVue\nNext.js\nNuxt.js\nSvelte\nRemix\nGatsby\nAstro\nAngular\nEleventy\nView all \nResources\nDISCOVER\nBlog\nResource library\nGlossary\nAgency partners\nBecome a partner\nTechnical support\nTalk to sales \nCASE STUDIES\nPuma\n\nSource of truth for global markets\n\nAether\n\nUnique digital shopping experience\n\nMorning Brew\n\nOmnichannel media distribution\n\nInVision\n\nDelivering exceptional customer experiences\n\nView all \nPOPULAR GUIDES\nHeadless CMS\nStructured content\nContent modeling\nHeadless SEO\nStatic websites\nView all \nEnterprise\nPricing\nLog in\nContact sales\nGet started\nSearch\nOverview\nGetting started\nSanity Studio\nSetup and deployment\nConfiguration\nWorkspaces\nSchemas and forms\nConditional Fields\nField Groups\nList Previews\nConnected Content\nValidation\nInitial Values\nShared Content\nSort Orders\nBlock Content\nNEWVisual Editing\nAI Assist\nNEWComments\nCustomization\nWorkflows\nTools\nPlugins\nCommand Line Interface\nMigrating from v2\nContent Lake\nBuild with Sanity\nAccess control\nReference\nStudio v2 docs\nWorkspaces\n\nLearn about working with multiple workspaces within a single studio setup\n\nSanity Studio can accommodate multiple workspaces, each with its very own configuration. To set up a studio with more than one workspace, simply supply an array of configurations to defineConfig instead of a single config object.\n\n// Multiple workspace configuration\nimport {defineConfig} from 'sanity'\nimport {RobotIcon, RocketIcon} from '@sanity/icons'\nimport {deskTool} from 'sanity/desk'\nimport {schemaTypes} from './schemas'\n\nexport default defineConfig([\n  {\n    projectId: '<projectId>',\n    dataset: 'production',\n    name: 'production-workspace',\n    basePath: '/production',\n    title: 'Default Workspace',\n    icon: RobotIcon,\n    plugins: [deskTool()],\n    schema: {\n      types: schemaTypes,\n    },\n  },\n  {\n    projectId: '<projectId>',\n    dataset: 'staging',\n    name: 'staging-workspace',\n    basePath: '/staging',\n    title: 'Another Workspace!',\n    icon: RocketIcon,\n    plugins: [deskTool()],\n    schema: {\n      types: schemaTypes,\n    },\n  },\n])\n\nThe studio will pick up your new workspace and display a dropdown next to the studio title in the navbar to let you quickly switch between workspaces.\n\nWorkspace configuration properties\n\nStudio configurations and workspace configurations are the same thing. We refer to them as studio configs when there's only one configuration, and as workspace configs when there are multiple configurations.\n\nIn practice, all configuration properties are workspace configuration properties. There are a few properties that, while legal and valid also for single workspaces, don't have actual value outside the context of a multi-workspace setup. For more information, see this reference article.\n\nUPDATED ON NOVEMBER 8, 2023\n\nWas this article helpful?\nNot at all\nSomewhat\nAbsolutely!\nI want to suggest an improvement to this article.\nProduct\nSanity Studio\nAPIs\nContent Lake\nSecurity & Compliance\nCompare Sanity \nResources\nDocumentation\nBlog\nResource library\nCase Studies\nGuides \nTemplates \nPartners \nExplainers \nCMS \nCompany\nContact Sales\nEnterprise\nCareers\nTerms of Service\nPrivacy Policy\nAccessibility Statement\nStay connected\nGitHub\nSlack\nTwitter\nYouTube\nStack Overflow\nBlog RSS\nNewsletter\n©Sanity 2023\nCookie preferences"
  },
  {
    "title": "Configuration",
    "url": "https://www.sanity.io/docs/configuration",
    "html": "Skip to content\nJoin live – Get insights, tips, + Q&A from Sanity developers on our latest releases \nProduct\nPLATFORM\nSanity Studio\n\nFlexible editing environment\n\nAPIs\n\nConnect to anything\n\nContent Lake\n\nReal-time database\n\nTry product demo \nFEATURES\nReal-time collaboration\n\nFearlessly work with content\n\nPrecise content querying\n\nTreat content as data with GROQ\n\nLocalization\n\nCoherent messaging across territories\n\nSolutions\nUSE CASES\nE-commerce\n\nRicher shopping experiences\n\nMarketing sites\n\nControl your story\n\nProducts & services\n\nInnovate and automate\n\nMobile apps\n\nContent backend for every OS\n\nView all \nINTEGRATIONS\nShopify\nMux\nVercel\nNetlify\nAlgolia\nCloudinary\nBigCommerce\nCommerce Layer\nSmartling\nTransifex\nView all \nDevelopers\nLEARN\nDocumentation\nStudio API Reference\nAPI reference\nGuides\nGROQ cheat sheet\nSanity UI\nGet started \nBUILD AND SHARE\nTemplates\nTools and plugins\nSchemas and snippets\nProject showcase\nShare your work\nBrowse Exchange \nFRAMEWORKS\nReact\nVue\nNext.js\nNuxt.js\nSvelte\nRemix\nGatsby\nAstro\nAngular\nEleventy\nView all \nResources\nDISCOVER\nBlog\nResource library\nGlossary\nAgency partners\nBecome a partner\nTechnical support\nTalk to sales \nCASE STUDIES\nPuma\n\nSource of truth for global markets\n\nAether\n\nUnique digital shopping experience\n\nMorning Brew\n\nOmnichannel media distribution\n\nInVision\n\nDelivering exceptional customer experiences\n\nView all \nPOPULAR GUIDES\nHeadless CMS\nStructured content\nContent modeling\nHeadless SEO\nStatic websites\nView all \nEnterprise\nPricing\nLog in\nContact sales\nGet started\nSearch\nOverview\nGetting started\nSanity Studio\nSetup and deployment\nConfiguration\nWorkspaces\nSchemas and forms\nConditional Fields\nField Groups\nList Previews\nConnected Content\nValidation\nInitial Values\nShared Content\nSort Orders\nBlock Content\nNEWVisual Editing\nAI Assist\nNEWComments\nCustomization\nWorkflows\nTools\nPlugins\nCommand Line Interface\nMigrating from v2\nContent Lake\nBuild with Sanity\nAccess control\nReference\nSANITY STUDIO\nStudio API Reference ↗\nConfiguration API\nSchema\nPlugins\nTools\nForm\nStudio Components\nDocument\nHistory experience\nDesk Tool\nTheme\nAuthentication\nStructure Builder\nStudio React Hooks\nCOMMAND LINE INTERFACES\nSanity CLI\nNEWEmbeddings Index CLI\nCONTENT LAKE\nHTTP API\nQuery language (GROQ)\nImage transformations\nINTEGRATION\nClient libraries\nVisual Editing Tooling\nPortable Text\nPROJECT MANAGEMENT\nNEWPlatform terminology\nProjects, organizations, and billing\nPlans and Payments\nStudio v2 docs\nChangelog\nConfiguration\n\nSanity Studio lets you quickly get up and running by configuring it with simple JavaScript or TypeScript. Because the configuration is in code, it lets you take advantage of developer tooling and less context switching in making an editing environment.\n\nConfiguration API - Reference\n\nLearn all about the primary mechanic for configuring your studio\n\nTypically, you find the studio configuration inside a sanity.config.js or .ts file located at the root of your project. The development server for Sanity Studio automatically picks up what's returned from the exported defineConfig function. This function takes either a single workspace configuration object or an array of configuration objects as its only argument. By implementing the pre-defined properties of this object you are able to customize a range of options and behaviors in the studio, as well as control how plugins and other studio extensions are configured.\n\nProtip\n\nAll these are valid file suffixes for the studio configuration file: .js , .jsx , .ts , .tsx\n\nMinimal studio configuration example\nSingle Studio configuration\n\nFor a single Studio configuration, the defineConfig function takes a single configuration object. The only required properties are projectId and dataset but, since this won’t make for a very useful studio, we've included the deskTool()-plugin and some schemas in our example to reflect a more typical setup.\n\nMore about Schemas and Forms ->\n\n// Single workspace configuration\n\nimport {defineConfig} from 'sanity'\nimport {deskTool} from 'sanity/desk'\nimport {schemaTypes} from './schemas'\n\nexport default defineConfig({\n  projectId: '<projectId>',\n\tdataset: 'production',\n  plugins: [deskTool()],\n  schema: {\n\t  types: schemaTypes,\n  },\n})\nMultiple workspace configurations\n\nWhen configuring multiple workspaces you supply an array of configuration objects. Each of these must, in addition to projectId and dataset, also include a unique basePath and name for each workspace.\n\nMore about Workspaces ->\n\n// Multiple workspace configuration\nimport {defineConfig} from 'sanity'\nimport {deskTool} from 'sanity/desk'\nimport {schemaTypes} from './schemas'\n\nexport default defineConfig([\n  {\n    projectId: '<projectId>',\n    dataset: 'production',\n    name: 'production-workspace',\n    basePath: '/production',\n    title: 'Production',\n    plugins: [deskTool()],\n    schema: {\n      types: schemaTypes,\n    },\n  },\n  {\n    projectId: '<projectId>',\n    dataset: 'staging',\n    name: 'staging-workspace',\n    basePath: '/staging',\n    title: 'Staging',\n    plugins: [deskTool()],\n    schema: {\n      types: schemaTypes,\n    },\n  },\n])\nProperty callback functions\n\nMany of the properties of the config object have the option of accepting a callback function instead of a static value. These callbacks are usually invoked with the previous value and a context object.\n\nimport {defineConfig} from 'sanity'\nimport {deskTool} from 'sanity/desk'\nimport {schemaTypes} from './schemas'\n\nexport default defineConfig({\n  projectId: '<projectId>',\n\tdataset: 'production',\n  plugins: [deskTool()],\n\tschema: {\n    types: (prev, context) => {\n      console.log(context);// logs { projectId, dataset }\n      return [...schemaTypes, ...prev]\n    },\n  },\n})\nGotcha\n\nIf you choose to use the callback function you need to make sure you return the previous value along with whatever new value you want to add. When using static values this is handled automatically by the studio.\n\nThe information included in the context object varies depending on the property in question.\n\nimport {defineConfig} from 'sanity'\nimport {deskTool} from 'sanity/desk'\nimport {schemaTypes} from './schemas'\n\nexport default defineConfig({\n  projectId: '<projectId>',\n\tdataset: 'production',\n  plugins: [deskTool()],\n\tschema: {\n    types: schemaTypes,\n  },\n\ttools: (prev, context) => {\n    console.log(context) // logs { getClient, currentUser, schema, projectId, dataset}\n    return [\n      {\n        name: 'my-tool',\n        title: 'My super-cool tool',\n        icon: RocketIcon,\n        component: (props) => <Card>I am a tool, albeit not a useful one</Card>,\n      },\n      ...prev, // remember to include previous values\n    ]\n  },\n})\nGotcha\n\nThe example above includes some JSX in the inline component declaration. Vite, the default studio bundler, requires files that contain JSX to have a file extension or either .jsx or .tsx.\n\nCommonly used configuration properties\nWorkspace properties\n\nEvery workspace configuration needs to at least include appropriate string values for dataset and projectId. If you are working with multiple workspaces in your studio, each workspace should also include a name and basePath.\n\n//⬇ Required\ndataset: 'production',\nprojectId: '<projectId>',\n//⬇ Optional if only using a single workspace\nname: 'cool-studio',  \nbasePath: '/my-default-workspace',\n//⬇ Optional \ntitle: 'My Cool Studio', \nicon: RocketIcon, \n\nMore about Workspaces ->\n\nSchema\n\nThe schema property is where you declare your schema types. You can specify a static array of schema objects or a callback function that returns such an array.\n\nschema: {\n\ttypes: mySchemas,\n}\nschema: {\n  types: (prev, context) => {\n    console.log(context) // logs { projectId, dataset' }\n    return [...mySchemas, ...prev]\n  },\n},\n\nYou may also set initial value templates using the aptly named templates property. You can specify a static array of template objects or a callback function that returns such an array.\n\nschema: {\n    templates: (prev) => [\n\t\t  {\n\t\t    id: 'category-child',\n\t\t    title: 'Category: Child',\n\t\t    schemaType: 'category',\n\t\t    parameters: [{name: `parentId`, title: `Parent ID`, type: `string`}],\n\t\t    value: ({parentId}) => ({\n\t\t      parent: {_type: 'reference', _ref: parentId},\n\t\t    }),\n\t\t  },\n\t\t  {\n\t\t    id: 'article-with-author',\n\t\t    title: 'Article: Author',\n\t\t    schemaType: 'article',\n\t\t    parameters: [{name: `authorId`, title: `Author ID`, type: `string`}],\n\t\t    value: ({authorId}) => ({\n\t\t      author: authorId,\n\t\t    }),\n\t\t  },\n\t\t  ...prev,\n\t\t]\n  },\n\nMore about Schemas ->\n\nPlugins\n\nThis is where you declare plugins for your studio. It accepts a static array of plugin config objects or a callback function that returns such an array. The default studio templates come with the deskTool plugin included already.\n\nplugins: [deskTool()],\n\nYou’ll notice that the plugin function usually needs to be invoked, not just referred to. This is because plugins, by convention, are functions that can accept configuration options as arguments.\n\nplugins: [\n    deskTool(),\n    visionTool({\n      defaultApiVersion: 'v2021-10-21',\n      defaultDataset: 'production',\n    }),\n  ],\n\nMore about Plugins ->\n\nTools\n\nTools are full page-components, in that they “take over” most of the studio interface when activated, just like the desk-tool or vision plugin. Because of this behavior they also show up in your studio’s nav bar, and they can be navigated to by appending their name to your studio’s URL. E.g. https://my-cool-site.com/studio/my-tool.\n\nTools are declared much in the same way as plugins. The property accepts either a static array of tool configuration objects or a callback function that returns such an array.\n\n  tools: [\n    {name: 'my-tool', title: 'My Tool', component: MyTool},\n    {name: 'tool-2', title: '2nd Tool', component: MyOtherTool},\n  ],\n\n // Example using the callback function with some conditional logic\n  tools: (prev, {currentUser}) => {\n    if (currentUser.roles.find((r) => r.name === 'admin')) {\n      return [\n\t\t\t\t...prev,\n\t\t\t\t{name: 'admin', title: 'Admin', component: MyAdminTool},\n\t\t\t]\n    }\n\t\treturn prev\n  },\n\nMore about Tools ->\n\nForm\n\nThe form config property lets you configure asset sources for files and images, as well as override the default rendering of form components.\n\nform: {\n\tfile: {\n    assetSources: myFileAssetSourceResolver,\n    directUploads: true,\n  }\n  image: {\n    assetSources: myImageAssetSourceResolver,\n    directUploads: true,\n  },\n  components: {\n\t\t// TODO: Better example\n\t\tinput: (props) => isStringInputProps(props) ? <MyCustomStringInput {...props} /> : props.renderDefault(props),\n\t\tfield: MyCustomField,\n\t}\n},\nGotcha\n\nOverriding the rendering of inputs and fields in the top level studio configuration will affect all fields in your studio. If you wish to customize the rendering of only certain fields, you probably want to do so by setting the components property of the appropriate fields. More info: Introduction to Component API.\n\nMore about Asset Sources ->\n\nMore about Form Components ->\n\nDocument\n\nThis property lets you configure document actions and badges, as well as set a productionUrl for previews and specify options for new documents.\n\ndocument: {\n  actions: (prev) =>\n    prev.map((previousAction) =>\n      previousAction.action === 'publish' ? MyPublishAction : previousAction\n    ),\n  productionUrl: (prev, context) => {\n    return `http://example.com/${context.document?.slug?.current || '404.html'}`\n  },\n},\n\nMore about Actions & Badges ->\n\nAuth\n\nThis property lets you implement custom authentication by providing a configuration object that conforms to the AuthConfig signature.\n\nimport {defineConfig} from 'sanity'\n/* ... */\n\nauth: {\n  redirectOnSingle: false,\n  mode: 'append',\n  providers: [\n    {\n      name: 'vandelay',\n      title: 'Vandelay Industries',\n      url: 'https://api.vandelay.industries/login',\n      logo: '/static/img/vandelay.svg'\n    }\n  ],\n  loginMethod: 'dual',\n}\n\nMore about Authentication ->\n\nUPDATED ON AUGUST 8, 2023\n\nWas this article helpful?\nNot at all\nSomewhat\nAbsolutely!\nI want to suggest an improvement to this article.\nPAGE CONTENT\nMinimal studio configuration example\nSingle Studio configuration\nMultiple workspace configurations\nProperty callback functions\nCommonly used configuration properties\nWorkspace properties\nSchema\nPlugins\nTools\nForm\nDocument\nAuth\nProduct\nSanity Studio\nAPIs\nContent Lake\nSecurity & Compliance\nCompare Sanity \nResources\nDocumentation\nBlog\nResource library\nCase Studies\nGuides \nTemplates \nPartners \nExplainers \nCMS \nCompany\nContact Sales\nEnterprise\nCareers\nTerms of Service\nPrivacy Policy\nAccessibility Statement\nStay connected\nGitHub\nSlack\nTwitter\nYouTube\nStack Overflow\nBlog RSS\nNewsletter\n©Sanity 2023\nCookie preferences"
  },
  {
    "title": "Embedding Sanity Studio",
    "url": "https://www.sanity.io/docs/embedding-sanity-studio",
    "html": "Skip to content\nJoin live – Get insights, tips, + Q&A from Sanity developers on our latest releases \nProduct\nPLATFORM\nSanity Studio\n\nFlexible editing environment\n\nAPIs\n\nConnect to anything\n\nContent Lake\n\nReal-time database\n\nTry product demo \nFEATURES\nReal-time collaboration\n\nFearlessly work with content\n\nPrecise content querying\n\nTreat content as data with GROQ\n\nLocalization\n\nCoherent messaging across territories\n\nSolutions\nUSE CASES\nE-commerce\n\nRicher shopping experiences\n\nMarketing sites\n\nControl your story\n\nProducts & services\n\nInnovate and automate\n\nMobile apps\n\nContent backend for every OS\n\nView all \nINTEGRATIONS\nShopify\nMux\nVercel\nNetlify\nAlgolia\nCloudinary\nBigCommerce\nCommerce Layer\nSmartling\nTransifex\nView all \nDevelopers\nLEARN\nDocumentation\nStudio API Reference\nAPI reference\nGuides\nGROQ cheat sheet\nSanity UI\nGet started \nBUILD AND SHARE\nTemplates\nTools and plugins\nSchemas and snippets\nProject showcase\nShare your work\nBrowse Exchange \nFRAMEWORKS\nReact\nVue\nNext.js\nNuxt.js\nSvelte\nRemix\nGatsby\nAstro\nAngular\nEleventy\nView all \nResources\nDISCOVER\nBlog\nResource library\nGlossary\nAgency partners\nBecome a partner\nTechnical support\nTalk to sales \nCASE STUDIES\nPuma\n\nSource of truth for global markets\n\nAether\n\nUnique digital shopping experience\n\nMorning Brew\n\nOmnichannel media distribution\n\nInVision\n\nDelivering exceptional customer experiences\n\nView all \nPOPULAR GUIDES\nHeadless CMS\nStructured content\nContent modeling\nHeadless SEO\nStatic websites\nView all \nEnterprise\nPricing\nLog in\nContact sales\nGet started\nSearch\nOverview\nGetting started\nSanity Studio\nSetup and deployment\nInstallation\nProject structure\nDevelopment\nHosting and deployment\nEnvironment variables\nEmbedding Sanity Studio\nUsing TypeScript\nConfiguration\nBlock Content\nNEWVisual Editing\nAI Assist\nNEWComments\nCustomization\nWorkflows\nTools\nPlugins\nCommand Line Interface\nMigrating from v2\nContent Lake\nBuild with Sanity\nAccess control\nReference\nStudio v2 docs\nEmbedding Sanity Studio\n\nSanity Studio is a React application distributed as a single dependency on npm. The application bundle is also ESM-compatible, meaning that it can be imported directly into browsers as a dependency on an URL. In principle, this means you can embed the Studio in any web application, as long as you can control the routing to redirect all Studio URLs to the page it‘s hosted.\n\nAdding the Studio as a dependency with npm\n\nIf you work on a project where node package manager is supported, you can add the Studio as a dependency using the following command:\n\nnpm install sanity@latest\nProtip\n\nIf you plan to do Studio customization, then it can be useful to install @sanity/ui and @sanity/icons as well.\n\nAccommodating the Studio\nGotcha\n\nIt's easy to forget, but you will always have to add the domain where you host your Studio to your project's CORS origins settings with authenticated requests enabled. \n\nStyling\n\nThe Studio is built as a responsive web app. For the best editor experience, it should take the full width and height of the browser window. This means that you have to make sure that the DOM node that the Studio is mounted on is styled accordingly:\n\n/* This assumes no margin or padding on #app's parent(s) */\n#app {\n  height: 100vh;\n  max-height: 100dvh;\n  overscroll-behavior: none;\n  -webkit-font-smoothing: antialiased;\n  overflow: auto;\n}\n\nRouting\n\nIf you embed the Studio inside of another app, it's likely you want to access it on a sub-route, e.g /studio or /admin. This means that you have to:\n\nAdd this route to basePath in the Studio‘s configuration object\nMake sure that the app's routing redirects all the Studio's sub routes to the page/view where the Studio is mounted.\n\nFrontend frameworks with file-based routing like Next.js, Nuxt.js, Svelte, Remix, Astro, and others, have conventions for “catch-all”, “rest”, or “splat” routes. These can be used to make sure that all routes under the Studio‘s basePath will be redirected and resolved by the Studio application.\n\nIf you are embedding the Studio outside of a framework like this, then you need to control the redirects on the server or hosting level. For example, if you host with Netlify, then you need to add a setting like this:\n\n# netlify.toml\n[[redirects]]\n  from = \"/admin/*\"\n  to = \"/admin\"\n  status = 301\n  force = true\nEmbedding Sanity Studio in a Next.js app\n\nIf you want to embed Sanity Studio in a Next.js project, then you can use the official next-sanity library. In addition to making embedding the studio easier, it also comes with tools for live preview and other useful things.\n\nLearn more about next-sanity\nRendering the Studio in non-React applications\n\nIf you aren't in a React project, then you can use the renderStudio function to mount it on a DOM node:\n\nimport { renderStudio,defineConfig } from \"sanity\";\nimport { deskTool } from \"sanity/desk\";\n      \nconst config = defineConfig({\n  plugins: [deskTool()],\n  name: \"Sanity Studio\",\n  projectId: \"your-project-id\",\n  dataset: \"production\",\n  schema: {\n    types: [\n      {\n        type: \"document\",\n        name: \"post\",\n        title: \"Post\",\n        fields: [\n          {\n            type: \"string\",\n            name: \"title\",\n            title: \"Title\"\n          }\n        ]\n      }\n    ]\n  }\n});\n\n// This assumes that there is a <div id=\"app\"></div> node in the HTML structure where this code is executed.\nrenderStudio(document.getElementById(\"app\"), config);\nImporting the Studio with URL imports\n\nYou can also import the Studio dependency using a URL import. This is possible because the Studio is ESM-ready. The following code will work in most modern browsers:\n\n<html>\n  <head>\n    <style>\n      html {\n        -webkit-text-size-adjust: 100%;\n        text-size-adjust: 100%;\n        -webkit-tap-highlight-color: transparent;\n        -webkit-font-smoothing: antialiased;\n      }\n      html,\n      body,\n      #app {\n        height: 100%;\n        margin: 0;\n        overflow: hidden;\n      }\n    </style>\n  </head>\n  <body>\n    <div id=\"app\"></div> \n    <script type=\"module\">\n      import { defineConfig, renderStudio } from \"https://esm.sh/sanity\"\n      import { deskTool } from \"https://esm.sh/sanity/desk\"\n\n      const config = defineConfig({\n        plugins: [deskTool()],\n        projectId: \"your-project-id\",\n        dataset: \"production\",\n        schema: {\n          types: [\n            {\n              type: \"document\",\n              name: \"post\",\n              title: \"Post\",\n              fields: [\n                {\n                  type: \"string\",\n                  name: \"title\",\n                  title: \"Title\"\n                }\n              ]\n            }\n          ]\n        }\n      });\n      renderStudio(document.getElementById(\"app\"), config);\n    </script>\n  </body>\n</html>\n\nUPDATED ON MARCH 13, 2023\n\nWas this article helpful?\nNot at all\nSomewhat\nAbsolutely!\nI want to suggest an improvement to this article.\nPAGE CONTENT\nAdding the Studio as a dependency with npm\nAccommodating the Studio\nStyling\nRouting\nEmbedding Sanity Studio in a Next.js app\nRendering the Studio in non-React applications\nImporting the Studio with URL imports\nProduct\nSanity Studio\nAPIs\nContent Lake\nSecurity & Compliance\nCompare Sanity \nResources\nDocumentation\nBlog\nResource library\nCase Studies\nGuides \nTemplates \nPartners \nExplainers \nCMS \nCompany\nContact Sales\nEnterprise\nCareers\nTerms of Service\nPrivacy Policy\nAccessibility Statement\nStay connected\nGitHub\nSlack\nTwitter\nYouTube\nStack Overflow\nBlog RSS\nNewsletter\n©Sanity 2023\nCookie preferences"
  },
  {
    "title": "Using TypeScript in Sanity Studio",
    "url": "https://www.sanity.io/docs/using-typescript-in-sanity-studio",
    "html": "Skip to content\nJoin live – Get insights, tips, + Q&A from Sanity developers on our latest releases \nProduct\nPLATFORM\nSanity Studio\n\nFlexible editing environment\n\nAPIs\n\nConnect to anything\n\nContent Lake\n\nReal-time database\n\nTry product demo \nFEATURES\nReal-time collaboration\n\nFearlessly work with content\n\nPrecise content querying\n\nTreat content as data with GROQ\n\nLocalization\n\nCoherent messaging across territories\n\nSolutions\nUSE CASES\nE-commerce\n\nRicher shopping experiences\n\nMarketing sites\n\nControl your story\n\nProducts & services\n\nInnovate and automate\n\nMobile apps\n\nContent backend for every OS\n\nView all \nINTEGRATIONS\nShopify\nMux\nVercel\nNetlify\nAlgolia\nCloudinary\nBigCommerce\nCommerce Layer\nSmartling\nTransifex\nView all \nDevelopers\nLEARN\nDocumentation\nStudio API Reference\nAPI reference\nGuides\nGROQ cheat sheet\nSanity UI\nGet started \nBUILD AND SHARE\nTemplates\nTools and plugins\nSchemas and snippets\nProject showcase\nShare your work\nBrowse Exchange \nFRAMEWORKS\nReact\nVue\nNext.js\nNuxt.js\nSvelte\nRemix\nGatsby\nAstro\nAngular\nEleventy\nView all \nResources\nDISCOVER\nBlog\nResource library\nGlossary\nAgency partners\nBecome a partner\nTechnical support\nTalk to sales \nCASE STUDIES\nPuma\n\nSource of truth for global markets\n\nAether\n\nUnique digital shopping experience\n\nMorning Brew\n\nOmnichannel media distribution\n\nInVision\n\nDelivering exceptional customer experiences\n\nView all \nPOPULAR GUIDES\nHeadless CMS\nStructured content\nContent modeling\nHeadless SEO\nStatic websites\nView all \nEnterprise\nPricing\nLog in\nContact sales\nGet started\nSearch\nOverview\nGetting started\nSanity Studio\nSetup and deployment\nInstallation\nProject structure\nDevelopment\nHosting and deployment\nEnvironment variables\nEmbedding Sanity Studio\nUsing TypeScript\nConfiguration\nBlock Content\nNEWVisual Editing\nAI Assist\nNEWComments\nCustomization\nWorkflows\nTools\nPlugins\nCommand Line Interface\nMigrating from v2\nContent Lake\nBuild with Sanity\nAccess control\nReference\nStudio v2 docs\nUsing TypeScript in Sanity Studio\n\nHow to use TypeScript with Sanity Studio\n\nTypeScript is a superset of JavaScript that adds optional static typing to the language. You can learn more about TypeScript in their getting started guide.\n\nIf you initiate a Sanity Studio with the CLI, then TypeScript will be the default. Sanity Studio uses Vite to perform the transpilation of TypeScript files.\n\nGotcha\n\nIf you customize the Studio with your own React components, that is, using JSX syntax, you will have to (re)name the file as .tsx. \n\nInline documentation with TSDoc\n\nThe Sanity Studio codebase uses TSDoc for inline documentation. This is still a work in progress. However, you can already inspect if an API is considered internal, beta, or public:\n\n@internal: Not considered as stable for public consumption. If you rely on internal APIs, they might break between minor semver releases\n@beta: APIs that we intend to ship as public-facing, but that we are testing externally and might be subject to change between minor semver releases. We will make our best effort to document breaking changes for @beta APIs in the release notes.\n@public: These are public APIs that you can use confidently. Breaking changes will only happen in major semver releases and will be documented.\nDefault tsconfig.json\n\nIf you initiate a studio project using the Sanity CLI and don't opt out of TypeScript, then it will generate the following tsconfig.json:\n\n{\n  \"compilerOptions\": {\n    \"target\": \"es2017\",\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"allowJs\": true,\n    \"skipLibCheck\": true,\n    \"strict\": true,\n    \"forceConsistentCasingInFileNames\": true,\n    \"noEmit\": true,\n    \"esModuleInterop\": true,\n    \"module\": \"esnext\",\n    \"moduleResolution\": \"node\",\n    \"resolveJsonModule\": true,\n    \"isolatedModules\": true,\n    \"jsx\": \"preserve\",\n    \"incremental\": true\n  },\n  \"include\": [\"**/*.ts\", \"**/*.tsx\"],\n  \"exclude\": [\"node_modules\"]\n}\n\nUPDATED ON DECEMBER 7, 2022\n\nWas this article helpful?\nNot at all\nSomewhat\nAbsolutely!\nI want to suggest an improvement to this article.\nPAGE CONTENT\nInline documentation with TSDoc\nDefault tsconfig.json\nProduct\nSanity Studio\nAPIs\nContent Lake\nSecurity & Compliance\nCompare Sanity \nResources\nDocumentation\nBlog\nResource library\nCase Studies\nGuides \nTemplates \nPartners \nExplainers \nCMS \nCompany\nContact Sales\nEnterprise\nCareers\nTerms of Service\nPrivacy Policy\nAccessibility Statement\nStay connected\nGitHub\nSlack\nTwitter\nYouTube\nStack Overflow\nBlog RSS\nNewsletter\n©Sanity 2023\nCookie preferences"
  },
  {
    "title": "Environment Variables",
    "url": "https://www.sanity.io/docs/environment-variables",
    "html": "Skip to content\nJoin live – Get insights, tips, + Q&A from Sanity developers on our latest releases \nProduct\nPLATFORM\nSanity Studio\n\nFlexible editing environment\n\nAPIs\n\nConnect to anything\n\nContent Lake\n\nReal-time database\n\nTry product demo \nFEATURES\nReal-time collaboration\n\nFearlessly work with content\n\nPrecise content querying\n\nTreat content as data with GROQ\n\nLocalization\n\nCoherent messaging across territories\n\nSolutions\nUSE CASES\nE-commerce\n\nRicher shopping experiences\n\nMarketing sites\n\nControl your story\n\nProducts & services\n\nInnovate and automate\n\nMobile apps\n\nContent backend for every OS\n\nView all \nINTEGRATIONS\nShopify\nMux\nVercel\nNetlify\nAlgolia\nCloudinary\nBigCommerce\nCommerce Layer\nSmartling\nTransifex\nView all \nDevelopers\nLEARN\nDocumentation\nStudio API Reference\nAPI reference\nGuides\nGROQ cheat sheet\nSanity UI\nGet started \nBUILD AND SHARE\nTemplates\nTools and plugins\nSchemas and snippets\nProject showcase\nShare your work\nBrowse Exchange \nFRAMEWORKS\nReact\nVue\nNext.js\nNuxt.js\nSvelte\nRemix\nGatsby\nAstro\nAngular\nEleventy\nView all \nResources\nDISCOVER\nBlog\nResource library\nGlossary\nAgency partners\nBecome a partner\nTechnical support\nTalk to sales \nCASE STUDIES\nPuma\n\nSource of truth for global markets\n\nAether\n\nUnique digital shopping experience\n\nMorning Brew\n\nOmnichannel media distribution\n\nInVision\n\nDelivering exceptional customer experiences\n\nView all \nPOPULAR GUIDES\nHeadless CMS\nStructured content\nContent modeling\nHeadless SEO\nStatic websites\nView all \nEnterprise\nPricing\nLog in\nContact sales\nGet started\nSearch\nOverview\nGetting started\nSanity Studio\nSetup and deployment\nInstallation\nProject structure\nDevelopment\nHosting and deployment\nEnvironment variables\nEmbedding Sanity Studio\nUsing TypeScript\nConfiguration\nBlock Content\nNEWVisual Editing\nAI Assist\nNEWComments\nCustomization\nWorkflows\nTools\nPlugins\nCommand Line Interface\nMigrating from v2\nContent Lake\nBuild with Sanity\nAccess control\nReference\nStudio v2 docs\nEnvironment Variables\n\nYou can use environment variables to dynamically configure the Studio depending on what context it‘s in.\n\nNote: Make sure you are using version 3.5.0 or later in order to make full use of environment variables.\n\nExposed variables\n\nEnvironment variables prefixed with SANITY_STUDIO_ are automatically picked up by the Sanity CLI tool, development server and bundler.\n\nAny found environment variables are available as process.env.SANITY_STUDIO_VARIABLE_NAME - even in browser code.\n\nBy requiring this SANITY_STUDIO_ prefix, we prevent unrelated (and potentially sensitive) environment variables from getting exposed to the browser bundle.\n\nStatic replacement\n\nIt is important to note that these variables are statically replaced during production. It is therefore necessary to always reference them using the full static string. For example, dynamic key access like process.env[key] will not work (they might be accessible this way in development, but will fail in production).\n\nSimilarly, logging or iterating over process.env will not give you consistent results in development and production - in production, process.env will be said to be undefined, as all the values are statically replaced during the build. In other words:\n\n// In development:\nconst studioTitle = process.env.SANITY_STUDIO_TITLE\n\n// In production:\nconst studioTitle = \"the value of the env var\"\n\nNote that during a build, it will also replace these references appearing in JavaScript strings. This should be a rare case, but it can have unintended side effects. You may see errors like Missing semicolon or Unexpected token. One way to work around this behavior is to break the string up with a Unicode zero-width space, e.g. 'process\\u200b.env.SANITY_STUDIO_FOO'.\n\nKeeping secret things secret\n\nIt is common practice to keep secret tokens and API keys as environment variables that are not checked into version control. This is a decent strategy for server-side applications where the runtime is protected. However, since the Studio is a client-side application, you will have to approach secrets differently. We recommend using the Sanity Secrets library that gives you hooks and UI components for handling secrets.\n\nMake sure that your .env.local files are ignored by your version control system (usually git), and do not put sensitive information or keys into the .env files commited.\n\nLoading variables from .env files\n\nSanity will read .env files by default and make its variables available for the development server, production builds, command line actions and similar. Note that you still have to follow the variable naming conventions mentioned above. We also support env loading priorities for situations where you want to differentiate between sharing certain variables in all environments and overwriting them for production builds.\n\n.env               # loaded in all cases\n.env.local         # loaded in all cases, ignored by git\n.env.[mode]        # only loaded in specified mode\n.env.[mode].local  # only loaded in specified mode, ignored by git\n\n\nAlso, Sanity uses dotenv-expand to expand variables out of the box. To learn more about the syntax, check out their docs.\n\nManually declared environment variables (outside of .env files) take precedence, overriding any values set in .env files.\n\nModes\n\nBy default, the build and deploy commands runs in production mode, while all other commands run in development mode. Other commands can be run in production mode by setting NODE_ENV to production (note that only this value is supported; for other modes, use SANITY_ACTIVE_ENV).\n\nThis means when running sanity build, it will load the environment variables from .env.production if that file exists. For example:\n\n# .env.production\nSANITY_STUDIO_TITLE=My Studio\n\nGiven this environment variable, you could then render the title in your app using process.env.SANITY_STUDIO_TITLE.\n\nIn some cases, you may want to run sanity build with a different mode to render a different title. You can overwrite the default mode used for a command by setting an environment variable named SANITY_ACTIVE_ENV. For example, if you want to build your studio for a staging mode:\n\nSANITY_ACTIVE_ENV=staging sanity build\n\nAnd create an .env.staging file:\n\n# .env.staging\nSANITY_STUDIO_TITLE=My Studio (staging)\nBest practices\n\nWe encourage you to keep environment variables to a minimum, and not spread them throughout the code base. Common (and valid) use cases are things like configuration files.\n\nTo more easily be able to tell which environment variables are used, and keep things as tidy as possible, we recommend having a single file that re-exports environment variables to the rest of your code. For instance:\n\n// src/environment.ts\nexport const myStudioTitle = process.env.SANITY_STUDIO_TITLE\nexport const myCompanyApiUrl = process.env.SANITY_STUDIO_COMPANY_API_URL\n\n\nSimilarly, plugins should generally never use environment variables directly - instead, they should take a configuration object which the user can then choose to pass environment variables to:\n\nimport {somePluginApiUrl} from './src/environment'\n\ndefineConfig({\n  plugins: [\n    // ...\n    somePlugin({\n      // process.env.SANITY_STUDIO_SOME_PLUGIN_API_URL\n      apiUrl: somePluginApiUrl\n    })\n  ]\n})\nDifferences from Vite\n\nSanity's environment variable behavior is heavily inspired by (and partially powered by) Vite. There is however one key difference:\n\nVite exposes environment variables under import.meta.env. While Sanity also lets you access them that way, we heavily recommend that you access them using process.env.\n\nUsing process.env allows us to expose the same variables to both the browser and Node.js/Node.js powered tools without too much work. It also eases cross-environment migrations, such as moving from the default Vite-based bundler to (for instance) an embedded setup inside of Next.js.\n\nProgrammatic usage\n\nShould you want to reuse the environment variable handling in other contexts (your own scripts, or using a different bundler etc), you can import and utilize the getStudioEnvironmentVariables() method from sanity/cli:\n\nimport {getStudioEnvironmentVariables} from 'sanity/cli'\n\nconsole.log(getStudioEnvironmentVariables())\n// {SANITY_STUDIO_SOME_VAR: 'yourVariableValue'}\n\n\nNote that .env files are not loaded by default when using this method. To do so, pass an envFile option:\n\nimport {getStudioEnvironmentVariables} from 'sanity/cli'\n\nconsole.log(\n  getStudioEnvironmentVariables({\n    envFile: {\n      mode: 'production',\n      envDir: '/path/to/some-dotenv-root'\n    }\n  })\n)\n\n\nFor usage in bundlers (such as Vite's define option or Webpacks DefinePlugin), you'll usually want the keys to be fully qualified with the process.env prefix, and the values to be JSON-encoded. The method can do all of this for you:\n\nimport {getStudioEnvironmentVariables} from 'sanity/cli'\n\nconsole.log(\n  getStudioEnvironmentVariables({\n    jsonEncode: true,\n    prefix: 'process.env.'\n  })\n)\n\nBuilt-in Studio Environment Variables\n\nThe following environment variables are integrated in the Studio code base and will be picked up when specified in a .env file (see Loading variables from .env files above). Note that they only apply when using the sanity CLI; if you render using your own bundler, these will not work.\n\nSANITY_STUDIO_BASEPATH            Sets the base path for the studio\nSANITY_STUDIO_SERVER_HOSTNAME     Hostname for the development/preview server\n                                  (localhost by default)\nSANITY_STUDIO_SERVER_PORT         Port number for the development/preview server\n                                  (3333 by default)\nSANITY_STUDIO_REACT_STRICT_MODE   Enable React strict mode. Its use is discouraged\n                                  unless you know what you're doing, as it leads\n                                  to worse performance in development\n\nUPDATED ON JUNE 30, 2023\n\nWas this article helpful?\nNot at all\nSomewhat\nAbsolutely!\nI want to suggest an improvement to this article.\nPAGE CONTENT\nExposed variables\nStatic replacement\nKeeping secret things secret\nLoading variables from .env files\nModes\nBest practices\nDifferences from Vite\nProgrammatic usage\nBuilt-in Studio Environment Variables\nProduct\nSanity Studio\nAPIs\nContent Lake\nSecurity & Compliance\nCompare Sanity \nResources\nDocumentation\nBlog\nResource library\nCase Studies\nGuides \nTemplates \nPartners \nExplainers \nCMS \nCompany\nContact Sales\nEnterprise\nCareers\nTerms of Service\nPrivacy Policy\nAccessibility Statement\nStay connected\nGitHub\nSlack\nTwitter\nYouTube\nStack Overflow\nBlog RSS\nNewsletter\n©Sanity 2023\nCookie preferences"
  },
  {
    "title": "Hosting and deployment",
    "url": "https://www.sanity.io/docs/deployment",
    "html": "Skip to content\nJoin live – Get insights, tips, + Q&A from Sanity developers on our latest releases \nProduct\nPLATFORM\nSanity Studio\n\nFlexible editing environment\n\nAPIs\n\nConnect to anything\n\nContent Lake\n\nReal-time database\n\nTry product demo \nFEATURES\nReal-time collaboration\n\nFearlessly work with content\n\nPrecise content querying\n\nTreat content as data with GROQ\n\nLocalization\n\nCoherent messaging across territories\n\nSolutions\nUSE CASES\nE-commerce\n\nRicher shopping experiences\n\nMarketing sites\n\nControl your story\n\nProducts & services\n\nInnovate and automate\n\nMobile apps\n\nContent backend for every OS\n\nView all \nINTEGRATIONS\nShopify\nMux\nVercel\nNetlify\nAlgolia\nCloudinary\nBigCommerce\nCommerce Layer\nSmartling\nTransifex\nView all \nDevelopers\nLEARN\nDocumentation\nStudio API Reference\nAPI reference\nGuides\nGROQ cheat sheet\nSanity UI\nGet started \nBUILD AND SHARE\nTemplates\nTools and plugins\nSchemas and snippets\nProject showcase\nShare your work\nBrowse Exchange \nFRAMEWORKS\nReact\nVue\nNext.js\nNuxt.js\nSvelte\nRemix\nGatsby\nAstro\nAngular\nEleventy\nView all \nResources\nDISCOVER\nBlog\nResource library\nGlossary\nAgency partners\nBecome a partner\nTechnical support\nTalk to sales \nCASE STUDIES\nPuma\n\nSource of truth for global markets\n\nAether\n\nUnique digital shopping experience\n\nMorning Brew\n\nOmnichannel media distribution\n\nInVision\n\nDelivering exceptional customer experiences\n\nView all \nPOPULAR GUIDES\nHeadless CMS\nStructured content\nContent modeling\nHeadless SEO\nStatic websites\nView all \nEnterprise\nPricing\nLog in\nContact sales\nGet started\nSearch\nOverview\nGetting started\nSanity Studio\nSetup and deployment\nInstallation\nProject structure\nDevelopment\nHosting and deployment\nEnvironment variables\nEmbedding Sanity Studio\nUsing TypeScript\nConfiguration\nBlock Content\nNEWVisual Editing\nAI Assist\nNEWComments\nCustomization\nWorkflows\nTools\nPlugins\nCommand Line Interface\nMigrating from v2\nContent Lake\nBuild with Sanity\nAccess control\nReference\nStudio v2 docs\nHosting and deployment\n\nHow to deploy Sanity Studio, either on your own or using our hosted service.\n\nSanity Studio is a React web application you use to manage content on the Sanity platform. We can host this web application for you, giving you a nice my-company.sanity.studio URL.\n\nSince the Studio runs in the browser and communicates with the Content Lake APIs it's also possible to host it on your favorite hosting service. You can even deploy multiple Studios for the same project! This is useful for managing separate environments like testing and staging, or if you have multiple publications or markets you manage with separate datasets.\n\nHosting with Sanity\n# With the CLI globally installed\nsanity deploy\n\n# Using npx\nnpx sanity deploy\n\nRunning this command from your Studio project folder builds and deploys your Studio, making it available on a *.sanity.studio URL. When you first deploy you are asked to choose a unique hostname for your Studio.\n\nGotcha\n\nThe sanity deploy command works by building the source files in your studio project to static files, which is then uploaded and served from your chosen sanity.studio domain.\n\nNote that there's no authentication involved when serving the built source files, so make sure to not include any sensitive data in your studio code (schema files, package.json, config files, custom inputs, etc).\n\nUndeploying the Studio\n# With the CLI globally installed\nsanity undeploy\n\n# Using npx\nnpx sanity undeploy\n\nRun the command above to change the hostname later or remove the Studio from the web. The next time you deploy you may choose a new hostname. Hosting with Sanity is currently limited to 1 Studio per project.\n\nSelf-hosting the Studio\n\nSince the Studio consists of static HTML, CSS, and Javascript files and communicates with Sanity through our HTTP API, it can be hosted anywhere. Popular hosting services like Vercel and Netlify make it possible to automatically deploy new versions of your Studio when you push it to code repositories like GitHub.\n\nThere are two things you need to make sure of when hosting the Studio yourself or with a service:\n\nThe server that delivers the Sanity Studio files needs to be configured for single-page application routing. This means if the requested URL path doesn't exist on the filesystem, it should serve index.html to allow the frontend router to handle the request. Most hosting services will have configuration options for this.\nThe domain where the Studio is hosted must be added as a valid domain in the project's CORS settings. For security, the Sanity API ensures that only approved Studios are allowed to communicate with your project. This is in addition to other security measures such as user authentication, private datasets, and custom access rules.\n\nIf you host with Sanity, this is automatically handled for you. If your host does not support single-page-application routing, you can add a redirect rule to make sure non-existent paths are redirected properly. Check the documentation for your provider or server software.\n\nSpecifying the base path\n\nNormally the Studio expects to be hosted at the root level of its hostname; for instance https://studio.example.com/. To serve the studio on a subpath, such as https://example.com/studio, you need to edit the CLI configuration file. You'll find it as sanity.cli.js or sanity.cli.ts in the root of your Studio project.\n\nimport {defineCliConfig} from 'sanity/cli'\n\nexport default defineCliConfig({\n  project: {\n    basePath: '/studio'\n  },\n  // ...config continued\n})\n\n\nThe Studio can now be served from https://example.com/studio. This will also change the base path of static files.\n\nMost cases where you embed the Studio in another application will require you to set the basePath.\n\nGotcha\n\nThe sanity.config.js file also has a basePath property - this defines the base path of the workspace and not the actual studio.\n\nIn other words, the two basePaths gets joined together: if the CLI base path is set to /studio and the workspace base path is /production, the resulting base path for the \"production\" workspace will be /studio/production.\n\nSetting the SANITY_STUDIO_BASEPATH environment variable is an alternative method of defining the base path for the studio, and will override any value set in the configuration file.\n\nBuilding the Studio for hosting\n# With the CLI installed globally\nsanity build\n\n# With npx\nnpx cli build\n\n# With npx, specifying the build folder name to be \"public\"\nnpx cli build public\n\nRun the command above from the studio folder to generate the files for hosting. This will output the files to the dist/ directory by default. Sometimes your environment requires another directory name, for instance public. You can specify this by entering the desired name after the build command.\n\nOnce the build is complete, the directory can be uploaded and hosted from any web hosting where you can control redirects for a Single-Page Application, like Vercel, Netlify, or Cloudflare.\n\nHosting with Sanity in a CI/CD flow\n\nYou can host with Sanity automatically with continuous integration tools. This is convenient for automatically updating the hosted Studio when you push your local changes to source repositories, or do manual releases. Add @sanity/cli as a development dependency and configure your CI/CD workflow to run the command sanity deploy. Remember to have the sanity.cli.js config file in your Studio folder.\n\nYou also need to provide an authorization token using the SANITY_AUTH_TOKEN environment variable. This is because deploying with sanity deploy uses your local user session for authenticating with our hosting service, which won't necessarily be available in your CI/CD workflows. You can create a deploy token in the project management dashboard.\n\nEnvironment variables\n\nSometimes you want to configure the projectId or dataset specified in sanity.cli.js and sanity.config.js at build time. This is useful for building multiple Studios from the same schema and code to facilitate different environments. See the documentation on environment variables for your options.\n\nGraphQL\n\nHow to deploy the GraphQL APIs is covered in its own section.\n\nConfiguring the Studio's URL in the Project dashboard\n\nTo change the displayed studio URL on sanity.io/manage you can add a custom studio URL in your project settings under Settings.\n\nUPDATED ON JUNE 29, 2023\n\nWas this article helpful?\nNot at all\nSomewhat\nAbsolutely!\nI want to suggest an improvement to this article.\nPAGE CONTENT\nHosting with Sanity\nUndeploying the Studio\nSelf-hosting the Studio\nSpecifying the base path\nBuilding the Studio for hosting\nHosting with Sanity in a CI/CD flow\nEnvironment variables\nGraphQL\nConfiguring the Studio's URL in the Project dashboard\nProduct\nSanity Studio\nAPIs\nContent Lake\nSecurity & Compliance\nCompare Sanity \nResources\nDocumentation\nBlog\nResource library\nCase Studies\nGuides \nTemplates \nPartners \nExplainers \nCMS \nCompany\nContact Sales\nEnterprise\nCareers\nTerms of Service\nPrivacy Policy\nAccessibility Statement\nStay connected\nGitHub\nSlack\nTwitter\nYouTube\nStack Overflow\nBlog RSS\nNewsletter\n©Sanity 2023\nCookie preferences"
  },
  {
    "title": "Development",
    "url": "https://www.sanity.io/docs/development",
    "html": "Skip to content\nJoin live – Get insights, tips, + Q&A from Sanity developers on our latest releases \nProduct\nPLATFORM\nSanity Studio\n\nFlexible editing environment\n\nAPIs\n\nConnect to anything\n\nContent Lake\n\nReal-time database\n\nTry product demo \nFEATURES\nReal-time collaboration\n\nFearlessly work with content\n\nPrecise content querying\n\nTreat content as data with GROQ\n\nLocalization\n\nCoherent messaging across territories\n\nSolutions\nUSE CASES\nE-commerce\n\nRicher shopping experiences\n\nMarketing sites\n\nControl your story\n\nProducts & services\n\nInnovate and automate\n\nMobile apps\n\nContent backend for every OS\n\nView all \nINTEGRATIONS\nShopify\nMux\nVercel\nNetlify\nAlgolia\nCloudinary\nBigCommerce\nCommerce Layer\nSmartling\nTransifex\nView all \nDevelopers\nLEARN\nDocumentation\nStudio API Reference\nAPI reference\nGuides\nGROQ cheat sheet\nSanity UI\nGet started \nBUILD AND SHARE\nTemplates\nTools and plugins\nSchemas and snippets\nProject showcase\nShare your work\nBrowse Exchange \nFRAMEWORKS\nReact\nVue\nNext.js\nNuxt.js\nSvelte\nRemix\nGatsby\nAstro\nAngular\nEleventy\nView all \nResources\nDISCOVER\nBlog\nResource library\nGlossary\nAgency partners\nBecome a partner\nTechnical support\nTalk to sales \nCASE STUDIES\nPuma\n\nSource of truth for global markets\n\nAether\n\nUnique digital shopping experience\n\nMorning Brew\n\nOmnichannel media distribution\n\nInVision\n\nDelivering exceptional customer experiences\n\nView all \nPOPULAR GUIDES\nHeadless CMS\nStructured content\nContent modeling\nHeadless SEO\nStatic websites\nView all \nEnterprise\nPricing\nLog in\nContact sales\nGet started\nSearch\nOverview\nGetting started\nSanity Studio\nSetup and deployment\nInstallation\nProject structure\nDevelopment\nHosting and deployment\nEnvironment variables\nEmbedding Sanity Studio\nUsing TypeScript\nConfiguration\nBlock Content\nNEWVisual Editing\nAI Assist\nNEWComments\nCustomization\nWorkflows\nTools\nPlugins\nCommand Line Interface\nMigrating from v2\nContent Lake\nBuild with Sanity\nAccess control\nReference\nStudio v2 docs\nChangelog\nDevelopment\n\nLearn how the default local development environment for Sanity Studio works\n\nSanity Studio is distributed as a single package on npm. It also comes with built-in tooling for local development based on Vite. The package also exports the Studio as a React component, including a render function for mounting it on a DOM node in an HTML document.\n\nProtip\n\nSanity Studio always connects to a dataset in the hosted Content Lake, also when run locally. Your content is never stored locally. This means that you can have differences in the schema between a local and a hosted Studio. If the Studio finds content in a document that doesn't match its schema, it will display a warning. \n\nYou can safely change schemas with the confidence that no existing content will be changed. To change content to comply with schema changes, you will need to run a migration script.\n\nLocal development\n\nYou can start a local development server with the following command within the Studio project folder:\n\n# For Studios initated with the CLI\nnpm run dev\n\n# Alternative method\nnpx sanity dev\nTo start the development server on a different port\n\nThe local development server will make the Studio available on http://localhost:3333 by default. You can specify the port with the following command:\n\n# For Studios initated with the CLI\nnpm run dev -- --port 3000\n\n# Alternative method\nnpx sanity dev --port 3000\nGotcha\n\nTo run the Studio on a different port locally, you will have to enable CORS origins for that domain with authenticated requests enabled. \n\nYou can add this with the Sanity CLI by running the following command in your Studio project folder:\n\n npx sanity cors add http://localhost:3000 --credentials \n\nLocal production build\n\nTo build your Studio for production locally, run the following command in the Studio project folder:\n\n# For Studios initated with the Sanity CLI\nnpm run build\n\n# Alternative method\nnpx sanity build\n\nThe build command will bundle the Studio files into a dist folder by default. You can specify the production folder name (for example public) by passing it as a parameter:\n\n# For Studios initated with the Sanity CLI\nnpm run build -- public\n\n# To build the Studio to a folder named \"public\"\nnpx sanity build public\n\nThis can be useful if your hosting provider requires a specific filename when you are self-hosting the Studio.\n\nPreview a production build locally\n\nTo preview the local production build, you can run the following command:\n\nnpx sanity preview\n\n# To specify the folder (\"./public\") for the production build\nnpx sanity preview public\n\nThis will run a local server for the production build of the Studio on http://localhost:3333 .\n\nGotcha\n\nIt's easy to forget that any changes you make to the Studio files won't get reflected when running the preview of the production build. To enable hot-module reloading, you have to run npm run dev or npx sanity dev. \n\nCustomizing the built-in Vite configuration\n\nTo extend or change the built-in Vite configuration, you need a configuration file for the Sanity CLI. Let‘s say you want to alias your root folder to enable relative imports like import CustomComponent from '@/components/CustomComponent'. The following code examples show you how you can overwrite certain properties in the Studio's Vite configuration to do so:\n\n// sanity.cli.js\nimport {defineCliConfig} from 'sanity/cli'\n\nexport default defineCliConfig({\n  api: {\n    // the rest of the config...\n  },\n  vite: {\n    resolve: {\n      alias: {\n        '@': __dirname,\n      },\n    }\n  },\n})\n\nYou can learn more about configuring Vite in their documentation.\n\nUPDATED ON AUGUST 31, 2023\n\nWas this article helpful?\nNot at all\nSomewhat\nAbsolutely!\nI want to suggest an improvement to this article.\nPAGE CONTENT\nLocal development\nTo start the development server on a different port\nLocal production build\nPreview a production build locally\nCustomizing the built-in Vite configuration\nProduct\nSanity Studio\nAPIs\nContent Lake\nSecurity & Compliance\nCompare Sanity \nResources\nDocumentation\nBlog\nResource library\nCase Studies\nGuides \nTemplates \nPartners \nExplainers \nCMS \nCompany\nContact Sales\nEnterprise\nCareers\nTerms of Service\nPrivacy Policy\nAccessibility Statement\nStay connected\nGitHub\nSlack\nTwitter\nYouTube\nStack Overflow\nBlog RSS\nNewsletter\n©Sanity 2023\nCookie preferences"
  },
  {
    "title": "Project Structure",
    "url": "https://www.sanity.io/docs/project-structure",
    "html": "Skip to content\nJoin live – Get insights, tips, + Q&A from Sanity developers on our latest releases \nProduct\nPLATFORM\nSanity Studio\n\nFlexible editing environment\n\nAPIs\n\nConnect to anything\n\nContent Lake\n\nReal-time database\n\nTry product demo \nFEATURES\nReal-time collaboration\n\nFearlessly work with content\n\nPrecise content querying\n\nTreat content as data with GROQ\n\nLocalization\n\nCoherent messaging across territories\n\nSolutions\nUSE CASES\nE-commerce\n\nRicher shopping experiences\n\nMarketing sites\n\nControl your story\n\nProducts & services\n\nInnovate and automate\n\nMobile apps\n\nContent backend for every OS\n\nView all \nINTEGRATIONS\nShopify\nMux\nVercel\nNetlify\nAlgolia\nCloudinary\nBigCommerce\nCommerce Layer\nSmartling\nTransifex\nView all \nDevelopers\nLEARN\nDocumentation\nStudio API Reference\nAPI reference\nGuides\nGROQ cheat sheet\nSanity UI\nGet started \nBUILD AND SHARE\nTemplates\nTools and plugins\nSchemas and snippets\nProject showcase\nShare your work\nBrowse Exchange \nFRAMEWORKS\nReact\nVue\nNext.js\nNuxt.js\nSvelte\nRemix\nGatsby\nAstro\nAngular\nEleventy\nView all \nResources\nDISCOVER\nBlog\nResource library\nGlossary\nAgency partners\nBecome a partner\nTechnical support\nTalk to sales \nCASE STUDIES\nPuma\n\nSource of truth for global markets\n\nAether\n\nUnique digital shopping experience\n\nMorning Brew\n\nOmnichannel media distribution\n\nInVision\n\nDelivering exceptional customer experiences\n\nView all \nPOPULAR GUIDES\nHeadless CMS\nStructured content\nContent modeling\nHeadless SEO\nStatic websites\nView all \nEnterprise\nPricing\nLog in\nContact sales\nGet started\nSearch\nOverview\nGetting started\nSanity Studio\nSetup and deployment\nInstallation\nProject structure\nDevelopment\nHosting and deployment\nEnvironment variables\nEmbedding Sanity Studio\nUsing TypeScript\nConfiguration\nBlock Content\nNEWVisual Editing\nAI Assist\nNEWComments\nCustomization\nWorkflows\nTools\nPlugins\nCommand Line Interface\nMigrating from v2\nContent Lake\nBuild with Sanity\nAccess control\nReference\nStudio v2 docs\nProject Structure\n\nThe file structure of a typical Sanity Studio project\n\nThe common way of customizing a CMS is to just replace parts of the code with your own. As most people who have modified a WordPress installation can attest, this makes upgrades difficult and quickly leads to tangled code.\n\nSanity Studio’s file structure is a slim single-page React application where logic and code are contained in npm modules. The Studio comes with a framework that lets you customize and add your own components to different parts of it.\n\nThis makes it possible to confidently upgrade to new versions of Sanity Studio, and also to install and ship plugins in self-contained packages.\n\nStudio File Layout\n\nThe file structure of Studio projects can look different depending on how you installed it. The example below is from the blog template example that you can initiate from the CLI:\n\n.\n├── README.md\n├── dist\n│   ├── index.html\n│   └── static\n│       ...\n│       └── ...\n├── package-lock.json\n├── package.json\n├── sanity.cli.ts\n├── sanity.config.ts\n├── schemas\n│   ├── author.ts\n│   ├── blockContent.ts\n│   ├── category.ts\n│   ├── index.ts\n│   └── post.ts\n├── static\n└── tsconfig.json\n\nSanity Studio contains the following files and folders out of the box:\n\npackage.json: Contains the necessary dependencies for the studio project. There will also be a dependency lock file that might look different depending on which package manager you use.\nsanity.cli.ts: The configuration file for the Sanity CLI. Contains information on what project ID and dataset the CLI should connect to for project-specific commands.\nsanity.config.ts: The configuration file for the Studio contains information about what project(s) that the Studio should connect to, as well as schemas, plugins, and other customizations.\nschemas: It's a convention to organize schema files in a dedicated folder. It's not required to have a schemas folder, as schemas are imported as JavaScript into the Studio config object.\nstatic: If you want to bundle static files in the studio, you can place these files in the static folder. The built-in developer tooling using Vite will pick these up automatically. If you use a different bundler, then you might need to configure this to bundle files from this folder as well.\ntsconfig.json (only if TypeScript is used) Contains the settings for the transpilation of TypeScript into JavaScript.\ndist: This folder is auto-generated and contains the production build of Sanity Studio as a result of running npm run build.\n\nUPDATED ON DECEMBER 7, 2022\n\nWas this article helpful?\nNot at all\nSomewhat\nAbsolutely!\nI want to suggest an improvement to this article.\nProduct\nSanity Studio\nAPIs\nContent Lake\nSecurity & Compliance\nCompare Sanity \nResources\nDocumentation\nBlog\nResource library\nCase Studies\nGuides \nTemplates \nPartners \nExplainers \nCMS \nCompany\nContact Sales\nEnterprise\nCareers\nTerms of Service\nPrivacy Policy\nAccessibility Statement\nStay connected\nGitHub\nSlack\nTwitter\nYouTube\nStack Overflow\nBlog RSS\nNewsletter\n©Sanity 2023\nCookie preferences"
  },
  {
    "title": "Installation",
    "url": "https://www.sanity.io/docs/installation",
    "html": "Skip to content\nJoin live – Get insights, tips, + Q&A from Sanity developers on our latest releases \nProduct\nPLATFORM\nSanity Studio\n\nFlexible editing environment\n\nAPIs\n\nConnect to anything\n\nContent Lake\n\nReal-time database\n\nTry product demo \nFEATURES\nReal-time collaboration\n\nFearlessly work with content\n\nPrecise content querying\n\nTreat content as data with GROQ\n\nLocalization\n\nCoherent messaging across territories\n\nSolutions\nUSE CASES\nE-commerce\n\nRicher shopping experiences\n\nMarketing sites\n\nControl your story\n\nProducts & services\n\nInnovate and automate\n\nMobile apps\n\nContent backend for every OS\n\nView all \nINTEGRATIONS\nShopify\nMux\nVercel\nNetlify\nAlgolia\nCloudinary\nBigCommerce\nCommerce Layer\nSmartling\nTransifex\nView all \nDevelopers\nLEARN\nDocumentation\nStudio API Reference\nAPI reference\nGuides\nGROQ cheat sheet\nSanity UI\nGet started \nBUILD AND SHARE\nTemplates\nTools and plugins\nSchemas and snippets\nProject showcase\nShare your work\nBrowse Exchange \nFRAMEWORKS\nReact\nVue\nNext.js\nNuxt.js\nSvelte\nRemix\nGatsby\nAstro\nAngular\nEleventy\nView all \nResources\nDISCOVER\nBlog\nResource library\nGlossary\nAgency partners\nBecome a partner\nTechnical support\nTalk to sales \nCASE STUDIES\nPuma\n\nSource of truth for global markets\n\nAether\n\nUnique digital shopping experience\n\nMorning Brew\n\nOmnichannel media distribution\n\nInVision\n\nDelivering exceptional customer experiences\n\nView all \nPOPULAR GUIDES\nHeadless CMS\nStructured content\nContent modeling\nHeadless SEO\nStatic websites\nView all \nEnterprise\nPricing\nLog in\nContact sales\nGet started\nSearch\nOverview\nGetting started\nSanity Studio\nSetup and deployment\nInstallation\nProject structure\nDevelopment\nHosting and deployment\nEnvironment variables\nEmbedding Sanity Studio\nUsing TypeScript\nConfiguration\nBlock Content\nNEWVisual Editing\nAI Assist\nNEWComments\nCustomization\nWorkflows\nTools\nPlugins\nCommand Line Interface\nMigrating from v2\nContent Lake\nBuild with Sanity\nAccess control\nReference\nStudio v2 docs\nInstallation\n\nHow to install and initiate a new Sanity Studio project\n\nThere are a few ways of creating new Sanity Studios:\n\nIf you’re new to Sanity, we recommend trying the Getting started guide\nYou can initiate a new studio from a command line interface (CLI)\nYou can launch a new starter template\nYou can install the sanity dependency and embed a studio in an exciting project\nNew to Sanity?\n\nIf you're new to Sanity, we highly recommend following the Getting started guide. It will take you through:\n\nCreating a project\nInitiating a studio\nCreating schemas\nWorking and publishing content\nIntegrating content from Sanity into a frontend\nInitiating from the CLI\n\nLaunching a studio from the CLI is typically useful when you:\n\nare starting a new project\nprefer to figure tools out on your own\nneed to quickly set up a content backend\n\nTo install and run the Sanity Studio development server locally, you will need to have Node and npm installed (or an npm-compatible JavaScript runtime).\n\nTo initiate a new Studio, you can run the following command using a package manager:\n\nnpm create sanity@latest\n\n# Alternatives\nyarn create sanity@latest\npnpm create sanity@latest\n\nThe CLI will take you through creating or signing into an account, as well as choosing a studio template, TypeScript, preferred package manager, etc. It will make a new folder on the desired path and bootstrap a studio with the necessary configuration.\n\nOnce the CLI has installed the studio, you can cd go into the studio folder and run npm run dev to start the local development server.\n\nTemplates\n\nYou can explore starter templates on Sanity Exchange. Templates will generally let you launch a complete project including a frontend for a specific use case. They can be a great way to explore what it looks like to use Sanity with different technologies.\n\nExplore templates for Sanity Studio\n\nAdding Sanity to an existing project\n\nSanity Studio comes as a single dependency and a React component and is ESM-ready. That means that you can in principle mount the Studio application in any web application, as long as the hosting provider supports adding redirects to all of the Studio's sub-routes.\n\nLearn more about embedding the Studio in other projects.\n\nUPDATED ON DECEMBER 7, 2022\n\nWas this article helpful?\nNot at all\nSomewhat\nAbsolutely!\nI want to suggest an improvement to this article.\nPAGE CONTENT\nNew to Sanity?\nInitiating from the CLI\nTemplates\nAdding Sanity to an existing project\nProduct\nSanity Studio\nAPIs\nContent Lake\nSecurity & Compliance\nCompare Sanity \nResources\nDocumentation\nBlog\nResource library\nCase Studies\nGuides \nTemplates \nPartners \nExplainers \nCMS \nCompany\nContact Sales\nEnterprise\nCareers\nTerms of Service\nPrivacy Policy\nAccessibility Statement\nStay connected\nGitHub\nSlack\nTwitter\nYouTube\nStack Overflow\nBlog RSS\nNewsletter\n©Sanity 2023\nCookie preferences"
  },
  {
    "title": "API References",
    "url": "https://www.sanity.io/docs/reference/api/sanity",
    "html": "Skip to content\nJoin live – Get insights, tips, + Q&A from Sanity developers on our latest releases \nProduct\nPLATFORM\nSanity Studio\n\nFlexible editing environment\n\nAPIs\n\nConnect to anything\n\nContent Lake\n\nReal-time database\n\nTry product demo \nFEATURES\nReal-time collaboration\n\nFearlessly work with content\n\nPrecise content querying\n\nTreat content as data with GROQ\n\nLocalization\n\nCoherent messaging across territories\n\nSolutions\nUSE CASES\nE-commerce\n\nRicher shopping experiences\n\nMarketing sites\n\nControl your story\n\nProducts & services\n\nInnovate and automate\n\nMobile apps\n\nContent backend for every OS\n\nView all \nINTEGRATIONS\nShopify\nMux\nVercel\nNetlify\nAlgolia\nCloudinary\nBigCommerce\nCommerce Layer\nSmartling\nTransifex\nView all \nDevelopers\nLEARN\nDocumentation\nStudio API Reference\nAPI reference\nGuides\nGROQ cheat sheet\nSanity UI\nGet started \nBUILD AND SHARE\nTemplates\nTools and plugins\nSchemas and snippets\nProject showcase\nShare your work\nBrowse Exchange \nFRAMEWORKS\nReact\nVue\nNext.js\nNuxt.js\nSvelte\nRemix\nGatsby\nAstro\nAngular\nEleventy\nView all \nResources\nDISCOVER\nBlog\nResource library\nGlossary\nAgency partners\nBecome a partner\nTechnical support\nTalk to sales \nCASE STUDIES\nPuma\n\nSource of truth for global markets\n\nAether\n\nUnique digital shopping experience\n\nMorning Brew\n\nOmnichannel media distribution\n\nInVision\n\nDelivering exceptional customer experiences\n\nView all \nPOPULAR GUIDES\nHeadless CMS\nStructured content\nContent modeling\nHeadless SEO\nStatic websites\nView all \nEnterprise\nPricing\nLog in\nContact sales\nGet started\nsanity\nComponents\n<Hotkeys />\n<PortableTextInput />\n<StudioLayout />\nHooks\nuseClient()\nuseCurrentUser()\nuseDataset()\nuseFormValue()\nuseProjectId()\nuseSchema()\nFunctions\nbuildLegacyTheme()\ndocumentIdEquals()\nuserHasRole()\nInterfaces\nArrayOfObjectsFormNode\nArrayOfPrimitivesFormNode\nAuthConfig\nAuthProvider\nBaseItemProps\nBlockAnnotationProps\nBlockDecoratorProps\nBlockListItemProps\nBlockProps\nBlockStyleProps\nConfigContext\nFieldError\nFieldMember\nFieldSetMember\nInitialValueTemplateItem\nLegacyThemeProps\nObjectArrayFormNode\nObjectFormNode\nObjectItemProps\nPortableTextInputProps\nPrimitiveItemProps\nSanityFormConfig\nSource\nSourceClientOptions\nStudioTheme\nTemplate\nTemplateFieldDefinition\nTemplateItem\nTemplateReferenceTarget\nTool\nTypeTarget\nWorkspace\nType aliases\nBooleanFormNode\nComposableOption\nDuplicateKeysError\nGeneralPreviewLayoutKey\nHotkeysProps\nIncompatibleTypeError\nItemProps\nMissingKeysError\nMixedArrayError\nNumberFormNode\nObjectItem\nObjectMember\nPortableTextPreviewLayoutKey\nPreviewLayoutKey\nStringFormNode\nStudioThemeColorSchemeKey\nTemplateArrayFieldDefinition\nTemplateParameter\nTemplateResolver\nTypeAnnotationMismatchError\nUndeclaredMembersError\nsanity/cli\nFunctions\ngetStudioEnvironmentVariables()\nInterfaces\nStudioEnvVariablesOptions\nsanity/desk\nClasses\nComponentBuilder\nComponentViewBuilder\nDocumentBuilder\nDocumentListBuilder\nDocumentListItemBuilder\nDocumentTypeListBuilder\nFormViewBuilder\nGenericListBuilder\nGenericViewBuilder\nInitialValueTemplateItemBuilder\nListBuilder\nListItemBuilder\nMenuItemBuilder\nMenuItemGroupBuilder\nVariables\ndeskTool\nInterfaces\nBaseGenericList\nBaseView\nBuildableComponent\nBuildableGenericList\nBuildableList\nChildObservable\nChildResolver\nChildResolverOptions\nComponent\nComponentInput\nComponentView\nDefaultDocumentNodeContext\nDeskToolOptions\nDivider\nDocumentList\nDocumentListInput\nDocumentListItem\nDocumentListItemInput\nDocumentListOptions\nDocumentNode\nDocumentOptions\nDocumentTypeListInput\nEditorNode\nFormView\nGenericList\nGenericListInput\nIntent\nIntentChecker\nList\nListDisplayOptions\nListInput\nListItem\nListItemDisplayOptions\nListItemInput\nListItemSerializeOptions\nMenuItem\nMenuItemGroup\nPartialDocumentList\nPartialDocumentNode\nSerializable\nSerializeOptions\nStructureBuilder\nStructureContext\nStructureNode\nUnserializedListItem\nType aliases\nChild\nCollection\nCollectionBuilder\nDefaultDocumentNodeResolver\nIntentParams\nItemChild\nListItemChild\nMenuItemActionType\nMenuItemParamsType\nPartialDocumentListItem\nPartialListItem\nPartialMenuItem\nSerializePath\nStructureResolver\nUnserializedListItemChild\nUserComponent\nUserViewComponent\nView\nViewBuilder\nsanity/router\nComponents\n<IntentLink />\n<Link />\n<RouteScope />\n<RouterProvider />\n<StateLink />\nHooks\nuseIntentLink()\nuseLink()\nuseRouter()\nuseRouterState()\nuseStateLink()\nVariables\nroute\nInterfaces\nBaseIntentParams\nIntentLinkProps\nLinkProps\nNavigateOptions\nRoute\nRouteNodeOptions\nRouteObject\nRouteScopeProps\nRouteSegment\nRouteTransform\nRouter\nRouterContextValue\nRouterNode\nRouterProviderProps\nStateLinkProps\nUseIntentLinkOptions\nUseLinkOptions\nUseStateLinkOptions\nType aliases\nIntentJsonParams\nIntentParameters\nRouteChildren\nRouterState\nSearchParam\nWelcome to Sanity Studio's API Reference\nAPI reference documentation for the Sanity package provides a comprehensive guide to the various functions, classes, and modules available in the package. It describes the inputs and outputs of each function, as well as any side effects or exceptions that may occur. This documentation is intended to help developers understand how to use the package and its various features, and to provide guidance on best practices and common use cases.\nRelease badges\nOn all pages in the API reference, you will see a badge in the top left. This badge indicates the release status of the API reference page you are on.\n@public\nThe API is public and stable.\n@beta\nThe API is in a testing phase and is considered immature. Breaking changes are expected. We don't recommend using it in a production environment.\n@alpha\n/\n@experimental\nThe API is in very early stages of development. Breaking changes are not only expected but very likely. We strongly recommend against using it in a production environment.\nsanity@3.20.1\nProduct\nSanity Studio\nAPIs\nContent Lake\nSecurity & Compliance\nCompare Sanity \nResources\nDocumentation\nBlog\nResource library\nCase Studies\nGuides \nTemplates \nPartners \nExplainers \nCMS \nCompany\nContact Sales\nEnterprise\nCareers\nTerms of Service\nPrivacy Policy\nAccessibility Statement\nStay connected\nGitHub\nSlack\nTwitter\nYouTube\nStack Overflow\nBlog RSS\nNewsletter\n©Sanity 2023\nCookie preferences"
  },
  {
    "title": "Setup and Deployment",
    "url": "https://www.sanity.io/docs/setup-and-deployment",
    "html": "Skip to content\nJoin live – Get insights, tips, + Q&A from Sanity developers on our latest releases \nProduct\nPLATFORM\nSanity Studio\n\nFlexible editing environment\n\nAPIs\n\nConnect to anything\n\nContent Lake\n\nReal-time database\n\nTry product demo \nFEATURES\nReal-time collaboration\n\nFearlessly work with content\n\nPrecise content querying\n\nTreat content as data with GROQ\n\nLocalization\n\nCoherent messaging across territories\n\nSolutions\nUSE CASES\nE-commerce\n\nRicher shopping experiences\n\nMarketing sites\n\nControl your story\n\nProducts & services\n\nInnovate and automate\n\nMobile apps\n\nContent backend for every OS\n\nView all \nINTEGRATIONS\nShopify\nMux\nVercel\nNetlify\nAlgolia\nCloudinary\nBigCommerce\nCommerce Layer\nSmartling\nTransifex\nView all \nDevelopers\nLEARN\nDocumentation\nStudio API Reference\nAPI reference\nGuides\nGROQ cheat sheet\nSanity UI\nGet started \nBUILD AND SHARE\nTemplates\nTools and plugins\nSchemas and snippets\nProject showcase\nShare your work\nBrowse Exchange \nFRAMEWORKS\nReact\nVue\nNext.js\nNuxt.js\nSvelte\nRemix\nGatsby\nAstro\nAngular\nEleventy\nView all \nResources\nDISCOVER\nBlog\nResource library\nGlossary\nAgency partners\nBecome a partner\nTechnical support\nTalk to sales \nCASE STUDIES\nPuma\n\nSource of truth for global markets\n\nAether\n\nUnique digital shopping experience\n\nMorning Brew\n\nOmnichannel media distribution\n\nInVision\n\nDelivering exceptional customer experiences\n\nView all \nPOPULAR GUIDES\nHeadless CMS\nStructured content\nContent modeling\nHeadless SEO\nStatic websites\nView all \nEnterprise\nPricing\nLog in\nContact sales\nGet started\nSearch\nOverview\nGetting started\nSanity Studio\nSetup and deployment\nInstallation\nProject structure\nDevelopment\nHosting and deployment\nEnvironment variables\nEmbedding Sanity Studio\nUsing TypeScript\nConfiguration\nBlock Content\nNEWVisual Editing\nAI Assist\nNEWComments\nCustomization\nWorkflows\nTools\nPlugins\nCommand Line Interface\nMigrating from v2\nContent Lake\nBuild with Sanity\nAccess control\nReference\nStudio v2 docs\nSetup and Deployment\n\nThere are different ways of installing and getting started with Sanity Studio. You can host the Studio on Sanity, or self-host it with most hosting providers. The Studio is configured in code and supports the bundling of environment variables. The built-in Studio developer tooling also comes with support for TypeScript.\n\nInstallation\nHow to install and initiate a new Sanity Studio project\nDevelopment\nGet started developing your Sanity Studio projects\nProject Structure\nThe file structure of a typical Sanity Studio project\nHosting and deployment\nHow to deploy Sanity Studio, either on your own or using our hosted service.\nEnvironment Variables\nYou can use environment variables to dynamically configure the Studio depending on what context it‘s in.\nUsing TypeScript in Sanity Studio\nHow to use TypeScript with Sanity Studio\nProduct\nSanity Studio\nAPIs\nContent Lake\nSecurity & Compliance\nCompare Sanity \nResources\nDocumentation\nBlog\nResource library\nCase Studies\nGuides \nTemplates \nPartners \nExplainers \nCMS \nCompany\nContact Sales\nEnterprise\nCareers\nTerms of Service\nPrivacy Policy\nAccessibility Statement\nStay connected\nGitHub\nSlack\nTwitter\nYouTube\nStack Overflow\nBlog RSS\nNewsletter\n©Sanity 2023\nCookie preferences"
  },
  {
    "title": "Sanity Studio",
    "url": "https://www.sanity.io/docs/sanity-studio",
    "html": "Skip to content\nJoin live – Get insights, tips, + Q&A from Sanity developers on our latest releases \nProduct\nPLATFORM\nSanity Studio\n\nFlexible editing environment\n\nAPIs\n\nConnect to anything\n\nContent Lake\n\nReal-time database\n\nTry product demo \nFEATURES\nReal-time collaboration\n\nFearlessly work with content\n\nPrecise content querying\n\nTreat content as data with GROQ\n\nLocalization\n\nCoherent messaging across territories\n\nSolutions\nUSE CASES\nE-commerce\n\nRicher shopping experiences\n\nMarketing sites\n\nControl your story\n\nProducts & services\n\nInnovate and automate\n\nMobile apps\n\nContent backend for every OS\n\nView all \nINTEGRATIONS\nShopify\nMux\nVercel\nNetlify\nAlgolia\nCloudinary\nBigCommerce\nCommerce Layer\nSmartling\nTransifex\nView all \nDevelopers\nLEARN\nDocumentation\nStudio API Reference\nAPI reference\nGuides\nGROQ cheat sheet\nSanity UI\nGet started \nBUILD AND SHARE\nTemplates\nTools and plugins\nSchemas and snippets\nProject showcase\nShare your work\nBrowse Exchange \nFRAMEWORKS\nReact\nVue\nNext.js\nNuxt.js\nSvelte\nRemix\nGatsby\nAstro\nAngular\nEleventy\nView all \nResources\nDISCOVER\nBlog\nResource library\nGlossary\nAgency partners\nBecome a partner\nTechnical support\nTalk to sales \nCASE STUDIES\nPuma\n\nSource of truth for global markets\n\nAether\n\nUnique digital shopping experience\n\nMorning Brew\n\nOmnichannel media distribution\n\nInVision\n\nDelivering exceptional customer experiences\n\nView all \nPOPULAR GUIDES\nHeadless CMS\nStructured content\nContent modeling\nHeadless SEO\nStatic websites\nView all \nEnterprise\nPricing\nLog in\nContact sales\nGet started\nSearch\nOverview\nGetting started\nSanity Studio\nSetup and deployment\nConfiguration\nBlock Content\nNEWVisual Editing\nAI Assist\nNEWComments\nCustomization\nWorkflows\nTools\nPlugins\nCommand Line Interface\nMigrating from v2\nContent Lake\nBuild with Sanity\nAccess control\nReference\nStudio v2 docs\nSanity Studio\n\nSanity Studio is a real-time collaborative application for content creation. It's open-source and connects to the hosted Content Lake.\n\nSanity Studio was recently released in a new major version (v3). You can find migration guides from Studio v2 here.\n\nYou can quickly get up and running and define your schema types (content models) with plain-old JavaScript objects. From your definitions, Sanity Studio will autogenerate an editing environment that comes with a ton of features out of the box (document versioning, real-time collaboration, nested and connected content, conditional fields, initial form values, etc).\n\nSanity Studio also comes with a framework for customizing editing experiences that lets you do everything from defining custom form validation with JavaScript to building input components with React, and much more.\n\nCORE FEATURES\nConfiguration\nSanity Studio lets you quickly get up and running by configuring it with simple JavaScript or TypeScript. Because the configuration is in code, it lets you take advantage of developer tooling and less context switching in making an editing environment.\nCustomization\n\nThe Sanity Studio is built from the ground up with customization in mind. You can extend and personalize the studio with your own styling, custom input components, custom previews and leverage our powerful plugin system.\n\nBlock Content & Portable Text\n\nWe believe you should treat all your content as structured content, even your rich text and block content. Portable Text is a presentation-agnostic specification for block content that you can use with Sanity. It's designed to be efficient for real-time collaborative interfaces and makes it possible to annotate rich text with additional data structures recursively.\n\nTools\nTools are top-level views in the Sanity Studio application that you can access through its menu bar. Use built-in tools, like the Desk Tool (for content editors to browse and edit content) and the Vision Tool (to run GROQ queries on your content), or build your own to meet your content editor's needs.\nCustom workflows\nAll content teams work differently. With Sanity Studio you can accommodate different workflows by customizing its desk structure (how documents and forms are organized), document actions, and more.\nPOPULAR GUIDES\nIntroduction to content modeling\n\nHow to approach content modeling with Sanity.io\n\nKnut Melvær\nHow to add a custom YouTube block\n\nHow to add a YouTube embed in the Studio, and render it on frontends\n\nKnut Melvær\nIntroduction to Portable Text\n\nLearn how Portable Text works\n\nKnut Melvær\nRESOURCES\nReference docs\n\nIf you need detailed information about how the different Studio APIs and configurations you can go to the reference documentation.\n\nStructure builder\nSchema types\nReference docs\nPlugins\n\nYou can extend the studio with input components, dashboard widgets and other tools.\n\nMedia browser\nCode Input Component\nAsset source for Unsplash\nMore plugins\nProduct\nSanity Studio\nAPIs\nContent Lake\nSecurity & Compliance\nCompare Sanity \nResources\nDocumentation\nBlog\nResource library\nCase Studies\nGuides \nTemplates \nPartners \nExplainers \nCMS \nCompany\nContact Sales\nEnterprise\nCareers\nTerms of Service\nPrivacy Policy\nAccessibility Statement\nStay connected\nGitHub\nSlack\nTwitter\nYouTube\nStack Overflow\nBlog RSS\nNewsletter\n©Sanity 2023\nCookie preferences"
  },
  {
    "title": "What's next?",
    "url": "https://www.sanity.io/docs/whats-next",
    "html": "Skip to content\nJoin live – Get insights, tips, + Q&A from Sanity developers on our latest releases \nProduct\nPLATFORM\nSanity Studio\n\nFlexible editing environment\n\nAPIs\n\nConnect to anything\n\nContent Lake\n\nReal-time database\n\nTry product demo \nFEATURES\nReal-time collaboration\n\nFearlessly work with content\n\nPrecise content querying\n\nTreat content as data with GROQ\n\nLocalization\n\nCoherent messaging across territories\n\nSolutions\nUSE CASES\nE-commerce\n\nRicher shopping experiences\n\nMarketing sites\n\nControl your story\n\nProducts & services\n\nInnovate and automate\n\nMobile apps\n\nContent backend for every OS\n\nView all \nINTEGRATIONS\nShopify\nMux\nVercel\nNetlify\nAlgolia\nCloudinary\nBigCommerce\nCommerce Layer\nSmartling\nTransifex\nView all \nDevelopers\nLEARN\nDocumentation\nStudio API Reference\nAPI reference\nGuides\nGROQ cheat sheet\nSanity UI\nGet started \nBUILD AND SHARE\nTemplates\nTools and plugins\nSchemas and snippets\nProject showcase\nShare your work\nBrowse Exchange \nFRAMEWORKS\nReact\nVue\nNext.js\nNuxt.js\nSvelte\nRemix\nGatsby\nAstro\nAngular\nEleventy\nView all \nResources\nDISCOVER\nBlog\nResource library\nGlossary\nAgency partners\nBecome a partner\nTechnical support\nTalk to sales \nCASE STUDIES\nPuma\n\nSource of truth for global markets\n\nAether\n\nUnique digital shopping experience\n\nMorning Brew\n\nOmnichannel media distribution\n\nInVision\n\nDelivering exceptional customer experiences\n\nView all \nPOPULAR GUIDES\nHeadless CMS\nStructured content\nContent modeling\nHeadless SEO\nStatic websites\nView all \nEnterprise\nPricing\nLog in\nContact sales\nGet started\nSearch\nOverview\nGetting started\nCreate a project\nCreate a schema\nCreate content\nConnect content\nWhat's next?\nSanity Studio\nContent Lake\nBuild with Sanity\nAccess control\nReference\nStudio v2 docs\nWhat's next?\n\nCongratulations on making it all the way through!\n\nLet's quickly recap. Here’s what you’ve done so far:\n\nCreated a project\nSet up Sanity Studio using our CLI\nCreated a schema using a code editor\nAdded some content via the Studio, that now lives in the Content Lake\nConnected a front-end that fetches and displays this content\nContinue your journey\n\nNow that you’ve learned the basics, we recommend building another, more robust example.\n\nBuild a complete Sanity project with templates\n\nGet going with one of our fully configured projects. Created with popular front-end frameworks and deployed to Netlify or Vercel.\n\nExplore Sanity-powered apps with video tutorials\n\nWatch free video courses and tutorials on using Sanity to create a React-based blog, an Airbnb clone, or even a blockchain app.\n\nMore docs to explore\n\nLearn how to extend the functionality of your studio, how to deploy it, or learn more about how to query your content using GROQ.\n\nDeploy your Studio\n\nShare your Studio with content creators\n\nBrowse schema types\n\nReference documentation for all the schema types\n\nGet familiar with GROQ\n\nExplore Sanity’s open-source query language\n\nExplore Sanity Exchange\n\nFind what you need, learn new things, share with others\n\nShare with our community\n\nShow us what you’ve made! Get inspired by our vibrant community of developers, and friendly support team.\n\nJoin us on Slack\n\nUPDATED ON DECEMBER 7, 2022\n\nWas this article helpful?\nNot at all\nSomewhat\nAbsolutely!\nI want to suggest an improvement to this article.\nPAGE CONTENT\nContinue your journey\nMore docs to explore\nProduct\nSanity Studio\nAPIs\nContent Lake\nSecurity & Compliance\nCompare Sanity \nResources\nDocumentation\nBlog\nResource library\nCase Studies\nGuides \nTemplates \nPartners \nExplainers \nCMS \nCompany\nContact Sales\nEnterprise\nCareers\nTerms of Service\nPrivacy Policy\nAccessibility Statement\nStay connected\nGitHub\nSlack\nTwitter\nYouTube\nStack Overflow\nBlog RSS\nNewsletter\n©Sanity 2023\nCookie preferences"
  },
  {
    "title": "Connect your content",
    "url": "https://www.sanity.io/docs/connect-your-content",
    "html": "Skip to content\nJoin live – Get insights, tips, + Q&A from Sanity developers on our latest releases \nProduct\nPLATFORM\nSanity Studio\n\nFlexible editing environment\n\nAPIs\n\nConnect to anything\n\nContent Lake\n\nReal-time database\n\nTry product demo \nFEATURES\nReal-time collaboration\n\nFearlessly work with content\n\nPrecise content querying\n\nTreat content as data with GROQ\n\nLocalization\n\nCoherent messaging across territories\n\nSolutions\nUSE CASES\nE-commerce\n\nRicher shopping experiences\n\nMarketing sites\n\nControl your story\n\nProducts & services\n\nInnovate and automate\n\nMobile apps\n\nContent backend for every OS\n\nView all \nINTEGRATIONS\nShopify\nMux\nVercel\nNetlify\nAlgolia\nCloudinary\nBigCommerce\nCommerce Layer\nSmartling\nTransifex\nView all \nDevelopers\nLEARN\nDocumentation\nStudio API Reference\nAPI reference\nGuides\nGROQ cheat sheet\nSanity UI\nGet started \nBUILD AND SHARE\nTemplates\nTools and plugins\nSchemas and snippets\nProject showcase\nShare your work\nBrowse Exchange \nFRAMEWORKS\nReact\nVue\nNext.js\nNuxt.js\nSvelte\nRemix\nGatsby\nAstro\nAngular\nEleventy\nView all \nResources\nDISCOVER\nBlog\nResource library\nGlossary\nAgency partners\nBecome a partner\nTechnical support\nTalk to sales \nCASE STUDIES\nPuma\n\nSource of truth for global markets\n\nAether\n\nUnique digital shopping experience\n\nMorning Brew\n\nOmnichannel media distribution\n\nInVision\n\nDelivering exceptional customer experiences\n\nView all \nPOPULAR GUIDES\nHeadless CMS\nStructured content\nContent modeling\nHeadless SEO\nStatic websites\nView all \nEnterprise\nPricing\nLog in\nContact sales\nGet started\nSearch\nOverview\nGetting started\nCreate a project\nCreate a schema\nCreate content\nConnect content\nWhat's next?\nSanity Studio\nContent Lake\nBuild with Sanity\nAccess control\nReference\nStudio v2 docs\nConnect your content\n\nAssuming you've followed the previous steps of configuring the schema and editing content, you should be all set up for the next step of bringing your content to the world.\n\nSince your content is just data available through an API, there’s practically no limit to where you can put it! It doesn’t have to be the Web, as long as the system can send an HTTP request and do something with the returned JSON data. Of course, you can use Sanity with frameworks like Next.js, Nuxt.js, SvelteKit, Gatsby, Scully; you name it.\n\nIn this step, you will use HTML and JavaScript to query your Sanity project’s API and retrieve your pet document from the production dataset that it lives in.\n\nYou can choose a familiar framework, try a new one, or proceed with the vanilla JavaScript and HTML example below.\n\nConnect your content in plain JavaScript\nConnect your content to Next.js\nConnect your content to Nuxt.js\nConnect your content to SvelteKit\nConnect your content in plain JavaScript\n\n👉 Start by opening this Codesandbox. Once you start editing the code and hit save, it will create a new fork personal to you.\n\nIt will already have the boilerplate code that we’re showing below. We'll add code to fetch data using a few lines of JavaScript inside the <script> element.\n\nFiguring out your project ID and dataset name\n\nIn your code to fetch data, you need two pieces of information to connect to your API:\n\nA Project ID\nA Dataset name\n\n👉 There are multiple places where you can find these, but today you should head over to sanity.io/manage. Here you’ll find your project(s) and the project settings. If you click into the project (you probably only have the one you just made), then the Project ID will be under the project name. Use the project ID to replace the YOUR_PROJECT_ID placeholder in the code.\n\n👉 Then, navigate to the tab called Datasets. If you follow this tutorial, you’ll find only one called production. Add this as the value for the DATASET variable.\n\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <title>My pets</title>\n    <meta charset=\"UTF-8\" />\n    <link rel=\"stylesheet\" href=\"src/styles.css\" />\n  </head>\n\n  <body>\n    <header>\n      <h1>Sanity + Vanilla JavaScript</h1>\n    </header>\n    <main>\n      <h2>Pets</h2>\n      <ul>\n        <li>Loading pets…</li>\n      </ul>\n\n      <div>\n        <pre>\n¯\\_(ツ)_/¯\nYour data will show up here when you've configured everything correctly\n        </pre>\n      </div>\n    </main>\n\n    <script>\n\n      let PROJECT_ID = \"YOUR_PROJECT_ID\";\n\n      let DATASET = \"production\";\n\n\n    </script>\n  </body>\n</html>\nAdding your URL to the Cross-Origins Resource Sharing (CORS) settings\n\nThe plan is to fetch your content using JavaScript that runs in the browser. Browsers come with security that prevents code injection that steals information from your cookies and passes them to third parties. This is called CORS. To allow your CodeSandbox site to get content from your project, you need to add its URL to your project’s CORS origins settings.\n\n👉 First, grab the URL from the preview pane in your Codesandbox, it should look something like this https://[RANDOMLY_GENERATED_LETTERS].csb.app/.\n\n👉 Then head over to the API tab in your project settings at sanity.io/manage. A little bit down the page, you'll find the \"CORS Origins\" section. Click the button labeled \"Add CORS Origin,\" paste the URL from Codesandbox into the URL field, and hit save (you don’t need to “Allow credentials”). That’s it!\n\nPrepare your query and API URL\n\nYou need to send a query to an API endpoint to fetch content. In other words, you need to put together a URL. Normally, you’d use a client library. Still, in this minimalist example, you’ll construct this URL using the project ID, the dataset name, a query, and Sanity’s URL endpoint for content queries.\n\n👉 Add two new variables to your CodeSandbox project, QUERY and URL:\n\nlet QUERY = encodeURIComponent('*[_type == \"pet\"]');\n\n// Compose the URL for your project's endpoint and add the query\nlet URL = `https://${PROJECT_ID}.api.sanity.io/v2021-10-21/data/query/${DATASET}?query=${QUERY}`;\n\nThis is what your code should look like now:\n\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <title>My pets</title>\n    <meta charset=\"UTF-8\" />\n    <link rel=\"stylesheet\" href=\"src/styles.css\" />\n  </head>\n\n  <body>\n    <header>\n      <h1>Sanity + Vanilla JavaScript</h1>\n    </header>\n    <main>\n      <h2>Pets</h2>\n      <ul>\n        <li>Loading pets…</li>\n      </ul>\n\n      <div>\n        <pre>\n¯\\_(ツ)_/¯\nYour data will show up here when you've configured everything correctly\n        </pre>\n      </div>\n    </main>\n\n    <script>\n      let PROJECT_ID = \"YOUR_PROJECT_ID\";\n      let DATASET = \"production\";\n      let QUERY = encodeURIComponent('*[_type == \"pet\"]');\n\n      // Compose the URL for your project's endpoint and add the query\n      let URL = `https://${PROJECT_ID}.api.sanity.io/v2021-10-21/data/query/${DATASET}?query=${QUERY}`;\n\n    </script>\n  </body>\n</html>\n\n\nThe QUERY variable consists of two parts. The encodeURIComponents function ensures that the query string can be sent inside a URL. The *[_type == \"pet\"] string is a simple GROQ query. GROQ is the primary query language that Sanity uses.\n\nThe URL variable takes the variables you have defined and uses string concatenating to put them together.\n\nFetching content\n\nAlmost done! The last part of this is to add a fetch function that takes the URL and then extracts the returned JSON out of the response and then passes it to a callback function where you can output the data to the DOM, that is, your pre tag. If something wrong happens, you’ll catch that and console.log the error.\n\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <title>My pets</title>\n    <meta charset=\"UTF-8\" />\n    <link rel=\"stylesheet\" href=\"src/styles.css\" />\n  </head>\n\n  <body>\n    <header>\n      <h1>Sanity + Vanilla JavaScript</h1>\n    </header>\n    <main>\n      <h2>Pets</h2>\n      <ul>\n        <li>Loading pets…</li>\n      </ul>\n\n      <div>\n        <pre>\n¯\\_(ツ)_/¯\nYour data will show up here when you've configured everything correctly\n        </pre>\n      </div>\n    </main>\n\n    <script>\n      // Select the DOM-element, so that you can replace it with content\n      let PROJECT_ID = \"YOUR_PROJECT_ID\";\n      let DATASET = \"production\";\n      let QUERY = encodeURIComponent('*[_type == \"pet\"]');\n\n      // Compose the URL for your project's endpoint and add the query\n      let URL = `https://${PROJECT_ID}.api.sanity.io/v2021-10-21/data/query/${DATASET}?query=${QUERY}`;\n\n\n      // fetch the content\n\n      fetch(URL)\n\n        .then((res) => res.json())\n\n        .then(({ result }) => {\n\n          // get the list element, and the first item\n\n          let list = document.querySelector(\"ul\");\n\n          let firstListItem = document.querySelector(\"ul li\");\n\n\n\n          if (result.length > 0) {\n\n            // remove the placeholder content\n\n            list.removeChild(firstListItem);\n\n\n\n            result.forEach((pet) => {\n\n              // create a list element for each pet\n\n              let listItem = document.createElement(\"li\");\n\n\n\n              // add the pet name as the text content\n\n              listItem.textContent = pet?.name;\n\n\n\n              // add the item to the list\n\n              list.appendChild(listItem);\n\n            });\n\n            let pre = document.querySelector(\"pre\");\n\n            // add the raw data to the preformatted element\n\n            pre.textContent = JSON.stringify(result, null, 2);\n\n          }\n\n        })\n\n        .catch((err) => console.error(err));\n\n    </script>\n  </body>\n</html>\n\n\nThat’s it! Now, you should be able to refresh the page in your preview and see the JSON of your pet document. If you publish a change in the studio, that should be reflected here, too, when you reload.\n\nNext steps →\n\nUPDATED ON SEPTEMBER 6, 2023\n\nWas this article helpful?\nNot at all\nSomewhat\nAbsolutely!\nI want to suggest an improvement to this article.\nPAGE CONTENT\nConnect your content in plain JavaScript\nFiguring out your project ID and dataset name\nAdding your URL to the Cross-Origins Resource Sharing (CORS) settings\nPrepare your query and API URL\nFetching content\nProduct\nSanity Studio\nAPIs\nContent Lake\nSecurity & Compliance\nCompare Sanity \nResources\nDocumentation\nBlog\nResource library\nCase Studies\nGuides \nTemplates \nPartners \nExplainers \nCMS \nCompany\nContact Sales\nEnterprise\nCareers\nTerms of Service\nPrivacy Policy\nAccessibility Statement\nStay connected\nGitHub\nSlack\nTwitter\nYouTube\nStack Overflow\nBlog RSS\nNewsletter\n©Sanity 2023\nCookie preferences"
  },
  {
    "title": "Edit and publish content",
    "url": "https://www.sanity.io/docs/edit-and-publish-content",
    "html": "Skip to content\nJoin live – Get insights, tips, + Q&A from Sanity developers on our latest releases \nProduct\nPLATFORM\nSanity Studio\n\nFlexible editing environment\n\nAPIs\n\nConnect to anything\n\nContent Lake\n\nReal-time database\n\nTry product demo \nFEATURES\nReal-time collaboration\n\nFearlessly work with content\n\nPrecise content querying\n\nTreat content as data with GROQ\n\nLocalization\n\nCoherent messaging across territories\n\nSolutions\nUSE CASES\nE-commerce\n\nRicher shopping experiences\n\nMarketing sites\n\nControl your story\n\nProducts & services\n\nInnovate and automate\n\nMobile apps\n\nContent backend for every OS\n\nView all \nINTEGRATIONS\nShopify\nMux\nVercel\nNetlify\nAlgolia\nCloudinary\nBigCommerce\nCommerce Layer\nSmartling\nTransifex\nView all \nDevelopers\nLEARN\nDocumentation\nStudio API Reference\nAPI reference\nGuides\nGROQ cheat sheet\nSanity UI\nGet started \nBUILD AND SHARE\nTemplates\nTools and plugins\nSchemas and snippets\nProject showcase\nShare your work\nBrowse Exchange \nFRAMEWORKS\nReact\nVue\nNext.js\nNuxt.js\nSvelte\nRemix\nGatsby\nAstro\nAngular\nEleventy\nView all \nResources\nDISCOVER\nBlog\nResource library\nGlossary\nAgency partners\nBecome a partner\nTechnical support\nTalk to sales \nCASE STUDIES\nPuma\n\nSource of truth for global markets\n\nAether\n\nUnique digital shopping experience\n\nMorning Brew\n\nOmnichannel media distribution\n\nInVision\n\nDelivering exceptional customer experiences\n\nView all \nPOPULAR GUIDES\nHeadless CMS\nStructured content\nContent modeling\nHeadless SEO\nStatic websites\nView all \nEnterprise\nPricing\nLog in\nContact sales\nGet started\nSearch\nOverview\nGetting started\nCreate a project\nCreate a schema\nCreate content\nConnect content\nWhat's next?\nSanity Studio\nContent Lake\nBuild with Sanity\nAccess control\nReference\nStudio v2 docs\nEdit and publish content\n\nIn the previous step, you set up a document type called pet with one field for its name. With your studio running (npm run dev) and your browser open on http://localhost:3333, you can now click the pencil button (📝) to create a new pet document.\n\nEditing content\n\n👉 As you can see, the form has just one input field that lets you type text. It could be any pet or whatever you can come up with!\n\nWhen you’re editing, it activates the synchronization indicator in the bottom left corner of your document pane. This is the studio syncing your changes in real time with the hosted Content Lake. In other words, you’re editing content online, even though your studio is running locally. There’s no need to save!\n\n👉 Go to the three-dotted menu in the upper right corner of the document form. Press it and select Inspect. This opens the JSON inspector, where you can see how the document data looks something like this:\n\n{\n  \"_id\": \"drafts.d2f251cd-3f58-4abb-9b91-287afdd9a49b\",\n  \"_type\": \"pet\",\n  \"name\": \"Jara\",\n  \"_rev\": \"ky7gn7-579-sbh-pq8-q2qsxepxq\",\n  \"_updatedAt\": \"2022-02-09T23:02:39.771Z\"\n}\n\nRecognize the name and _type properties from the last lesson here?\n\nMore about the _ properties\nPublishing a document\n\nNotice how the _id value starts with drafts.? This means that the document you’re editing is a draft and not available in the public API, that is, you need to be authenticated to access it.\n\n👉 Press the green Publish button, the studio will make a copy of your document, remove the drafts. part of the _id, and create this document for you in the Content Lake. You will then be able to query it from the web without needing a special token for it.\n\nAll changes are recorded and attributed. You can look up a document’s version history by going to the Select version menu, Review changes in the three-dotted menu, or the yellow pencil indicator in the bottom publish bar. The studio will show you what changed and who made the change. It will also allow you to revert to any single change or version.\n\nDocument versions and Review Changes\n\n👉 If you make an edit in the name field again, this will create a new drafts. document. When you’re ready to go live with your changes, you can press Publish. This will overwrite the already published document with your new changes. That’s it!\n\nIn the next step, we’ll look at how you can integrate your content into a web-based frontend.\n\nNext: Connect your content →\n\nUPDATED ON DECEMBER 18, 2022\n\nWas this article helpful?\nNot at all\nSomewhat\nAbsolutely!\nI want to suggest an improvement to this article.\nPAGE CONTENT\nEditing content\nPublishing a document\nProduct\nSanity Studio\nAPIs\nContent Lake\nSecurity & Compliance\nCompare Sanity \nResources\nDocumentation\nBlog\nResource library\nCase Studies\nGuides \nTemplates \nPartners \nExplainers \nCMS \nCompany\nContact Sales\nEnterprise\nCareers\nTerms of Service\nPrivacy Policy\nAccessibility Statement\nStay connected\nGitHub\nSlack\nTwitter\nYouTube\nStack Overflow\nBlog RSS\nNewsletter\n©Sanity 2023\nCookie preferences"
  },
  {
    "title": "Create a Sanity project",
    "url": "https://www.sanity.io/docs/create-a-sanity-project",
    "html": "Skip to content\nJoin live – Get insights, tips, + Q&A from Sanity developers on our latest releases \nProduct\nPLATFORM\nSanity Studio\n\nFlexible editing environment\n\nAPIs\n\nConnect to anything\n\nContent Lake\n\nReal-time database\n\nTry product demo \nFEATURES\nReal-time collaboration\n\nFearlessly work with content\n\nPrecise content querying\n\nTreat content as data with GROQ\n\nLocalization\n\nCoherent messaging across territories\n\nSolutions\nUSE CASES\nE-commerce\n\nRicher shopping experiences\n\nMarketing sites\n\nControl your story\n\nProducts & services\n\nInnovate and automate\n\nMobile apps\n\nContent backend for every OS\n\nView all \nINTEGRATIONS\nShopify\nMux\nVercel\nNetlify\nAlgolia\nCloudinary\nBigCommerce\nCommerce Layer\nSmartling\nTransifex\nView all \nDevelopers\nLEARN\nDocumentation\nStudio API Reference\nAPI reference\nGuides\nGROQ cheat sheet\nSanity UI\nGet started \nBUILD AND SHARE\nTemplates\nTools and plugins\nSchemas and snippets\nProject showcase\nShare your work\nBrowse Exchange \nFRAMEWORKS\nReact\nVue\nNext.js\nNuxt.js\nSvelte\nRemix\nGatsby\nAstro\nAngular\nEleventy\nView all \nResources\nDISCOVER\nBlog\nResource library\nGlossary\nAgency partners\nBecome a partner\nTechnical support\nTalk to sales \nCASE STUDIES\nPuma\n\nSource of truth for global markets\n\nAether\n\nUnique digital shopping experience\n\nMorning Brew\n\nOmnichannel media distribution\n\nInVision\n\nDelivering exceptional customer experiences\n\nView all \nPOPULAR GUIDES\nHeadless CMS\nStructured content\nContent modeling\nHeadless SEO\nStatic websites\nView all \nEnterprise\nPricing\nLog in\nContact sales\nGet started\nSearch\nOverview\nGetting started\nCreate a project\nCreate a schema\nCreate content\nConnect content\nWhat's next?\nSanity Studio\nContent Lake\nBuild with Sanity\nAccess control\nReference\nStudio v2 docs\nCreate a Sanity project\n\nSanity is a platform for creating and working with structured content. Your content is stored in the cloud and can be distributed anywhere, for example on a website or in an app.\n\nThis step will help you create a Sanity project.\n\nProtip\n\n👉 Look for the pointing finger emoji to quickly locate the actionable steps in the guide if you prefer more action and less explanation.\n\nStep 1: Install Sanity Studio\n\nYou start by setting up your content editing environment. It’s called Sanity Studio, and you can configure and customize it with JavaScript. It runs in the browser. To develop locally, we need to run a development server so you can see your changes instantly.\n\nGotcha\n\nTo install Sanity Studio you'll first need to have node and npm installed.\n\nHow to install node and npm?\n\n👉 To get started, run this in your command line:\n\nnpm create sanity@latest -- --template clean --create-project \"Sanity Project\" --dataset production\nTrouble installing?\n\nThis will take you through a setup process by guiding you through the following steps:\n\n👉  Create an account. Select a login provider from the list of options, and confirm with Enter. After creating an account in the browser, come back to the command line window.\n👉  Choose an output path. Press Enter to accept the default path, or change it to fit your needs first.\n👉  Wait a bit for the installation process to complete. When you get a Success! message, you're good to move on to the next step!! 🎉\nStep 2: Run the Studio locally\n\nHaving installed the studio in the previous step, it’s time to start it up and run it in your browser!\n\n👉 Enter the Studio's directory:\n\nIf you chose a custom output path, remember to change it respectively.\n\ncd sanity-project\n\n👉 Run this command within the Studio's folder:\n\nnpm run dev\n\nThis will build the studio application and start a local development server so you can run the app in your browser. Once the build is complete, you can head over to http://localhost:3333.\n\nYou should now see the Sanity Studio running in your browser!\n\nAs you modify and save the code, the server will automatically rebuild the studio and refresh the browser.\n\nYou can stop your development server by pressing Ctrl-C in the terminal where the server is running.\n\nSummary\n\nAt this point, we've set up the following:\n\nSanity account – you need it to access your projects.\nSanity project – a place for your content represented as documents, stored by Sanity in the cloud. A single Sanity account can have an unlimited number of Sanity projects.\nSanity Studio – a React app to edit and publish content. Connected to a Sanity project via APIs. For now, it is installed on your computer. In the next steps, we'll cover how to deploy it to the web and share it with others.\nNeed help?\n\nJoin our Slack community to ask questions and get help!\n\nJoin Slack Community\n\nNext: Create a schema →\n\nUPDATED ON DECEMBER 8, 2022\n\nWas this article helpful?\nNot at all\nSomewhat\nAbsolutely!\nI want to suggest an improvement to this article.\nPAGE CONTENT\nStep 1: Install Sanity Studio\nStep 2: Run the Studio locally\nProduct\nSanity Studio\nAPIs\nContent Lake\nSecurity & Compliance\nCompare Sanity \nResources\nDocumentation\nBlog\nResource library\nCase Studies\nGuides \nTemplates \nPartners \nExplainers \nCMS \nCompany\nContact Sales\nEnterprise\nCareers\nTerms of Service\nPrivacy Policy\nAccessibility Statement\nStay connected\nGitHub\nSlack\nTwitter\nYouTube\nStack Overflow\nBlog RSS\nNewsletter\n©Sanity 2023\nCookie preferences"
  },
  {
    "title": "Getting Started with Sanity Studio",
    "url": "https://www.sanity.io/docs/create-a-schema-and-configure-sanity-studio",
    "html": "Skip to content\nJoin live – Get insights, tips, + Q&A from Sanity developers on our latest releases \nProduct\nPLATFORM\nSanity Studio\n\nFlexible editing environment\n\nAPIs\n\nConnect to anything\n\nContent Lake\n\nReal-time database\n\nTry product demo \nFEATURES\nReal-time collaboration\n\nFearlessly work with content\n\nPrecise content querying\n\nTreat content as data with GROQ\n\nLocalization\n\nCoherent messaging across territories\n\nSolutions\nUSE CASES\nE-commerce\n\nRicher shopping experiences\n\nMarketing sites\n\nControl your story\n\nProducts & services\n\nInnovate and automate\n\nMobile apps\n\nContent backend for every OS\n\nView all \nINTEGRATIONS\nShopify\nMux\nVercel\nNetlify\nAlgolia\nCloudinary\nBigCommerce\nCommerce Layer\nSmartling\nTransifex\nView all \nDevelopers\nLEARN\nDocumentation\nStudio API Reference\nAPI reference\nGuides\nGROQ cheat sheet\nSanity UI\nGet started \nBUILD AND SHARE\nTemplates\nTools and plugins\nSchemas and snippets\nProject showcase\nShare your work\nBrowse Exchange \nFRAMEWORKS\nReact\nVue\nNext.js\nNuxt.js\nSvelte\nRemix\nGatsby\nAstro\nAngular\nEleventy\nView all \nResources\nDISCOVER\nBlog\nResource library\nGlossary\nAgency partners\nBecome a partner\nTechnical support\nTalk to sales \nCASE STUDIES\nPuma\n\nSource of truth for global markets\n\nAether\n\nUnique digital shopping experience\n\nMorning Brew\n\nOmnichannel media distribution\n\nInVision\n\nDelivering exceptional customer experiences\n\nView all \nPOPULAR GUIDES\nHeadless CMS\nStructured content\nContent modeling\nHeadless SEO\nStatic websites\nView all \nEnterprise\nPricing\nLog in\nContact sales\nGet started\nSearch\nOverview\nGetting started\nCreate a project\nCreate a schema\nCreate content\nConnect content\nWhat's next?\nSanity Studio\nContent Lake\nBuild with Sanity\nAccess control\nReference\nStudio v2 docs\nGetting Started with Sanity Studio\n\nLearn how to configure your first schema for Sanity Studio.\n\nSanity Studio is configured using Javascript\n\nThis step will get you started modeling your content by configuring your first schema for Sanity Studio.\n\nProtip\n\n👉  Look for the pointing finger emoji to find only the actionable paragraphs if you want to speedrun this guide!\n\nWhat is Sanity Studio?\n\nSanity Studio is an application for creating, editing, and working with content. You can set it up, configure, and customize it with basic JavaScript. You can also extend it using React and a wide selection of helper libraries. While the studio is intentionally engineered to be simple to get started with, it has a lot of advanced functionality out of the box. It’s designed to get out of the way and let you add features as the need arises.\n\nGive me more technical details about the studio!\nFile layout\n.\n├── README.md\n├── node_modules\n├── package-lock.json\n├── package.json\n├── sanity.cli.js\n├── sanity.config.js\n├── schemas\n│   └── index.js\n└── static\n\nThe schemas folder is where you add your document types and define their fields.\n\nIn sanity.config.js you'll find the configuration details for your studio – such as which project and dataset (the collections of documents that make up your content) it should connect to and what plugins should be activated. We'll look more into these concepts later.\n\nThat’s pretty much what you need to know for now.\n\nDeeper dive into the file structure\nDefining your first document type\n\nLet's build a simple content model for holding a collection of pets, real or not. Sanity Studio will automatically build a user interface from the schema where you describe your content models.\n\nA document type is similar to a “collection” if you’re used to NoSQL/document databases or a table if you know relational databases. In the JSON documents that the Studio writes to, it will appear as a _type property. It’s very common to use this property to query for your content; for example *[_type == \"pet\"].\n\nLet's make a studio that can hold a collection of pets, starting with recording their names.\n\nTo make your first document type, do the following:\n\n👉  Create a new file inside of the schemas folder and call it pet.js\n\n👉  Open pet.js and add the following code to it\n\n// schemas/pet.js\nexport default {\n  name: 'pet',\n  type: 'document',\n  title: 'Pet',\n  fields: [\n    {\n      name: 'name',\n      type: 'string',\n      title: 'Name'\n    }\n  ]\n}\nRead detailed walkthrough of the code\n\n👉  The next step is to import this document type definition into schema.js and add it to the array of types. Open schemas/index.js and import the new document type, and put it into the schemaTypes array:\n\n// schemas/index.js\n\nimport pet from './pet'\n\n\n\nexport const schemaTypes = [pet]\n\n\n👉  Now, you can save and run the command npm run dev in your command line if you haven’t started it already. Head over to http://localhost:3333.\n\nThe new Pet type should appear to the left if everything went as planned. Congrats, this is your first document type!\n\nSanity Studio with the “Pet” document\n\nNow, you know the basics of what you need to know to be productive. We’ll be back and work more with field types, but first, let’s look at how the Studio interacts with the Content Lake to create and edit data.\n\nNext: Edit and publish content →\n\nUPDATED ON SEPTEMBER 12, 2023\n\nWas this article helpful?\nNot at all\nSomewhat\nAbsolutely!\nI want to suggest an improvement to this article.\nPAGE CONTENT\nWhat is Sanity Studio?\nFile layout\nDefining your first document type\nProduct\nSanity Studio\nAPIs\nContent Lake\nSecurity & Compliance\nCompare Sanity \nResources\nDocumentation\nBlog\nResource library\nCase Studies\nGuides \nTemplates \nPartners \nExplainers \nCMS \nCompany\nContact Sales\nEnterprise\nCareers\nTerms of Service\nPrivacy Policy\nAccessibility Statement\nStay connected\nGitHub\nSlack\nTwitter\nYouTube\nStack Overflow\nBlog RSS\nNewsletter\n©Sanity 2023\nCookie preferences"
  },
  {
    "title": "Getting started with Sanity",
    "url": "https://www.sanity.io/docs/getting-started-with-sanity",
    "html": "Skip to content\nJoin live – Get insights, tips, + Q&A from Sanity developers on our latest releases \nProduct\nPLATFORM\nSanity Studio\n\nFlexible editing environment\n\nAPIs\n\nConnect to anything\n\nContent Lake\n\nReal-time database\n\nTry product demo \nFEATURES\nReal-time collaboration\n\nFearlessly work with content\n\nPrecise content querying\n\nTreat content as data with GROQ\n\nLocalization\n\nCoherent messaging across territories\n\nSolutions\nUSE CASES\nE-commerce\n\nRicher shopping experiences\n\nMarketing sites\n\nControl your story\n\nProducts & services\n\nInnovate and automate\n\nMobile apps\n\nContent backend for every OS\n\nView all \nINTEGRATIONS\nShopify\nMux\nVercel\nNetlify\nAlgolia\nCloudinary\nBigCommerce\nCommerce Layer\nSmartling\nTransifex\nView all \nDevelopers\nLEARN\nDocumentation\nStudio API Reference\nAPI reference\nGuides\nGROQ cheat sheet\nSanity UI\nGet started \nBUILD AND SHARE\nTemplates\nTools and plugins\nSchemas and snippets\nProject showcase\nShare your work\nBrowse Exchange \nFRAMEWORKS\nReact\nVue\nNext.js\nNuxt.js\nSvelte\nRemix\nGatsby\nAstro\nAngular\nEleventy\nView all \nResources\nDISCOVER\nBlog\nResource library\nGlossary\nAgency partners\nBecome a partner\nTechnical support\nTalk to sales \nCASE STUDIES\nPuma\n\nSource of truth for global markets\n\nAether\n\nUnique digital shopping experience\n\nMorning Brew\n\nOmnichannel media distribution\n\nInVision\n\nDelivering exceptional customer experiences\n\nView all \nPOPULAR GUIDES\nHeadless CMS\nStructured content\nContent modeling\nHeadless SEO\nStatic websites\nView all \nEnterprise\nPricing\nLog in\nContact sales\nGet started\nSearch\nOverview\nGetting started\nCreate a project\nCreate a schema\nCreate content\nConnect content\nWhat's next?\nSanity Studio\nContent Lake\nBuild with Sanity\nAccess control\nReference\nStudio v2 docs\nGetting started with Sanity\n\nThere are different ways of getting started with Sanity, depending on how you like to learn. You can set up a minimal project accompanied by a step-by-step guide, watch videos, or start with one of our templates.\n\nIf you have questions about Sanity, and how to get started, join our Slack community and ask there.\n\nCreate your first project\n\nSet up a minimal Sanity project in minutes accompanied by a step-by-step guide.\n\nCreate project →\nWatch a video tutorial\n\nLearn how configure and deploy Sanity Studio, and create, edit, and query content from the Content Lake.\n\nWatch the Sanity.io Crash Course at YouTube\nStart from a template\n\nLearn by checking out the source code of a pre-built template project!\n\nBlog with built-in content editing using Next.js\nPersonal website with built-in content editing\nProduct\nSanity Studio\nAPIs\nContent Lake\nSecurity & Compliance\nCompare Sanity \nResources\nDocumentation\nBlog\nResource library\nCase Studies\nGuides \nTemplates \nPartners \nExplainers \nCMS \nCompany\nContact Sales\nEnterprise\nCareers\nTerms of Service\nPrivacy Policy\nAccessibility Statement\nStay connected\nGitHub\nSlack\nTwitter\nYouTube\nStack Overflow\nBlog RSS\nNewsletter\n©Sanity 2023\nCookie preferences"
  },
  {
    "title": "Welcome to Sanity's Documentation",
    "url": "https://www.sanity.io/docs/overview-introduction",
    "html": "Skip to content\nJoin live – Get insights, tips, + Q&A from Sanity developers on our latest releases \nProduct\nPLATFORM\nSanity Studio\n\nFlexible editing environment\n\nAPIs\n\nConnect to anything\n\nContent Lake\n\nReal-time database\n\nTry product demo \nFEATURES\nReal-time collaboration\n\nFearlessly work with content\n\nPrecise content querying\n\nTreat content as data with GROQ\n\nLocalization\n\nCoherent messaging across territories\n\nSolutions\nUSE CASES\nE-commerce\n\nRicher shopping experiences\n\nMarketing sites\n\nControl your story\n\nProducts & services\n\nInnovate and automate\n\nMobile apps\n\nContent backend for every OS\n\nView all \nINTEGRATIONS\nShopify\nMux\nVercel\nNetlify\nAlgolia\nCloudinary\nBigCommerce\nCommerce Layer\nSmartling\nTransifex\nView all \nDevelopers\nLEARN\nDocumentation\nStudio API Reference\nAPI reference\nGuides\nGROQ cheat sheet\nSanity UI\nGet started \nBUILD AND SHARE\nTemplates\nTools and plugins\nSchemas and snippets\nProject showcase\nShare your work\nBrowse Exchange \nFRAMEWORKS\nReact\nVue\nNext.js\nNuxt.js\nSvelte\nRemix\nGatsby\nAstro\nAngular\nEleventy\nView all \nResources\nDISCOVER\nBlog\nResource library\nGlossary\nAgency partners\nBecome a partner\nTechnical support\nTalk to sales \nCASE STUDIES\nPuma\n\nSource of truth for global markets\n\nAether\n\nUnique digital shopping experience\n\nMorning Brew\n\nOmnichannel media distribution\n\nInVision\n\nDelivering exceptional customer experiences\n\nView all \nPOPULAR GUIDES\nHeadless CMS\nStructured content\nContent modeling\nHeadless SEO\nStatic websites\nView all \nEnterprise\nPricing\nLog in\nContact sales\nGet started\nSearch\nOverview\nGetting started\nSanity Studio\nContent Lake\nBuild with Sanity\nAccess control\nReference\nStudio v2 docs\nWelcome to Sanity's Documentation\n\nHere you'll find ways to get started, understand core concepts, and explore a variety of resources to help you get the most from Sanity. We also recommend joining our Slack community for help along the way.\n\nSanity Studio was recently released in a new major version (v3). You can find migration guides from Studio v2 here.\n\nGet started with Sanity\n\nLearn the basics of the Sanity platform and create your first project with guides, videos and templates.\n\nStart learning →\nCORE CONCEPTS\nSanity Studio\n\nThis is our collaborative interface for editors and content creators\n\nInstall Sanity CLI and Sanity Studio\nLearn how to structure your content\nLearn how to customise your Studio\nContent Lake\n\nOur real-time datastore that you can connect to any application or frontend\n\nHow to query content with GROQ\nUse Sanity with GraphQL\nLearn how to use images & assets\nREFERENCE DOCS\nStudio API Reference\n\nBrowse all the APIs available to configure, customize, and interact with Sanity Studio\n\nCommand line interface\n\nEverything you can do from the Sanity CLI\n\nQuery language (GROQ)\n\nSanity’s open-source query language\n\nSchema types\n\nAll the schema types supported in Studio\n\nSee all\nSANITY EXCHANGE\nExplore Sanity Exchange\n\nFind what you need. Learn new things. Share with others.\n\nGuides\n\nStep-by-step tutorials & deep dives\n\nTools and plugins\n\nResources to evolve your Studio\n\nTemplates\n\nFully configured Sanity projects\n\nShowcase projects\n\nInspiration from the community\n\nProduct\nSanity Studio\nAPIs\nContent Lake\nSecurity & Compliance\nCompare Sanity \nResources\nDocumentation\nBlog\nResource library\nCase Studies\nGuides \nTemplates \nPartners \nExplainers \nCMS \nCompany\nContact Sales\nEnterprise\nCareers\nTerms of Service\nPrivacy Policy\nAccessibility Statement\nStay connected\nGitHub\nSlack\nTwitter\nYouTube\nStack Overflow\nBlog RSS\nNewsletter\n©Sanity 2023\nCookie preferences"
  },
  {
    "title": "GROQ Query Cheat Sheet - Sort, Filter & Array Examples",
    "url": "https://www.sanity.io/docs/query-cheat-sheet",
    "html": "Skip to content\nJoin live – Get insights, tips, + Q&A from Sanity developers on our latest releases \nProduct\nPLATFORM\nSanity Studio\n\nFlexible editing environment\n\nAPIs\n\nConnect to anything\n\nContent Lake\n\nReal-time database\n\nTry product demo \nFEATURES\nReal-time collaboration\n\nFearlessly work with content\n\nPrecise content querying\n\nTreat content as data with GROQ\n\nLocalization\n\nCoherent messaging across territories\n\nSolutions\nUSE CASES\nE-commerce\n\nRicher shopping experiences\n\nMarketing sites\n\nControl your story\n\nProducts & services\n\nInnovate and automate\n\nMobile apps\n\nContent backend for every OS\n\nView all \nINTEGRATIONS\nShopify\nMux\nVercel\nNetlify\nAlgolia\nCloudinary\nBigCommerce\nCommerce Layer\nSmartling\nTransifex\nView all \nDevelopers\nLEARN\nDocumentation\nStudio API Reference\nAPI reference\nGuides\nGROQ cheat sheet\nSanity UI\nGet started \nBUILD AND SHARE\nTemplates\nTools and plugins\nSchemas and snippets\nProject showcase\nShare your work\nBrowse Exchange \nFRAMEWORKS\nReact\nVue\nNext.js\nNuxt.js\nSvelte\nRemix\nGatsby\nAstro\nAngular\nEleventy\nView all \nResources\nDISCOVER\nBlog\nResource library\nGlossary\nAgency partners\nBecome a partner\nTechnical support\nTalk to sales \nCASE STUDIES\nPuma\n\nSource of truth for global markets\n\nAether\n\nUnique digital shopping experience\n\nMorning Brew\n\nOmnichannel media distribution\n\nInVision\n\nDelivering exceptional customer experiences\n\nView all \nPOPULAR GUIDES\nHeadless CMS\nStructured content\nContent modeling\nHeadless SEO\nStatic websites\nView all \nEnterprise\nPricing\nLog in\nContact sales\nGet started\nSearch\nOverview\nGetting started\nSanity Studio\nContent Lake\nAPI Versioning\nQuery language (GROQ)\nHow Queries Work\nQuery Cheat Sheet\nGROQ Playground\nHigh performance GROQ\nPaginating with GROQ\nGraphQL\nNEWPerspectives\nImages & assets\nAPI CDN\nReal-time\nNEWPresenting and previewing content\nDrafts\nWebhooks\nNEWEmbeddings Index API\nDatasets\nIDs and paths\nUpdating content\nImporting data\nSecurity\nTechnical limits\nBuild with Sanity\nAccess control\nReference\nStudio v2 docs\nQuery Cheat Sheet - GROQ\n\nData query examples.\n\nHere are some typical queries in GROQ. You can also check out our introduction to GROQ and the complete reference documentation. To actually run queries you can:\n\nHit your content lake's query HTTP endpoint directly\nUse the JavaScript or PHP SDKs, or another client\nInstall the Vision plugin that runs queries right inside Sanity Studio\nGo to groq.dev to run queries against any JSON dataset\nGotcha\n\nIf your query doesn't work as expected, it might be related to API versioning.\n\nFilters\nProtip\n\nYou will get null as a value on a query if the key you ask for doesn't exist. That means you can filter on key != null to check if it exists with a value or not.\n\n* // Everything, i.e. all documents\n*[] // Everything with no filters applied, i.e. all documents\n*[_type == \"movie\"] // All movie documents\n*[_id == \"abc.123\"] // _id equals\n*[_type in [\"movie\", \"person\"]] // _type is movie or person\n*[_type == \"movie\" && popularity > 15 && releaseDate > \"2016-04-25\"] // multiple filters AND\n*[_type == \"movie\" && (popularity > 15 || releaseDate > \"2016-04-25\")] // multiple filters OR\n*[popularity < 15] // less than\n*[popularity > 15] // greater than\n*[popularity <= 15] // less than or equal\n*[popularity >= 15] // greater than or equal\n*[popularity == 15]\n*[releaseDate != \"2016-04-27\"] // not equal\n*[!(releaseDate == \"2016-04-27\")] // not equal\n*[!(releaseDate != \"2016-04-27\")] // even equal via double negatives \"not not equal\"\n*[dateTime(_updatedAt) > dateTime('2018-04-20T20:43:31Z')] // Use zulu-time when comparing datetimes to strings\n*[dateTime(_updatedAt) > dateTime(now()) - 60*60*24*7] // Updated within the past week\n*[name < \"Baker\"] // Records whose name precedes \"Baker\" alphabetically\n*[awardWinner == true] // match boolean\n*[awardWinner] // true if awardWinner == true\n*[!awardWinner] // true if awardWinner == false\n*[defined(awardWinner)] // has been assigned an award winner status (any kind of value)\n*[!defined(awardWinner)] // has not been assigned an award winner status (any kind of value)\n*[title == \"Aliens\"]\n*[title in [\"Aliens\", \"Interstellar\", \"Passengers\"]]\n*[_id in path(\"a.b.c.*\")] // _id matches a.b.c.d but not a.b.c.d.e\n*[_id in path(\"a.b.c.**\")] // _id matches a.b.c.d, and also a.b.c.d.e.f.g, but not a.b.x.1\n*[!(_id in path(\"drafts.**\"))] // _id matches anything that is not under the drafts-path\n*[\"yolo\" in tags] // documents that have the string \"yolo\" in the array \"tags\"\n*[status in [\"completed\", \"archived\"]] // the string field status is either == \"completed\" or \"archived\"\n*[\"person_sigourney-weaver\" in castMembers[].person._ref] // Any document having a castMember referencing sigourney as its person\n*[slug.current == \"some-slug\"] // nested properties\n*[count((categories[]->slug.current)[@ in [\"action\", \"thriller\"]]) > 0] // documents that reference categories with slugs of \"action\" or \"thriller\"\n*[count((categories[]->slug.current)[@ in [\"action\", \"thriller\"]]) == 2] // documents that reference categories with slugs of \"action\" and \"thriller\"\n  // set == 2 based on the total number of items in the array\nText matching\nGotcha\n\nThe match operator is designed for human-language text and might not do what you expect!\n\n// Text contains the word \"word\"\n*[text match \"word\"]\n\n// Title contains a word starting with \"wo\"\n*[title match \"wo*\"] \n\n// Inverse of the previous query; animal matches the start of the word \"caterpillar\" (perhaps animal == \"cat\")\n*[\"caterpillar\" match animal + \"*\"] \n\n// Title and body combined contains a word starting with \"wo\" and the full word \"zero\"\n*[[title, body] match [\"wo*\", \"zero\"]] \n\n// Are there aliens in my rich text?\n*[body[].children[].text match \"aliens\"] \n\n// Note how match operates on tokens!\n\"foo bar\" match \"fo*\"  // -> true\n\"my-pretty-pony-123.jpg\" match \"my*.jpg\"  // -> false\nSlice Operations\nProtip\n\nThere is no default limit, meaning that if you're not explicit about slice, you'll get everything.\n\n*[_type == \"movie\"][0] // a single movie (an object is returned, not an array)\n*[_type == \"movie\"][0..5] // first 6 movies (inclusive)\n*[_type == \"movie\"][0...5] // first 5 movies (non-inclusive)\n*[_type == \"movie\"]{title}[0...10] // first 10 movie titles\n*[_type == \"movie\"][0...10]{title} // first 10 movie titles\n*[_type == \"movie\"][10...20]{title} // first 10 movie titles, offset by 10\n*[_type == \"movie\"] // no slice specified --> all movies are returned\n\nAlso note: The above queries don't make much sense without also specifying an order. E.g. the \"first 6 movies\" query only returns \"first\" movies in the sense that these are the first six movies the backend happens to pull out.\n\nOrdering\nProtip\n\nDocuments are returned by default in ascending order by _id, which may not be what you're after. If you're querying for a subset of your documents, it's usually a good idea to specify an order.\n\nNo matter what sort order is specified, the ascending order by _id will always remain the final tie-breaker.\n\n// order results\n*[_type == \"movie\"] | order(_createdAt asc)\n\n// order results by multiple attributes\n*[_type == \"movie\"] | order(releaseDate desc) | order(_createdAt asc)\n\n// order todo items by descending priority,\n// where priority is equal, list most recently updated\n// item first\n*[_type == \"todo\"] | order(priority desc, _updatedAt desc) \n\n// the single, oldest document\n*[_type == \"movie\"] | order(_createdAt asc)[0]\n\n// the single, newest document\n*[_type == \"movie\"] | order(_createdAt desc)[0]\n\n// oldest 10 documents\n*[_type == \"movie\"] | order(_createdAt asc)[0..9]\n\n// BEWARE! This selects 10 documents using the default\n// ordering, and *only the selection* is ordered by\n// _createdAt in ascending order\n*[_type == \"movie\"][0..9] | order(_createdAt asc)\n\n// limit/offset using external params (see client documentation)\n*[_type == \"movie\"] | order(_createdAt asc) [$start..$end]\n\n// order results alphabetically by a string field\n// This is case sensitive, so A-Z come before a-z\n*[_type == \"movie\"] | order(title asc)\n\n// order results alphabetically by a string field,\n// ignoring case\n*[_type == \"movie\"] | order(lower(title) asc)\nJoins\n// Fetch movies with title, and join with poster asset with path + url\n*[_type=='movie']{title,poster{asset->{path,url}}}\n\n// Say castMembers is an array containing objects with character name and a reference to the person:\n// We want to fetch movie with title and an attribute named \"cast\" which is an array of actor names\n*[_type=='movie']{title,'cast': castMembers[].person->name}\n\n// Same query as above, except \"cast\" now contains objects with person._id and person.name\n*[_type=='movie']{title,'cast': castMembers[].person->{_id, name}}\n\n// Using the ^ operator to refer to the enclosing document. Here ^._id refers to the id\n// of the enclosing person record.\n*[_type==\"person\"]{\n  name,\n  \"relatedMovies\": *[_type=='movie' && references(^._id)]{ title }\n}\n\n// Books by author.name (book.author is a reference)\n*[_type == \"book\" && author._ref in *[_type==\"author\" && name==\"John Doe\"]._id ]{...}\n\nObjects and Arrays\n// Create your own objects\n// https://groq.dev/lcGV0Km6dpvYovREqq1gLS\n{\n  // People ordered by Nobel prize year\n  \"peopleByPrizeYear\": *[]|order(prizes[0].year desc){\n  \t\"name\": firstname + \" \" + surname,\n    \"orderYear\": prizes[0].year,\n    prizes\n  },\n  // List of all prizes ordered by year awarded\n  \"allPrizes\": *[].prizes[]|order(year desc)\n}\n\n// Get all Nobel prizes from all root person documents\n// https://groq.dev/v8T0DQawC6ihbNUf4cUeeS\n*[].prizes[]\nObject Projections\n// return only title\n*[_type == 'movie']{title} \n\n// return values for multiple attributes\n*[_type == 'movie']{_id, _type, title} \n\n// explicitly name the return field for _id\n*[_type == 'movie']{'renamedId': _id, _type, title} \n\n// Return an array of attribute values (no object wrapper)\n*[_type == 'movie'].title\n*[_type == 'movie']{'characterNames': castMembers[].characterName}\n\n// movie titled Arrival and its posterUrl\n*[_type=='movie' && title == 'Arrival']{title,'posterUrl': poster.asset->url} \n\n// Explicitly return all attributes\n*[_type == 'movie']{...} \n\n// Some computed attributes, then also add all attributes of the result\n*[_type == 'movie']{'posterUrl': poster.asset->url, ...} \n\n// Default values when missing or null in document\n*[_type == 'movie']{..., 'rating': coalesce(rating, 'unknown')}\n\n// Number of elements in array 'actors' on each movie\n*[_type == 'movie']{\"actorCount\": count(actors)} \n\n// Apply a projection to every member of an array\n*[_type == 'movie']{castMembers[]{characterName, person}} \n\n// Filter embedded objects\n*[_type == 'movie']{castMembers[characterName match 'Ripley']{characterName, person}} \n\n// Follow every reference in an array of references\n*[_type == 'book']{authors[]->{name, bio}}\n\n// Explicity name the outer return field\n{'threeMovieTitles': *[_type=='movie'][0..2].title}\n\n// Combining several unrelated queries in one request\n{'featuredMovie': *[_type == 'movie' && title == 'Alien'][0], 'scifiMovies': *[_type == 'movie' && 'sci-fi' in genres]}\n\nSpecial variables\n// *\n*   // Everything, i.e. all documents\n\n// @\n*[ @[\"1\"] ] // @ refers to the root value (document) of the scope\n*[ @[$prop]._ref == $refId ] // Select reference prop from an outside variable.\n*{\"arraySizes\": arrays[]{\"size\": count(@)}} // @ also works for nested scopes\n\n// ^\n// ^ refers to the enclosing document. Here ^._id refers to the id\n// of the enclosing person record.\n*[_type==\"person\"]{\n  name,\n  \"relatedMovies\": *[_type=='movie' && references(^._id)]{ title }\n}\nConditionals\n// select() returns the first => pair whose left-hand side evaluates to true\n*[_type=='movie']{..., \"popularity\": select(\n  popularity > 20 => \"high\",\n  popularity > 10 => \"medium\",\n  popularity <= 10 => \"low\"\n)}\n\n// The first select() parameter without => is returned if no previous matches are found\n*[_type=='movie']{..., \"popularity\": select(\n  popularity > 20 => \"high\",\n  popularity > 10 => \"medium\",\n  \"low\"\n)}\n\n// Projections also have syntactic sugar for inline conditionals\n*[_type=='movie']{\n  ...,\n  releaseDate >= '2018-06-01' => {\n    \"screenings\": *[_type == 'screening' && movie._ref == ^._id],\n    \"news\": *[_type == 'news' && movie._ref == ^._id],\n  },\n  popularity > 20 && rating > 7.0 => {\n    \"featured\": true,\n    \"awards\": *[_type == 'award' && movie._ref == ^._id],\n  },\n}\n\n// The above is exactly equivalent to:\n*[_type=='movie']{\n  ...,\n  ...select(releaseDate >= '2018-06-01' => {\n    \"screenings\": *[_type == 'screening' && movie._ref == ^._id],\n    \"news\": *[_type == 'news' && movie._ref == ^._id],\n  }),\n  ...select(popularity > 20 && rating > 7.0 => {\n    \"featured\": true,\n    \"awards\": *[_type == 'award' && movie._ref == ^._id],\n  }),\n}\n\n\n// Specify sets of projections for different content types in an array\ncontent[]{\n  _type == 'type1' => {\n    // Your selection of fields for type1\n  },\n  _type == 'type2' => {\n    // Your selection of fields for type2\n    \"url\": file.asset->url // Use joins to get data of referenced document\n  }\n}\n\nHandling references conditionally\n\nIn cases where an array contains both references and non-references, it's often desirable for a GROQ query to conditionally return the inline object (where dealing with non-references) or the referenced document (where dealing with references). This can be done by considering the _type of each array item and dereferencing the item (@->) if it's a reference or getting the whole object (@) if it's not a reference.\n\n'content': content[]{\n  _type == 'reference' => @->,\n  _type != 'reference' => @,\n}\nFunctions\n// any document that references the document \n// with id person_sigourney-weaver, \n// return only title\n*[references(\"person_sigourney-weaver\")]{title}\n\n// Movies which reference ancient people\n*[_type==\"movie\" && references(*[_type==\"person\" && age > 99]._id)]{title}\n\n*[defined(tags)] // any document that has the attribute 'tags'\n\n// coalesce takes a number of attribute references\n// and returns the value of the first attribute\n// that is non-null. In this example used to\n// default back to the English language where a\n// Finnish translation does not exist.\n*{\"title\": coalesce(title.fi, title.en)} \n\n// count counts the number of items in a collection\ncount(*[_type == 'movie' && rating == 'R']) // returns number of R-rated movies\n\n*[_type == 'movie']{\n  title, \n  \"actorCount\": count(actors) // Counts the number of elements in the array actors\n}\n\n// round() rounds number to the nearest integer, or the given number of decimals\nround(3.14) // 3\nround(3.14, 1) // 3.1\n\n\n// score() adds points to the score value depending \n// on the use of the string \"GROQ\" in each post's description \n// The value is then used to order the posts \n*[_type == \"post\"] \n  | score(description match \"GROQ\") \n  | order(_score desc) \n  { _score, title }\n\n// boost() adds a defined boost integer to scores of items matching a condition \n// Adds 1 to the score for each time $term is matched in the title field\n// Adds 3 to the score if (movie > 3) is true\n*[_type == \"movie\" && movieRating > 3] | \n  score(\n    title match $term,\n    boost(movieRating > 8, 3)\n  )\n\n// Creates a scoring system where $term matching in the title\n// is worth more than matching in the body\n*[_type == \"movie\" && movieRating > 3] | score(\n  boost(title match $term, 4),\n  boost(body match $term, 1)\n)\n\n// Returns the body Portable Text data as plain text\n*[_type == \"post\"] \n  { \"plaintextBody\": pt::text(body) }\n\n\nGeolocation\n// Returns all documents that are storefronts\n// within 10 miles of the user-provided currentLocation parameter\n*[\n  _type == 'storefront' &&\n  geo::distance(geoPoint, $currentLocation) < 16093.4\n]\n\n// For a given $currentLocation geopoint and deliveryZone area\n// Return stores that deliver to a user's location\n*[\n  _type == \"storefront\" &&\n  geo::contains(deliveryZone, $currentLocation)\n]\n\n// Creates a \"marathonRoutes\" array that contains\n// all marathons whose routes intersect with the current neighborhood\n*[_type == \"neighborhood\"] {\n  \"marathonRoutes\": *[_type == \"marathon\" && \n                      geo::intersects(^.neighborhoodRegion, routeLine)  \n                    ]\n}\nArithmetic and Concatenation\n// Standard arithmetic operations are supported\n1 + 2  // 3 (addition)\n3 - 2  // 1 (subtraction)\n2 * 3  // 6 (multiplication)\n8 / 4  // 2 (division)\n2 ** 4 // 16 (exponentiation)\n8 % 3  // 2 (modulo)\n\n// Exponentiation can be used to take square- and cube-roots too\n9 ** (1/2)  // 3 (square root)\n27 ** (1/3) // 3 (cube root)\n\n// + can also concatenate strings, arrays, and objects:\n\"abc\" + \"def\" // \"abcdef\"\n[1,2] + [3,4] // [1,2,3,4]\n{\"a\":1,\"b\":2} + {\"c\":3} // {\"a\":1,\"b\":2,\"c\":3}\n\n// Concatenation of a string and a number requires the number be\n// converted to a string. Otherwise, the operation returns null\n3 + \" p.m.\"         // null\nstring(3) + \" p.m.\" // \"3 p.m.\"\n\nUPDATED ON SEPTEMBER 26, 2023\n\nWas this article helpful?\nNot at all\nSomewhat\nAbsolutely!\nI want to suggest an improvement to this article.\nPAGE CONTENT\nFilters\nText matching\nSlice Operations\nOrdering\nJoins\nObjects and Arrays\nObject Projections\nSpecial variables\nConditionals\nHandling references conditionally\nFunctions\nGeolocation\nArithmetic and Concatenation\nProduct\nSanity Studio\nAPIs\nContent Lake\nSecurity & Compliance\nCompare Sanity \nResources\nDocumentation\nBlog\nResource library\nCase Studies\nGuides \nTemplates \nPartners \nExplainers \nCMS \nCompany\nContact Sales\nEnterprise\nCareers\nTerms of Service\nPrivacy Policy\nAccessibility Statement\nStay connected\nGitHub\nSlack\nTwitter\nYouTube\nStack Overflow\nBlog RSS\nNewsletter\n©Sanity 2023\nCookie preferences"
  },
  {
    "title": "How GROQ Queries Work - Step by Step Guide",
    "url": "https://www.sanity.io/docs/how-queries-work",
    "html": "Skip to content\nJoin live – Get insights, tips, + Q&A from Sanity developers on our latest releases \nProduct\nPLATFORM\nSanity Studio\n\nFlexible editing environment\n\nAPIs\n\nConnect to anything\n\nContent Lake\n\nReal-time database\n\nTry product demo \nFEATURES\nReal-time collaboration\n\nFearlessly work with content\n\nPrecise content querying\n\nTreat content as data with GROQ\n\nLocalization\n\nCoherent messaging across territories\n\nSolutions\nUSE CASES\nE-commerce\n\nRicher shopping experiences\n\nMarketing sites\n\nControl your story\n\nProducts & services\n\nInnovate and automate\n\nMobile apps\n\nContent backend for every OS\n\nView all \nINTEGRATIONS\nShopify\nMux\nVercel\nNetlify\nAlgolia\nCloudinary\nBigCommerce\nCommerce Layer\nSmartling\nTransifex\nView all \nDevelopers\nLEARN\nDocumentation\nStudio API Reference\nAPI reference\nGuides\nGROQ cheat sheet\nSanity UI\nGet started \nBUILD AND SHARE\nTemplates\nTools and plugins\nSchemas and snippets\nProject showcase\nShare your work\nBrowse Exchange \nFRAMEWORKS\nReact\nVue\nNext.js\nNuxt.js\nSvelte\nRemix\nGatsby\nAstro\nAngular\nEleventy\nView all \nResources\nDISCOVER\nBlog\nResource library\nGlossary\nAgency partners\nBecome a partner\nTechnical support\nTalk to sales \nCASE STUDIES\nPuma\n\nSource of truth for global markets\n\nAether\n\nUnique digital shopping experience\n\nMorning Brew\n\nOmnichannel media distribution\n\nInVision\n\nDelivering exceptional customer experiences\n\nView all \nPOPULAR GUIDES\nHeadless CMS\nStructured content\nContent modeling\nHeadless SEO\nStatic websites\nView all \nEnterprise\nPricing\nLog in\nContact sales\nGet started\nSearch\nOverview\nGetting started\nSanity Studio\nContent Lake\nAPI Versioning\nQuery language (GROQ)\nHow Queries Work\nQuery Cheat Sheet\nGROQ Playground\nHigh performance GROQ\nPaginating with GROQ\nGraphQL\nNEWPerspectives\nImages & assets\nAPI CDN\nReal-time\nNEWPresenting and previewing content\nDrafts\nWebhooks\nNEWEmbeddings Index API\nDatasets\nIDs and paths\nUpdating content\nImporting data\nSecurity\nTechnical limits\nBuild with Sanity\nAccess control\nReference\nStudio v2 docs\nHow Queries Work – GROQ\n\nA tutorial on using the Sanity query language GROQ.\n\nThe idea behind our query language GROQ (Graph-Relational Object Queries) is to be able to describe exactly what information your application needs, potentially joining together information from several sets of documents, then stitching together a very specific response with only the exact fields you need.\n\nIf you need help setting up a client to perform these queries in your front end, you should check out the documentation for the client for JavaScript or PHP. You can also check out the GROQ Arcade if you want to query any JSON source and get familiar with the language.\n\nIntroduction\n\nLet us start with the basics. We will take this simple query and pick it apart:\n\n*[_type == 'movie' && releaseYear >= 1979] \n\n\nA query typically starts with *. This asterisk represents every document in your dataset. To do any useful work this is typically followed by a filter in brackets. The filter above has two terms:\n\nThe filter\n\nFirst, we filter by document type. Every document in Sanity is required to have a type, and the type is always in the _type field. (We prefix any Sanity-specific fields with an underscore in an attempt to avoid clashing with any of your field names.) So _type == 'movie' limits this query to documents of the type ‘movie’. && is the operator “and”.\n\nThe second term releaseYear >= 1979 assumes that the movies have a field called releaseYear that contains numbers. It will match any document where this number is larger than or equal to 1979.\n\nProjections\n\nSo if we run this query, the result will be an array containing all movies from the year 1979 onwards in the dataset. Nice! However in a typical application movies might be huge documents containing information on actors, staff, posters, tag-lines, show-times, ratings, and whatnot. If our goal is to render a list of movies in an overview, we are wasting bandwidth. Projections to the rescue.\n\nThe typical projection is wrapped in braces and describes the data we want to see for each movie. A nice and simple projection for this query would give us the id, title, and release year for each movie. It could look like this: {_id, title, releaseYear}. Putting it all together:\n\n*[_type == 'movie' && releaseYear >= 1979]{ _id, title, releaseYear } \nBasic sorting\n\nNow there is another problem. Our movies appear in some unspecified order. Let’s say we want to sort our movies by year. For this, we use the order-function. Order takes a number of fields and sort directions and orders your documents accordingly. We wanted to sort our movies by releaseYear. This is easily accomplished with order(releaseYear), like this:\n\n*[_type == 'movie' && releaseYear >= 1979] | order(releaseYear) {\n  _id, title, releaseYear \n} \n\n\n(We need the | operator here in front of the order()-function, we'll discuss that more later.)\n\nWe think of GROQ statements as describing a data flow from left to right. First everything (*) flows through the filter [_type == 'movie' && …], then all those movies flow through the order()-function which is then all mapped through the projection {_id, title, ...} which picks out the bits we want to be returned.\n\nThe order function accepts a list of fields, and optionally you can specify the sort direction for each field. If you wanted to sort the movies by year, and then within each year we want them alphabetical by title, we could use this ordering: order(releaseYear, title) And if we wanted the newest movies first, we could reverse the direction like this: order(releaseYear desc, title).\n\nProtip\n\nasc means “ascending” and desc means descending in this context. If you leave out the sort-direction, Sanity will assume you want the ascending order.\n\nSlicing the result set\n\nThis brings us to our final problem for this query: There are many movies in the world. Maybe our dataset contains tens of thousands. We need a way to describe which slice of that list we want to show. This is done using a selector. Let’s say we just wanted the first movie, we could add a [0] at the end. This works exactly like an array accessor and would return only the first element. If we want a slice, we can add the range operator like this: [0...100]. This would return the first hundred movies from index 0 through 99. We can just as well ask for [1023...1048] or any other slice we desire. So there we are, our first basic query with filtering, ordering, projections, and selector:\n\n*[_type == 'movie' && releaseYear >= 1979] | order(releaseYear) {\n  _id, title, releaseYear\n}[0...100]\n\nReferences and joins\n\nA reference in Sanity is a link from one document to another. Standard references are “hard” meaning when a document references another document, the target document must exist, and is actually prevented from being deleted until the reference is removed. (There are also weak-references that do not \"hold on to\" the target. You make them by adding a _weak-key to the reference object like this: {_ref: \"<document-id>\", _weak: true})\n\nLet’s say we have “person”-type documents that looks something like this:\n\n{\n  _id: \"ridley-scott\",\n  _type: \"person\",\n  name: \"Ridley Scott\"\n}\n\n\nKeeping it simple, maybe our movies had a field director that contained a reference to a person. It could look something like this:\n\n{\n  _id: \"alien\",\n  _type: \"movie\",\n  title: \"Alien\",\n  releaseYear: 1979,\n  director: { _ref: \"ridley-scott\" }\n}\n\nRemember Sanity-specific fields are prefixed with an underscore, and an object containing a _ref key appearing anywhere in the document becomes a hard reference.\n\nExpanding references\n\nNow we can do a number of useful things with this reference. The most basic thing is expanding the reference in place. Let’s revisit our movie queries from the introduction.\n\n*[_type == 'movie' && releaseYear >= 1979]{\n  _id, title, releaseYear\n}\n\n\nLet’s say we wanted to include the director in the returned result. If we didn't know any better, we'd perhaps try something like this:\n\n*[_type == 'movie' && releaseYear >= 1979]{\n  _id, title, releaseYear,\n\n  director\n\n}\n\n\nBut if we just naïvely include the director in like this, we will just get whatever is in the director field on this document, which is the literal reference description:\n\n[\n  {\n    _id: \"alien\",\n    title: \"Alien\",\n    releaseYear: \"1979\",\n\n    director: {\n\n      _ref: \"ridley-scott\"\n\n    }\n\n  },\n  … (more movies)\n]\n\n\n\nThis is not what we wanted, we wanted to follow that reference! By adding the dereferencing operator -> we ask Sanity to follow the reference and replace it with the actual content of the document referenced:\n\n*[_type == 'movie' && releaseYear >= 1979]{\n  _id, title, releaseYear,\n\n  director->\n\n}\n\n\nNow, this is useful. We’d get something like this:\n\n[\n  {\n    _id: \"alien\",\n    title: \"Alien\",\n    releaseYear: \"1979\",\n\n    director: {\n\n      _id: \"ridley-scott\",\n\n      _type: \"person\",\n\n      name: \"Ridley Scott\"\n\n    }\n\n  },\n  … (more movies)\n]\n\n\n\nThen maybe we didn’t want all that metadata with our director? We can add a separate projection for our director:\n\n*[_type == 'movie' && releaseYear >= 1979]{\n  _id, title, releaseYear,\n\n  director->{name}\n\n}\n\n\nOur query now returns the director with just the name property we wanted:\n\n{\n  _id: \"alien\",\n  title: \"Alien\",\n  releaseYear: \"1979\",\n\n  director: {\n\n    name: \"Ridley Scott\"\n\n  }\n\n}\n\n\nBut we can do one better. We are not limited to the existing fields in the document in our projections, we can actually declare new fields. Let’s say we are building our compact movie list and we wanted just the title, year, and director name. We can get minimal cruft by extracting just the name and putting it in a new field, like this:\n\n*[_type == 'movie' && releaseYear >= 1979]{\n  _id, title, releaseYear,\n\n  \"directorName\": director->name\n\n}\n\n\nNow our query returns exactly what we want in the form we want it:\n\n{\n  _id: \"alien\",\n  title: \"Alien\",\n  releaseYear: \"1979\",\n\n  directorName: \"Ridley Scott\"\n\n}\n\nExpanding an array of references\n\nThe example above shows how to expand a reference, but sometimes you'll be working with an array of references. In the above example, let's say we wanted to add producers. Details on how to set this up in your schema can be found in the Array documentation, but we'll consider how you might query that data.\n\nIn this revised example, let's look at a query like this:\n\n*[_type == 'movie' && releaseYear >= 1979]{\n  _id, title, releaseYear, director,\n\n  producers[]\n\n}\n\n\nWe use square brackets after producers because it's an array. Note that we used producers with an s. The naming convention of your schema doesn't matter to GROQ (as long as you get the name right); it is our recommendation to use the plural form for arrays.\n\nNow, you might get this:\n\n[\n  {\n    _id: \"alien\",\n    title: \"Alien\",\n    releaseYear: \"1979\",\n    director: {\n      _ref: \"ridley-scott\"\n    }\n\n    producers: [\n\n      {\n\n        _key: \"<uniqueKey1>\",\n\n        _type: \"reference\",\n\n        _ref: \"gordon-carroll\"\n\n      },\n\n      {\n\n        _key: \"<uniqueKey2>\",\n\n        _type: \"reference\",\n\n        _ref: \"david-giler\"\n\n      },\n\n      {\n\n        _key: \"<uniqueKey3>\",\n\n        _type: \"reference\",\n\n        _ref: \"walter-hill\"\n\n      },\n\n    ]\n\n  },\n  … (more movies)\n]\n\nLike before, this isn't returning the details for each producer. We're getting references like we did at the beginning of the single reference example (and a _key, which ensures uniqueness). To expand references in an array, we will use the dereferencing operator (->) again. However, the square brackets are mandatory to traverse the array.\n\n*[_type == 'movie' && releaseYear >= 1979]{\n  _id, title, releaseYear, director,\n\n  producers[]->\n\n}\n\n\nThis will return the full details for each of the three producers referenced. Projections and naked projections can be used just as with single references (the projection would go after the dereference operator).\n\nGotcha\n\nIt would be easy to forget the square brackets when expanding an array of references (i.e., querying producers-> instead of producers[]->, with the former returning a single null value). This is perhaps complicated by the fact that both producers and producers[] will return the array (albeit with unexpanded references). This is the nature of how GROQ traversals work.\n\nFiltering by references\n\nWhen dealing with references, we have a useful function called references() which can be used in filters to select only documents that reference specific other documents. Let’s say we want to list every movie Ridley Scott has been involved in. It looks like this:\n\n*[_type == 'movie' && references('ridley-scott')]\nOur first join\n\nIt is time to write our first proper join: Say we wanted to list people and include all the movies they were involved in? We’ll be querying the “person”-type documents, but in the projections for each person, we’ll ask for the movies they have been involved in. To do this we have to briefly cover the parent-operator ^. Let’s look at the query first:\n\n*[_type == \"person\"]{\n  _id, name,\n  \"movies\": *[_type == \"movie\" && references(^._id)].title\n}\n\n\nIn a join, the parent operator is a way to reference the “parent” document. In this example the outer query for “person”-type documents fetches a bunch of people, and for each person, it returns the _id and name. Then we want to fetch the movies referencing that person.\n\nNow we declare the new field “movies” where we start a new query for “movie”-type documents, but for each person, we want to limit our movie query to movies referencing that person. To achieve this we need the _id of the person, but if we just wrote _id in the movies-query we’d reference the _id of the movie.\n\nTo get to the fields of the person record we go “up” one level using the parent operator ^. So ^ means the specific “person”-document that our movie query is about, and then ^._id is the _id of that person, just as ^.name would be her name. So when we say references(^._id) in the query above, we limit our movies to movies referencing the current person.\n\nNaked projections\n\nThere is one more new thing we haven’t talked about in this query. We could have written the movies-sub-query like this:\n\n*[_type == \"movie\" && references(^._id)]{title}\n\nOur list of movies would have looked something like this:\n\n”movies”: [{title: “Alien”}, {title: “Blade Runner”}, …]\n\nSince we just wanted the titles, we can use a “naked projection”. By naming the field we want, like this:\n\n*[_type == \"movie\" && references(^._id)].title \n\nWe get a nice, simple array of values, like this:\n\n”movies”: [“Alien”, “Blade Runner”, …]\n\nSo, for completeness, the result of the full person w/movies query above could look something like this:\n\n[\n  {\n    _id: \"river-phoenix\",\n    name: \"River Phoenix\",\n    movies: [\"My Own Private Idaho\", \"Stand By Me\", …]\n  },\n  {\n    _id: \"ridley-scott\",\n    name: \"Ridley Scott\",\n    movies: [\"Alien\", \"Blade Runner\", …]\n  },\n  …\n]\n\nMore ways to filter\n\nSanity supports a growing number of ways to filter your documents. We have shown simple attribute comparisons with _type == ‘movie’ and  releaseYear >= 1979. We have shown filtering by references using the references()-function. In addition, we support:\n\nText search using the match operator, e.g. *[title match \"Alien*\"]\nFiltering by the presence of a field, e.g. *[defined(status)] which only match documents that have the status property set to any value.\nThe in-operator which matches values in arrays, as in *[\"sci-fi\" in genres], that matches all documents where genres is an array and that array contains the value \"sci-fi\".\nYou can of course combine these filters using the boolean operators && (and), || (or), ! (not), like this *[_type == \"movie\" && (!(\"sci-fi\" in genres) || releaseYear >= 1979)].\n\nWe are working on a full reference for the GROQ feature set. In the meantime, you'll find a comprehensive set of examples in the cheat sheet.\n\nQueries in projections\n\nA useful thing in GROQ is that filtering and projections also can be used inside your projections. Let’s say you work for an architect and every project has a number of milestones. A document might look something like this:\n\n{\n  _id: \"timmerhuis\"\n  _type: \"project\",\n  title: \"Timmerhuis\",\n  milestones: [\n    {status: \"competition\", year: 2009},\n    {status: \"design-development\", year: 2011},\n    {status: \"breaking-ground\", year: 2013},\n    {status: \"completed\", year: 2015}\n  ]\n}\n\n\nAnd let’s say the view we are producing is about showing the current status of the project. We could achieve this by finding the latest milestone and extracting its status tag. This can be done in GROQ like this:\n\n*[_type == \"project\"]{\n  _id, title,\n  \"status\": milestones|order(year desc)[0].status\n}\n\n\nLet’s pick apart the status query milestones|order(year desc)[0].status in some detail:\n\nFirst, we take the field milestones which contain the (potentially unordered) list of milestones for the project. Using the pipe-operator | we send the contents of this array to the order function, which is instructed to sort the array by year in descending order order(year desc). Then we take only the first element [0] (which is the latest milestone) and return the value of its status field. So now our project list would look something like this:\n\n[\n  {\n    _id: \"timmerhuis\",\n    title: \"Timmerhuis\",\n    status: \"completed\"\n  },\n  …\n]\n\n\nLet’s try another clever trick querying the contents of this object. Instead of a status field, we just want a boolean flag telling whether the project is completed. We could achieve this like this:\n\n*[_type == \"project\"]{\n  _id, title,\n  \"completed\": count(milestones[status == 'completed']) > 0\n}\n\n\nHere we take the milestones, but select only the ones having the status “completed”. Then we count() the number of milestones matching this filter. If that count is > 0 the result is true. So now our result would look something like this:\n\n[\n  {\n    _id: \"timmerhuis\",\n    title: \"Timmerhuis\",\n    completed: true\n  },\n  …\n]\n\nSome comments on the pipe operator\n\nIn the project-status example above we used the pipe operator | for a second time. Let's explore that in some detail:\n\n*[_type == \"project\"]{\n  _id, title,\n  \"status\": milestones | order(year desc)[0].status\n}\n\n\nThe pipe operator takes the output from its left-hand side and sends it to the operation to its right. \"But isn’t this what all GROQ statements do?\", I hear you ask. And you’d be right.\n\nIn some situations, like when using pipe functions (e.g., order() in the project-status example), an explicit pipe operator is required. milestones order(year desc) would be a syntax error, so pipe functions must be preceded by a pipe operator, like this: milestones | order(year desc). score() is another example of a pipe function, which must therefore be preceded by a pipe operator.\n\nProjections may be preceded by a pipe operator, though it is optional. Expression { Projection } and Expression | { Projection } are equally valid.\n\nThe pipe operator is not valid in any other contexts and will return an error.\n\nSome fine points on arrays and projections\n\nLet’s consider this document with some deep structure:\n\n{\n  _id: \"alien\",\n  _type: \"movie\",\n  title: \"Alien\",\n  poster: {\n    asset: {_ref: \"image-1234\"}\n  },\n  images: [\n    {\n      caption: \"Sigourney Weaver and the cat Jones on set\",\n      asset: {_ref: \"image-1235\"}\n    },\n    {\n      caption: \"Bolaji Badejo suiting up for the role of the Alien\",\n      asset: {_ref: \"image-1236\"}\n    },\n  ]\n}\n\n\nSo we have a movie with a poster image and an array of other images. Each image has some metadata represented here by a caption, then a reference to an asset record containing all the metadata on the specific image including its URL. A simplified asset record could look something like this:\n\n{\n  _id: \"image-1234\",\n  _type: \"sanity.imageAsset\",\n  url: \"http:///cdn.sanity.io/images/…\"\n}\n\n\nNow we can retrieve the poster image url and attach it to our result for each movies like this:\n\n*[_type == \"movie\"]{\n  title,\n  \"posterImage\": poster.asset->url\n}\n\n\nBut what if we wanted to do the same thing for the other images? Since the images field is an array, we can’t just images.asset->url. We somehow have to apply the asset->url-part to each member of the array. This is accomplished by adding a blank filter, like this: images[].asset->url which will return the image URLs as a simple array. So the full query would look like this:\n\n*[_type == \"movie\"]{\n  title,\n  \"imageUrls\": images[].asset->url\n}\n\n\nThis would yield something like this:\n\n[\n  {\n    title: \"Alien\",\n    imageUrls: [\"http://cdn.sanity.io/…\", \"http://cdn.sanity.io/…\"]\n  },\n  …\n]\n\n\nIf you wanted a richer data-set with your images you could use a normal projection like this (taking care to add the blank filter to apply the projection to every array member):\n\n*[_type == \"movie\"]{\n  title,\n  \"images\": images[]{\n    caption,\n    \"url\": asset->url,\n  }\n}\n\n\nNow your result looks something like this:\n\n[\n  {\n    title: \"Alien\",\n    images: [\n      {\n        caption: \"Sigourney Weaver and the cat Jones on set\",\n        url: \"http://cdn.sanity.io/…\"\n      },\n      {\n        caption: \"Bolaji Badejo suiting up for the role of the Alien\",\n        url: \"http://cdn.sanity.io/…\"\n      }\n    ]\n  },\n  …\n]\n\nThe ellipsis operator\n\nSometimes you might want to compute some properties of a document, but still want the entire set of attributes returned. This can be a problem since the moment you specify a projection, you'll have to list all the fields you want to be included. Let's say we wanted to count the actors in a movie doing something like this:\n\n*[_type == \"movie\"]{\n  \"actorCount\": count(actors)\n}\n\nThere is a problem with this. We just wanted to add a custom field, but since we needed a projection to do it, now all we got is something like this:\n\n[\n  {actorCount: 3},\n  {actorCount: 27},\n  {actorCount: 15}\n]\n\nWhat we wanted was our custom field in addition to the normal fields. This can be achieved with the ellipsis operator. By appending it like this, we effectively say we want the fields we just specified, but also everything else:\n\n*[_type == \"movie\"]{\n  \"actorCount\": count(actors),\n\n  ...\n\n}\n\nWhich brings us a result that could look something like this:\n\n{\n  {\n    title: \"Alien\",\n    releaseYear: 1979,\n    actorCount: 23,\n    // And loads more fields, probably\n  },\n  // and many more movies\n}\nPlacement of the ellipsis operator\n\nIn v1 of the GROQ API, the placement of the ellipsis operator didn't matter. An explicit property would override the ellipsis even when the ellipsis comes last in the projection.\n\nConsider a case where a projection returns some number of properties, with one being age. Let's say that age is equal to 23.\n\n// GROQ API v1\n\n*[]{\n  ...,\n  'age': 45 // This will override the age property\n            // returned from the ellipsis, so age == 45\n}\n\n\n*[]{\n  'age': 45,\n  ... // The age value returned from the ellipsis does *not*\n      // override the explicitly set value, so age == 45\n}\n\nAs of v2021-03-25 of the GROQ API, the placement of the ellipsis operator matters. An explicitly-set property will only override the property returned by the ellipsis if it comes after the ellipsis. In other words, as of v2021-03-25, the property that comes last in the projection wins, even if it's returned by the ellipsis.\n\n// GROQ API v2021-03-25 or later\n\n*[]{\n  ...,\n  'age': 45 // This will override the age property\n            // returned from the ellipsis, so age == 45\n}\n\n\n*[]{\n  'age': 45,\n  ... // The age value returned from the ellipsis *does*\n      // override the explicitly set value, so age == 23\n}\n\nSuch a distinction might be observed when dereferencing. In v1, the explicit dereference operator could be placed before or after the ellipsis operator in a projection, and the reference would be followed in either case. As of v2021-03-25, an explicit dereference after the ellipsis would give expected behaviour, returning the contents of the document that was referenced. However, placing the ellipsis last will actually cause the original (non-dereferenced) property to win, returning just the _ref and _type.\n\nProtip\n\nWhen using the ellipsis operator, you will want to list it first in your projection. Any explicitly-listed properties that follow will overwrite that same property that would have been returned by the ellipsis, which is likely the behaviour you're after.\n\nQueries that don't start with an *\n\nWe said initially that most GROQ queries start with the asterisk, but they don't have to. Any valid GROQ expression can be the entire query. This is a valid query:\n\ncount(*)\n\n\nIt will return the number of documents in the dataset. This is also valid:\n\ncount(*[name match \"sigourney\"]) > 0\n\n\nIt will return true if any document in the entire dataset has a name-field containing the word \"sigourney\".\n\nMore usefully, you can actually have a projection be your outer statement. Like this:\n\n{\n  \"mainStory\": *[_id == \"story-1234\"],\n  \"campaign\": *[_id == \"campaign-1234\"],\n  \"topStories\": *[_type == \"story\"] | order(publishAt desc) [0..10]\n}\n\nThis combines three completely separate queries into one query and returns an object containing the result of all of them. This can be a useful way to speed up page loads. By combining queries in this manner you can often get all of the core content for a web page to load in a single, cacheable query.\n\nQuery Optimization\n\nLike with any query language, it's important to be aware of performance as you develop and iterate on your GROQ queries.\n\nFinally\n\nSo there you go, this should cover most of what you need to understand in the day-to-day use of GROQ. You should now check out our Query Cheat Sheet, the GROQ Arcade, and the reference docs which contain examples of all operators and functions currently supported.\n\nUPDATED ON APRIL 5, 2023\n\nWas this article helpful?\nNot at all\nSomewhat\nAbsolutely!\nI want to suggest an improvement to this article.\nPAGE CONTENT\nIntroduction\nThe filter\nProjections\nBasic sorting\nSlicing the result set\nReferences and joins\nExpanding references\nFiltering by references\nOur first join\nNaked projections\nMore ways to filter\nQueries in projections\nSome comments on the pipe operator\nSome fine points on arrays and projections\nThe ellipsis operator\nPlacement of the ellipsis operator\nQueries that don't start with an *\nQuery Optimization\nFinally\nProduct\nSanity Studio\nAPIs\nContent Lake\nSecurity & Compliance\nCompare Sanity \nResources\nDocumentation\nBlog\nResource library\nCase Studies\nGuides \nTemplates \nPartners \nExplainers \nCMS \nCompany\nContact Sales\nEnterprise\nCareers\nTerms of Service\nPrivacy Policy\nAccessibility Statement\nStay connected\nGitHub\nSlack\nTwitter\nYouTube\nStack Overflow\nBlog RSS\nNewsletter\n©Sanity 2023\nCookie preferences"
  },
  {
    "title": "Content Lake",
    "url": "https://www.sanity.io/docs/datastore",
    "html": "Skip to content\nJoin live – Get insights, tips, + Q&A from Sanity developers on our latest releases \nProduct\nPLATFORM\nSanity Studio\n\nFlexible editing environment\n\nAPIs\n\nConnect to anything\n\nContent Lake\n\nReal-time database\n\nTry product demo \nFEATURES\nReal-time collaboration\n\nFearlessly work with content\n\nPrecise content querying\n\nTreat content as data with GROQ\n\nLocalization\n\nCoherent messaging across territories\n\nSolutions\nUSE CASES\nE-commerce\n\nRicher shopping experiences\n\nMarketing sites\n\nControl your story\n\nProducts & services\n\nInnovate and automate\n\nMobile apps\n\nContent backend for every OS\n\nView all \nINTEGRATIONS\nShopify\nMux\nVercel\nNetlify\nAlgolia\nCloudinary\nBigCommerce\nCommerce Layer\nSmartling\nTransifex\nView all \nDevelopers\nLEARN\nDocumentation\nStudio API Reference\nAPI reference\nGuides\nGROQ cheat sheet\nSanity UI\nGet started \nBUILD AND SHARE\nTemplates\nTools and plugins\nSchemas and snippets\nProject showcase\nShare your work\nBrowse Exchange \nFRAMEWORKS\nReact\nVue\nNext.js\nNuxt.js\nSvelte\nRemix\nGatsby\nAstro\nAngular\nEleventy\nView all \nResources\nDISCOVER\nBlog\nResource library\nGlossary\nAgency partners\nBecome a partner\nTechnical support\nTalk to sales \nCASE STUDIES\nPuma\n\nSource of truth for global markets\n\nAether\n\nUnique digital shopping experience\n\nMorning Brew\n\nOmnichannel media distribution\n\nInVision\n\nDelivering exceptional customer experiences\n\nView all \nPOPULAR GUIDES\nHeadless CMS\nStructured content\nContent modeling\nHeadless SEO\nStatic websites\nView all \nEnterprise\nPricing\nLog in\nContact sales\nGet started\nSearch\nOverview\nGetting started\nSanity Studio\nContent Lake\nAPI Versioning\nQuery language (GROQ)\nGraphQL\nNEWPerspectives\nImages & assets\nAPI CDN\nReal-time\nNEWPresenting and previewing content\nDrafts\nWebhooks\nNEWEmbeddings Index API\nDatasets\nIDs and paths\nUpdating content\nImporting data\nSecurity\nTechnical limits\nBuild with Sanity\nAccess control\nReference\nStudio v2 docs\nContent Lake\n\nThe Sanity Content Lake is where your content is stored and accessed. It runs in the cloud and is fully managed by us. You access the Content Lake via the Sanity API, either by using one of our client libraries or directly via the HTTP API.\n\nCORE FEATURES\nAPI Versioning\nHow to handle versioning in the Sanity API\nGraphQL\nHow to use GraphQL API for your project on Sanity.io\nQuery data with GROQ\nGROQ is Sanity's open-source query language.\nAsset pipeline\n\nSanity comes with a powerful image pipeline that does image metadata(dimensions, colors etc) extraction on upload, and on-the-fly transformations in front-end usage. All served from a global CDN.\n\nPerspectives\nRetrieve content by running queries against different \"views\" of your data\nContent Source Maps\nFetch content source metadata in your GROQ queries\nProduct\nSanity Studio\nAPIs\nContent Lake\nSecurity & Compliance\nCompare Sanity \nResources\nDocumentation\nBlog\nResource library\nCase Studies\nGuides \nTemplates \nPartners \nExplainers \nCMS \nCompany\nContact Sales\nEnterprise\nCareers\nTerms of Service\nPrivacy Policy\nAccessibility Statement\nStay connected\nGitHub\nSlack\nTwitter\nYouTube\nStack Overflow\nBlog RSS\nNewsletter\n©Sanity 2023\nCookie preferences"
  },
  {
    "title": "Reference docs",
    "url": "https://www.sanity.io/docs/reference",
    "html": "This website stores data such as cookies to enable essential site functionality, as well as marketing, personalization, and analytics. By remaining on this website you indicate your consent. Privacy Policy\nSkip to content\nJoin live – Get insights, tips, + Q&A from Sanity developers on our latest releases \nProduct\nPLATFORM\nSanity Studio\n\nFlexible editing environment\n\nAPIs\n\nConnect to anything\n\nContent Lake\n\nReal-time database\n\nTry product demo \nFEATURES\nReal-time collaboration\n\nFearlessly work with content\n\nPrecise content querying\n\nTreat content as data with GROQ\n\nLocalization\n\nCoherent messaging across territories\n\nSolutions\nUSE CASES\nE-commerce\n\nRicher shopping experiences\n\nMarketing sites\n\nControl your story\n\nProducts & services\n\nInnovate and automate\n\nMobile apps\n\nContent backend for every OS\n\nView all \nINTEGRATIONS\nShopify\nMux\nVercel\nNetlify\nAlgolia\nCloudinary\nBigCommerce\nCommerce Layer\nSmartling\nTransifex\nView all \nDevelopers\nLEARN\nDocumentation\nStudio API Reference\nAPI reference\nGuides\nGROQ cheat sheet\nSanity UI\nGet started \nBUILD AND SHARE\nTemplates\nTools and plugins\nSchemas and snippets\nProject showcase\nShare your work\nBrowse Exchange \nFRAMEWORKS\nReact\nVue\nNext.js\nNuxt.js\nSvelte\nRemix\nGatsby\nAstro\nAngular\nEleventy\nView all \nResources\nDISCOVER\nBlog\nResource library\nGlossary\nAgency partners\nBecome a partner\nTechnical support\nTalk to sales \nCASE STUDIES\nPuma\n\nSource of truth for global markets\n\nAether\n\nUnique digital shopping experience\n\nMorning Brew\n\nOmnichannel media distribution\n\nInVision\n\nDelivering exceptional customer experiences\n\nView all \nPOPULAR GUIDES\nHeadless CMS\nStructured content\nContent modeling\nHeadless SEO\nStatic websites\nView all \nEnterprise\nPricing\nLog in\nContact sales\nGet started\nSearch\nOverview\nGetting started\nSanity Studio\nContent Lake\nBuild with Sanity\nAccess control\nReference\nSANITY STUDIO\nStudio API Reference ↗\nConfiguration API\nSchema\nPlugins\nTools\nForm\nStudio Components\nDocument\nHistory experience\nDesk Tool\nTheme\nAuthentication\nStructure Builder\nStudio React Hooks\nCOMMAND LINE INTERFACES\nSanity CLI\nNEWEmbeddings Index CLI\nCONTENT LAKE\nHTTP API\nQuery language (GROQ)\nImage transformations\nINTEGRATION\nClient libraries\nVisual Editing Tooling\nPortable Text\nPROJECT MANAGEMENT\nNEWPlatform terminology\nProjects, organizations, and billing\nPlans and Payments\nStudio v2 docs\nReference docs\n\nThe reference documentation is a technical description of the various components that make up the Sanity platform.\n\nStudio API Reference\nBrowse all the APIs available to configure, customize, and interact with Sanity Studio\nHTTP API\n\nThe HTTP API contains all the endpoints for interacting with your data in an efficient and real-time way. You can use the HTTP API directly or through our client libraries.\n\nSchema\n\nThe schema describes the types of documents editors may author in Sanity Studio.\n\nQuery Language (GROQ) - Reference\nGROQ (GRaph Oriented Query language) is a declarative language designed to query collections of largely schema-less JSON documents.\nCommand Line Interface (CLI)\nBuild, deploy, init plugin boilerplate, run scripts, and wrangle datasets and webhooks, all from the command line\nClient libraries\nStructure Builder Reference\nOverview of different methods in the Structure builder API\nImage Transformations\nReference documentation for image transformations.\nProduct\nSanity Studio\nAPIs\nContent Lake\nSecurity & Compliance\nCompare Sanity \nResources\nDocumentation\nBlog\nResource library\nCase Studies\nGuides \nTemplates \nPartners \nExplainers \nCMS \nCompany\nContact Sales\nEnterprise\nCareers\nTerms of Service\nPrivacy Policy\nAccessibility Statement\nStay connected\nGitHub\nSlack\nTwitter\nYouTube\nStack Overflow\nBlog RSS\nNewsletter\n©Sanity 2023\nCookie preferences"
  }
]
